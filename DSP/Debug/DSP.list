
DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b968  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  0800baf8  0800baf8  0001baf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1fc  0800c1fc  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1fc  0800c1fc  0001c1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c204  0800c204  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c204  0800c204  0001c204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c208  0800c208  0001c208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800c20c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
 10 .bss          00004608  200001fc  200001fc  000201fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004804  20004804  000201fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea38  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024f6  00000000  00000000  0002ec64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  00031160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ba0  00000000  00000000  00031e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d9c  00000000  00000000  000329b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010df6  00000000  00000000  00055754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c84e4  00000000  00000000  0006654a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c0  00000000  00000000  0012ea2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048f8  00000000  00000000  0012eaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001229  00000000  00000000  001333e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bae0 	.word	0x0800bae0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0800bae0 	.word	0x0800bae0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2110      	movs	r1, #16
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <SELECT+0x18>)
 8001002:	f001 fc51 	bl	80028a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001006:	2001      	movs	r0, #1
 8001008:	f001 f9a8 	bl	800235c <HAL_Delay>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40020000 	.word	0x40020000

08001014 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2110      	movs	r1, #16
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <DESELECT+0x18>)
 800101e:	f001 fc43 	bl	80028a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f001 f99a 	bl	800235c <HAL_Delay>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40020000 	.word	0x40020000

08001030 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800103a:	bf00      	nop
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <SPI_TxByte+0x30>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b02      	cmp	r3, #2
 8001048:	d1f8      	bne.n	800103c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800104a:	1df9      	adds	r1, r7, #7
 800104c:	2364      	movs	r3, #100	; 0x64
 800104e:	2201      	movs	r2, #1
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <SPI_TxByte+0x30>)
 8001052:	f002 f964 	bl	800331e <HAL_SPI_Transmit>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200036b4 	.word	0x200036b4

08001064 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001070:	bf00      	nop
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <SPI_TxBuffer+0x30>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b02      	cmp	r3, #2
 800107e:	d1f8      	bne.n	8001072 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001080:	887a      	ldrh	r2, [r7, #2]
 8001082:	2364      	movs	r3, #100	; 0x64
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <SPI_TxBuffer+0x30>)
 8001088:	f002 f949 	bl	800331e <HAL_SPI_Transmit>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200036b4 	.word	0x200036b4

08001098 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80010a2:	bf00      	nop
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <SPI_RxByte+0x34>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d1f8      	bne.n	80010a4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80010b2:	1dba      	adds	r2, r7, #6
 80010b4:	1df9      	adds	r1, r7, #7
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	4803      	ldr	r0, [pc, #12]	; (80010cc <SPI_RxByte+0x34>)
 80010be:	f002 fa6a 	bl	8003596 <HAL_SPI_TransmitReceive>

	return data;
 80010c2:	79bb      	ldrb	r3, [r7, #6]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200036b4 	.word	0x200036b4

080010d0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80010d8:	f7ff ffde 	bl	8001098 <SPI_RxByte>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	701a      	strb	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <SD_ReadyWait+0x30>)
 80010f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010f8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80010fa:	f7ff ffcd 	bl	8001098 <SPI_RxByte>
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2bff      	cmp	r3, #255	; 0xff
 8001106:	d004      	beq.n	8001112 <SD_ReadyWait+0x26>
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <SD_ReadyWait+0x30>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f3      	bne.n	80010fa <SD_ReadyWait+0xe>

	return res;
 8001112:	79fb      	ldrb	r3, [r7, #7]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200047ae 	.word	0x200047ae

08001120 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001126:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800112a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800112c:	f7ff ff72 	bl	8001014 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	e005      	b.n	8001142 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001136:	20ff      	movs	r0, #255	; 0xff
 8001138:	f7ff ff7a 	bl	8001030 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	3301      	adds	r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b09      	cmp	r3, #9
 8001146:	ddf6      	ble.n	8001136 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001148:	f7ff ff56 	bl	8000ff8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800114c:	2340      	movs	r3, #64	; 0x40
 800114e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001160:	2395      	movs	r3, #149	; 0x95
 8001162:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001164:	463b      	mov	r3, r7
 8001166:	2106      	movs	r1, #6
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff7b 	bl	8001064 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800116e:	e002      	b.n	8001176 <SD_PowerOn+0x56>
	{
		cnt--;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3b01      	subs	r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001176:	f7ff ff8f 	bl	8001098 <SPI_RxByte>
 800117a:	4603      	mov	r3, r0
 800117c:	2b01      	cmp	r3, #1
 800117e:	d002      	beq.n	8001186 <SD_PowerOn+0x66>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f4      	bne.n	8001170 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001186:	f7ff ff45 	bl	8001014 <DESELECT>
	SPI_TxByte(0XFF);
 800118a:	20ff      	movs	r0, #255	; 0xff
 800118c:	f7ff ff50 	bl	8001030 <SPI_TxByte>

	PowerFlag = 1;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <SD_PowerOn+0x80>)
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000219 	.word	0x20000219

080011a4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <SD_PowerOff+0x14>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	20000219 	.word	0x20000219

080011bc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
	return PowerFlag;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <SD_CheckPower+0x14>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000219 	.word	0x20000219

080011d4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <SD_RxDataBlock+0x5c>)
 80011e0:	22c8      	movs	r2, #200	; 0xc8
 80011e2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80011e4:	f7ff ff58 	bl	8001098 <SPI_RxByte>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2bff      	cmp	r3, #255	; 0xff
 80011f0:	d104      	bne.n	80011fc <SD_RxDataBlock+0x28>
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <SD_RxDataBlock+0x5c>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f3      	bne.n	80011e4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	2bfe      	cmp	r3, #254	; 0xfe
 8001200:	d001      	beq.n	8001206 <SD_RxDataBlock+0x32>
 8001202:	2300      	movs	r3, #0
 8001204:	e00f      	b.n	8001226 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5f 	bl	80010d0 <SPI_RxBytePtr>
	} while(len--);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	1e5a      	subs	r2, r3, #1
 8001216:	603a      	str	r2, [r7, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1f4      	bne.n	8001206 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800121c:	f7ff ff3c 	bl	8001098 <SPI_RxByte>
	SPI_RxByte();
 8001220:	f7ff ff3a 	bl	8001098 <SPI_RxByte>

	return TRUE;
 8001224:	2301      	movs	r3, #1
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200047ad 	.word	0x200047ad

08001234 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001244:	f7ff ff52 	bl	80010ec <SD_ReadyWait>
 8001248:	4603      	mov	r3, r0
 800124a:	2bff      	cmp	r3, #255	; 0xff
 800124c:	d001      	beq.n	8001252 <SD_TxDataBlock+0x1e>
 800124e:	2300      	movs	r3, #0
 8001250:	e02f      	b.n	80012b2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff feeb 	bl	8001030 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	2bfd      	cmp	r3, #253	; 0xfd
 800125e:	d020      	beq.n	80012a2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001260:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fefd 	bl	8001064 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800126a:	f7ff ff15 	bl	8001098 <SPI_RxByte>
		SPI_RxByte();
 800126e:	f7ff ff13 	bl	8001098 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001272:	e00b      	b.n	800128c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001274:	f7ff ff10 	bl	8001098 <SPI_RxByte>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	f003 031f 	and.w	r3, r3, #31
 8001282:	2b05      	cmp	r3, #5
 8001284:	d006      	beq.n	8001294 <SD_TxDataBlock+0x60>
			i++;
 8001286:	7bbb      	ldrb	r3, [r7, #14]
 8001288:	3301      	adds	r3, #1
 800128a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	2b40      	cmp	r3, #64	; 0x40
 8001290:	d9f0      	bls.n	8001274 <SD_TxDataBlock+0x40>
 8001292:	e000      	b.n	8001296 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001294:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001296:	bf00      	nop
 8001298:	f7ff fefe 	bl	8001098 <SPI_RxByte>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0fa      	beq.n	8001298 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d101      	bne.n	80012b0 <SD_TxDataBlock+0x7c>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b084      	sub	sp, #16
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	6039      	str	r1, [r7, #0]
 80012c4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012c6:	f7ff ff11 	bl	80010ec <SD_ReadyWait>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2bff      	cmp	r3, #255	; 0xff
 80012ce:	d001      	beq.n	80012d4 <SD_SendCmd+0x1a>
 80012d0:	23ff      	movs	r3, #255	; 0xff
 80012d2:	e042      	b.n	800135a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff feaa 	bl	8001030 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	0e1b      	lsrs	r3, r3, #24
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fea4 	bl	8001030 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	0c1b      	lsrs	r3, r3, #16
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fe9e 	bl	8001030 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	0a1b      	lsrs	r3, r3, #8
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fe98 	bl	8001030 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe93 	bl	8001030 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b40      	cmp	r3, #64	; 0x40
 800130e:	d102      	bne.n	8001316 <SD_SendCmd+0x5c>
 8001310:	2395      	movs	r3, #149	; 0x95
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e007      	b.n	8001326 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2b48      	cmp	r3, #72	; 0x48
 800131a:	d102      	bne.n	8001322 <SD_SendCmd+0x68>
 800131c:	2387      	movs	r3, #135	; 0x87
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e001      	b.n	8001326 <SD_SendCmd+0x6c>
	else crc = 1;
 8001322:	2301      	movs	r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fe81 	bl	8001030 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b4c      	cmp	r3, #76	; 0x4c
 8001332:	d101      	bne.n	8001338 <SD_SendCmd+0x7e>
 8001334:	f7ff feb0 	bl	8001098 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001338:	230a      	movs	r3, #10
 800133a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800133c:	f7ff feac 	bl	8001098 <SPI_RxByte>
 8001340:	4603      	mov	r3, r0
 8001342:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001344:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001348:	2b00      	cmp	r3, #0
 800134a:	da05      	bge.n	8001358 <SD_SendCmd+0x9e>
 800134c:	7bbb      	ldrb	r3, [r7, #14]
 800134e:	3b01      	subs	r3, #1
 8001350:	73bb      	strb	r3, [r7, #14]
 8001352:	7bbb      	ldrb	r3, [r7, #14]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f1      	bne.n	800133c <SD_SendCmd+0x82>

	return res;
 8001358:	7b7b      	ldrb	r3, [r7, #13]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SD_disk_initialize+0x14>
 8001374:	2301      	movs	r3, #1
 8001376:	e0d6      	b.n	8001526 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001378:	4b6d      	ldr	r3, [pc, #436]	; (8001530 <SD_disk_initialize+0x1cc>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <SD_disk_initialize+0x2a>
 8001386:	4b6a      	ldr	r3, [pc, #424]	; (8001530 <SD_disk_initialize+0x1cc>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	e0cb      	b.n	8001526 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800138e:	f7ff fec7 	bl	8001120 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001392:	f7ff fe31 	bl	8000ff8 <SELECT>

	/* check disk type */
	type = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800139a:	2100      	movs	r1, #0
 800139c:	2040      	movs	r0, #64	; 0x40
 800139e:	f7ff ff8c 	bl	80012ba <SD_SendCmd>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	f040 80a6 	bne.w	80014f6 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80013aa:	4b62      	ldr	r3, [pc, #392]	; (8001534 <SD_disk_initialize+0x1d0>)
 80013ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013b0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013b2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013b6:	2048      	movs	r0, #72	; 0x48
 80013b8:	f7ff ff7f 	bl	80012ba <SD_SendCmd>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d158      	bne.n	8001474 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	e00c      	b.n	80013e2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80013c8:	7bfc      	ldrb	r4, [r7, #15]
 80013ca:	f7ff fe65 	bl	8001098 <SPI_RxByte>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	f104 0310 	add.w	r3, r4, #16
 80013d6:	443b      	add	r3, r7
 80013d8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	3301      	adds	r3, #1
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d9ef      	bls.n	80013c8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013e8:	7abb      	ldrb	r3, [r7, #10]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	f040 8083 	bne.w	80014f6 <SD_disk_initialize+0x192>
 80013f0:	7afb      	ldrb	r3, [r7, #11]
 80013f2:	2baa      	cmp	r3, #170	; 0xaa
 80013f4:	d17f      	bne.n	80014f6 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013f6:	2100      	movs	r1, #0
 80013f8:	2077      	movs	r0, #119	; 0x77
 80013fa:	f7ff ff5e 	bl	80012ba <SD_SendCmd>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b01      	cmp	r3, #1
 8001402:	d807      	bhi.n	8001414 <SD_disk_initialize+0xb0>
 8001404:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001408:	2069      	movs	r0, #105	; 0x69
 800140a:	f7ff ff56 	bl	80012ba <SD_SendCmd>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001414:	4b47      	ldr	r3, [pc, #284]	; (8001534 <SD_disk_initialize+0x1d0>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	b29b      	uxth	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1eb      	bne.n	80013f6 <SD_disk_initialize+0x92>
 800141e:	e000      	b.n	8001422 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001420:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001422:	4b44      	ldr	r3, [pc, #272]	; (8001534 <SD_disk_initialize+0x1d0>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d064      	beq.n	80014f6 <SD_disk_initialize+0x192>
 800142c:	2100      	movs	r1, #0
 800142e:	207a      	movs	r0, #122	; 0x7a
 8001430:	f7ff ff43 	bl	80012ba <SD_SendCmd>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d15d      	bne.n	80014f6 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e00c      	b.n	800145a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001440:	7bfc      	ldrb	r4, [r7, #15]
 8001442:	f7ff fe29 	bl	8001098 <SPI_RxByte>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	f104 0310 	add.w	r3, r4, #16
 800144e:	443b      	add	r3, r7
 8001450:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	3301      	adds	r3, #1
 8001458:	73fb      	strb	r3, [r7, #15]
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d9ef      	bls.n	8001440 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001460:	7a3b      	ldrb	r3, [r7, #8]
 8001462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SD_disk_initialize+0x10a>
 800146a:	230c      	movs	r3, #12
 800146c:	e000      	b.n	8001470 <SD_disk_initialize+0x10c>
 800146e:	2304      	movs	r3, #4
 8001470:	73bb      	strb	r3, [r7, #14]
 8001472:	e040      	b.n	80014f6 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001474:	2100      	movs	r1, #0
 8001476:	2077      	movs	r0, #119	; 0x77
 8001478:	f7ff ff1f 	bl	80012ba <SD_SendCmd>
 800147c:	4603      	mov	r3, r0
 800147e:	2b01      	cmp	r3, #1
 8001480:	d808      	bhi.n	8001494 <SD_disk_initialize+0x130>
 8001482:	2100      	movs	r1, #0
 8001484:	2069      	movs	r0, #105	; 0x69
 8001486:	f7ff ff18 	bl	80012ba <SD_SendCmd>
 800148a:	4603      	mov	r3, r0
 800148c:	2b01      	cmp	r3, #1
 800148e:	d801      	bhi.n	8001494 <SD_disk_initialize+0x130>
 8001490:	2302      	movs	r3, #2
 8001492:	e000      	b.n	8001496 <SD_disk_initialize+0x132>
 8001494:	2301      	movs	r3, #1
 8001496:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d10e      	bne.n	80014bc <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800149e:	2100      	movs	r1, #0
 80014a0:	2077      	movs	r0, #119	; 0x77
 80014a2:	f7ff ff0a 	bl	80012ba <SD_SendCmd>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d80e      	bhi.n	80014ca <SD_disk_initialize+0x166>
 80014ac:	2100      	movs	r1, #0
 80014ae:	2069      	movs	r0, #105	; 0x69
 80014b0:	f7ff ff03 	bl	80012ba <SD_SendCmd>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d107      	bne.n	80014ca <SD_disk_initialize+0x166>
 80014ba:	e00d      	b.n	80014d8 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014bc:	2100      	movs	r1, #0
 80014be:	2041      	movs	r0, #65	; 0x41
 80014c0:	f7ff fefb 	bl	80012ba <SD_SendCmd>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d005      	beq.n	80014d6 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <SD_disk_initialize+0x1d0>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1e1      	bne.n	8001498 <SD_disk_initialize+0x134>
 80014d4:	e000      	b.n	80014d8 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014d6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <SD_disk_initialize+0x1d0>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <SD_disk_initialize+0x18e>
 80014e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e6:	2050      	movs	r0, #80	; 0x50
 80014e8:	f7ff fee7 	bl	80012ba <SD_SendCmd>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SD_disk_initialize+0x192>
 80014f2:	2300      	movs	r3, #0
 80014f4:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <SD_disk_initialize+0x1d4>)
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80014fc:	f7ff fd8a 	bl	8001014 <DESELECT>
	SPI_RxByte();
 8001500:	f7ff fdca 	bl	8001098 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001504:	7bbb      	ldrb	r3, [r7, #14]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d008      	beq.n	800151c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <SD_disk_initialize+0x1cc>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <SD_disk_initialize+0x1cc>)
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e001      	b.n	8001520 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800151c:	f7ff fe42 	bl	80011a4 <SD_PowerOff>
	}

	return Stat;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <SD_disk_initialize+0x1cc>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop
 8001530:	20000000 	.word	0x20000000
 8001534:	200047ad 	.word	0x200047ad
 8001538:	20000218 	.word	0x20000218

0800153c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SD_disk_status+0x14>
 800154c:	2301      	movs	r3, #1
 800154e:	e002      	b.n	8001556 <SD_disk_status+0x1a>
	return Stat;
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SD_disk_status+0x28>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000000 	.word	0x20000000

08001568 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <SD_disk_read+0x1c>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <SD_disk_read+0x20>
 8001584:	2304      	movs	r3, #4
 8001586:	e051      	b.n	800162c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <SD_disk_read+0xcc>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SD_disk_read+0x32>
 8001596:	2303      	movs	r3, #3
 8001598:	e048      	b.n	800162c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800159a:	4b27      	ldr	r3, [pc, #156]	; (8001638 <SD_disk_read+0xd0>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <SD_disk_read+0x44>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	607b      	str	r3, [r7, #4]

	SELECT();
 80015ac:	f7ff fd24 	bl	8000ff8 <SELECT>

	if (count == 1)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d111      	bne.n	80015da <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	2051      	movs	r0, #81	; 0x51
 80015ba:	f7ff fe7e 	bl	80012ba <SD_SendCmd>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d129      	bne.n	8001618 <SD_disk_read+0xb0>
 80015c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c8:	68b8      	ldr	r0, [r7, #8]
 80015ca:	f7ff fe03 	bl	80011d4 <SD_RxDataBlock>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d021      	beq.n	8001618 <SD_disk_read+0xb0>
 80015d4:	2300      	movs	r3, #0
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	e01e      	b.n	8001618 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	2052      	movs	r0, #82	; 0x52
 80015de:	f7ff fe6c 	bl	80012ba <SD_SendCmd>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d117      	bne.n	8001618 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	68b8      	ldr	r0, [r7, #8]
 80015ee:	f7ff fdf1 	bl	80011d4 <SD_RxDataBlock>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00a      	beq.n	800160e <SD_disk_read+0xa6>
				buff += 512;
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015fe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	3b01      	subs	r3, #1
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1ed      	bne.n	80015e8 <SD_disk_read+0x80>
 800160c:	e000      	b.n	8001610 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800160e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001610:	2100      	movs	r1, #0
 8001612:	204c      	movs	r0, #76	; 0x4c
 8001614:	f7ff fe51 	bl	80012ba <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001618:	f7ff fcfc 	bl	8001014 <DESELECT>
	SPI_RxByte();
 800161c:	f7ff fd3c 	bl	8001098 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	bf14      	ite	ne
 8001626:	2301      	movne	r3, #1
 8001628:	2300      	moveq	r3, #0
 800162a:	b2db      	uxtb	r3, r3
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000000 	.word	0x20000000
 8001638:	20000218 	.word	0x20000218

0800163c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <SD_disk_write+0x1c>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <SD_disk_write+0x20>
 8001658:	2304      	movs	r3, #4
 800165a:	e06b      	b.n	8001734 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800165c:	4b37      	ldr	r3, [pc, #220]	; (800173c <SD_disk_write+0x100>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SD_disk_write+0x32>
 800166a:	2303      	movs	r3, #3
 800166c:	e062      	b.n	8001734 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800166e:	4b33      	ldr	r3, [pc, #204]	; (800173c <SD_disk_write+0x100>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SD_disk_write+0x44>
 800167c:	2302      	movs	r3, #2
 800167e:	e059      	b.n	8001734 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001680:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <SD_disk_write+0x104>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <SD_disk_write+0x56>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	025b      	lsls	r3, r3, #9
 8001690:	607b      	str	r3, [r7, #4]

	SELECT();
 8001692:	f7ff fcb1 	bl	8000ff8 <SELECT>

	if (count == 1)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d110      	bne.n	80016be <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	2058      	movs	r0, #88	; 0x58
 80016a0:	f7ff fe0b 	bl	80012ba <SD_SendCmd>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d13a      	bne.n	8001720 <SD_disk_write+0xe4>
 80016aa:	21fe      	movs	r1, #254	; 0xfe
 80016ac:	68b8      	ldr	r0, [r7, #8]
 80016ae:	f7ff fdc1 	bl	8001234 <SD_TxDataBlock>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d033      	beq.n	8001720 <SD_disk_write+0xe4>
			count = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	e030      	b.n	8001720 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <SD_disk_write+0x104>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80016ca:	2100      	movs	r1, #0
 80016cc:	2077      	movs	r0, #119	; 0x77
 80016ce:	f7ff fdf4 	bl	80012ba <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80016d2:	6839      	ldr	r1, [r7, #0]
 80016d4:	2057      	movs	r0, #87	; 0x57
 80016d6:	f7ff fdf0 	bl	80012ba <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	2059      	movs	r0, #89	; 0x59
 80016de:	f7ff fdec 	bl	80012ba <SD_SendCmd>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d11b      	bne.n	8001720 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016e8:	21fc      	movs	r1, #252	; 0xfc
 80016ea:	68b8      	ldr	r0, [r7, #8]
 80016ec:	f7ff fda2 	bl	8001234 <SD_TxDataBlock>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00a      	beq.n	800170c <SD_disk_write+0xd0>
				buff += 512;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3b01      	subs	r3, #1
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1ee      	bne.n	80016e8 <SD_disk_write+0xac>
 800170a:	e000      	b.n	800170e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800170c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800170e:	21fd      	movs	r1, #253	; 0xfd
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fd8f 	bl	8001234 <SD_TxDataBlock>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <SD_disk_write+0xe4>
			{
				count = 1;
 800171c:	2301      	movs	r3, #1
 800171e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001720:	f7ff fc78 	bl	8001014 <DESELECT>
	SPI_RxByte();
 8001724:	f7ff fcb8 	bl	8001098 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	bf14      	ite	ne
 800172e:	2301      	movne	r3, #1
 8001730:	2300      	moveq	r3, #0
 8001732:	b2db      	uxtb	r3, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000000 	.word	0x20000000
 8001740:	20000218 	.word	0x20000218

08001744 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b08b      	sub	sp, #44	; 0x2c
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	603a      	str	r2, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	460b      	mov	r3, r1
 8001752:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SD_disk_ioctl+0x1e>
 800175e:	2304      	movs	r3, #4
 8001760:	e115      	b.n	800198e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	2b05      	cmp	r3, #5
 800176c:	d124      	bne.n	80017b8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d012      	beq.n	800179c <SD_disk_ioctl+0x58>
 8001776:	2b02      	cmp	r3, #2
 8001778:	dc1a      	bgt.n	80017b0 <SD_disk_ioctl+0x6c>
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <SD_disk_ioctl+0x40>
 800177e:	2b01      	cmp	r3, #1
 8001780:	d006      	beq.n	8001790 <SD_disk_ioctl+0x4c>
 8001782:	e015      	b.n	80017b0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001784:	f7ff fd0e 	bl	80011a4 <SD_PowerOff>
			res = RES_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800178e:	e0fc      	b.n	800198a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001790:	f7ff fcc6 	bl	8001120 <SD_PowerOn>
			res = RES_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800179a:	e0f6      	b.n	800198a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	1c5c      	adds	r4, r3, #1
 80017a0:	f7ff fd0c 	bl	80011bc <SD_CheckPower>
 80017a4:	4603      	mov	r3, r0
 80017a6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80017a8:	2300      	movs	r3, #0
 80017aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017ae:	e0ec      	b.n	800198a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80017b0:	2304      	movs	r3, #4
 80017b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017b6:	e0e8      	b.n	800198a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017b8:	4b77      	ldr	r3, [pc, #476]	; (8001998 <SD_disk_ioctl+0x254>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <SD_disk_ioctl+0x86>
 80017c6:	2303      	movs	r3, #3
 80017c8:	e0e1      	b.n	800198e <SD_disk_ioctl+0x24a>

		SELECT();
 80017ca:	f7ff fc15 	bl	8000ff8 <SELECT>

		switch (ctrl)
 80017ce:	79bb      	ldrb	r3, [r7, #6]
 80017d0:	2b0d      	cmp	r3, #13
 80017d2:	f200 80cb 	bhi.w	800196c <SD_disk_ioctl+0x228>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <SD_disk_ioctl+0x98>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080018d7 	.word	0x080018d7
 80017e0:	08001815 	.word	0x08001815
 80017e4:	080018c7 	.word	0x080018c7
 80017e8:	0800196d 	.word	0x0800196d
 80017ec:	0800196d 	.word	0x0800196d
 80017f0:	0800196d 	.word	0x0800196d
 80017f4:	0800196d 	.word	0x0800196d
 80017f8:	0800196d 	.word	0x0800196d
 80017fc:	0800196d 	.word	0x0800196d
 8001800:	0800196d 	.word	0x0800196d
 8001804:	0800196d 	.word	0x0800196d
 8001808:	080018e9 	.word	0x080018e9
 800180c:	0800190d 	.word	0x0800190d
 8001810:	08001931 	.word	0x08001931
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001814:	2100      	movs	r1, #0
 8001816:	2049      	movs	r0, #73	; 0x49
 8001818:	f7ff fd4f 	bl	80012ba <SD_SendCmd>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 80a8 	bne.w	8001974 <SD_disk_ioctl+0x230>
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2110      	movs	r1, #16
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fcd2 	bl	80011d4 <SD_RxDataBlock>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 809e 	beq.w	8001974 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001838:	7b3b      	ldrb	r3, [r7, #12]
 800183a:	099b      	lsrs	r3, r3, #6
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d10e      	bne.n	8001860 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001842:	7d7b      	ldrb	r3, [r7, #21]
 8001844:	b29a      	uxth	r2, r3
 8001846:	7d3b      	ldrb	r3, [r7, #20]
 8001848:	b29b      	uxth	r3, r3
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	b29b      	uxth	r3, r3
 800184e:	4413      	add	r3, r2
 8001850:	b29b      	uxth	r3, r3
 8001852:	3301      	adds	r3, #1
 8001854:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001856:	8bfb      	ldrh	r3, [r7, #30]
 8001858:	029a      	lsls	r2, r3, #10
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e02e      	b.n	80018be <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001860:	7c7b      	ldrb	r3, [r7, #17]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	b2da      	uxtb	r2, r3
 8001868:	7dbb      	ldrb	r3, [r7, #22]
 800186a:	09db      	lsrs	r3, r3, #7
 800186c:	b2db      	uxtb	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b2da      	uxtb	r2, r3
 8001872:	7d7b      	ldrb	r3, [r7, #21]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f003 0306 	and.w	r3, r3, #6
 800187c:	b2db      	uxtb	r3, r3
 800187e:	4413      	add	r3, r2
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3302      	adds	r3, #2
 8001884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001888:	7d3b      	ldrb	r3, [r7, #20]
 800188a:	099b      	lsrs	r3, r3, #6
 800188c:	b2db      	uxtb	r3, r3
 800188e:	b29a      	uxth	r2, r3
 8001890:	7cfb      	ldrb	r3, [r7, #19]
 8001892:	b29b      	uxth	r3, r3
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	b29b      	uxth	r3, r3
 8001898:	4413      	add	r3, r2
 800189a:	b29a      	uxth	r2, r3
 800189c:	7cbb      	ldrb	r3, [r7, #18]
 800189e:	029b      	lsls	r3, r3, #10
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	3301      	adds	r3, #1
 80018ae:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80018b0:	8bfa      	ldrh	r2, [r7, #30]
 80018b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018b6:	3b09      	subs	r3, #9
 80018b8:	409a      	lsls	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80018c4:	e056      	b.n	8001974 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018cc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018d4:	e055      	b.n	8001982 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80018d6:	f7ff fc09 	bl	80010ec <SD_ReadyWait>
 80018da:	4603      	mov	r3, r0
 80018dc:	2bff      	cmp	r3, #255	; 0xff
 80018de:	d14b      	bne.n	8001978 <SD_disk_ioctl+0x234>
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018e6:	e047      	b.n	8001978 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018e8:	2100      	movs	r1, #0
 80018ea:	2049      	movs	r0, #73	; 0x49
 80018ec:	f7ff fce5 	bl	80012ba <SD_SendCmd>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d142      	bne.n	800197c <SD_disk_ioctl+0x238>
 80018f6:	2110      	movs	r1, #16
 80018f8:	6a38      	ldr	r0, [r7, #32]
 80018fa:	f7ff fc6b 	bl	80011d4 <SD_RxDataBlock>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d03b      	beq.n	800197c <SD_disk_ioctl+0x238>
 8001904:	2300      	movs	r3, #0
 8001906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800190a:	e037      	b.n	800197c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800190c:	2100      	movs	r1, #0
 800190e:	204a      	movs	r0, #74	; 0x4a
 8001910:	f7ff fcd3 	bl	80012ba <SD_SendCmd>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d132      	bne.n	8001980 <SD_disk_ioctl+0x23c>
 800191a:	2110      	movs	r1, #16
 800191c:	6a38      	ldr	r0, [r7, #32]
 800191e:	f7ff fc59 	bl	80011d4 <SD_RxDataBlock>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d02b      	beq.n	8001980 <SD_disk_ioctl+0x23c>
 8001928:	2300      	movs	r3, #0
 800192a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800192e:	e027      	b.n	8001980 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001930:	2100      	movs	r1, #0
 8001932:	207a      	movs	r0, #122	; 0x7a
 8001934:	f7ff fcc1 	bl	80012ba <SD_SendCmd>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d116      	bne.n	800196c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800193e:	2300      	movs	r3, #0
 8001940:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001944:	e00b      	b.n	800195e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001946:	6a3c      	ldr	r4, [r7, #32]
 8001948:	1c63      	adds	r3, r4, #1
 800194a:	623b      	str	r3, [r7, #32]
 800194c:	f7ff fba4 	bl	8001098 <SPI_RxByte>
 8001950:	4603      	mov	r3, r0
 8001952:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001954:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001958:	3301      	adds	r3, #1
 800195a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800195e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001962:	2b03      	cmp	r3, #3
 8001964:	d9ef      	bls.n	8001946 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800196c:	2304      	movs	r3, #4
 800196e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001972:	e006      	b.n	8001982 <SD_disk_ioctl+0x23e>
			break;
 8001974:	bf00      	nop
 8001976:	e004      	b.n	8001982 <SD_disk_ioctl+0x23e>
			break;
 8001978:	bf00      	nop
 800197a:	e002      	b.n	8001982 <SD_disk_ioctl+0x23e>
			break;
 800197c:	bf00      	nop
 800197e:	e000      	b.n	8001982 <SD_disk_ioctl+0x23e>
			break;
 8001980:	bf00      	nop
		}

		DESELECT();
 8001982:	f7ff fb47 	bl	8001014 <DESELECT>
		SPI_RxByte();
 8001986:	f7ff fb87 	bl	8001098 <SPI_RxByte>
	}

	return res;
 800198a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800198e:	4618      	mov	r0, r3
 8001990:	372c      	adds	r7, #44	; 0x2c
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}
 8001996:	bf00      	nop
 8001998:	20000000 	.word	0x20000000

0800199c <send_uart>:

/* -----------------------Private user code ----------------------*/
/* USER CODE BEGIN 0 */

void send_uart(char *string)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7fe fc13 	bl	80001d0 <strlen>
 80019aa:	4603      	mov	r3, r0
 80019ac:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, len, 2000);
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4803      	ldr	r0, [pc, #12]	; (80019c8 <send_uart+0x2c>)
 80019ba:	f002 f8a6 	bl	8003b0a <HAL_UART_Transmit>
	/*
	After that enter the main loop and start to read-write data to SD card
	and monitor through serial monitor.
	*/
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000370c 	.word	0x2000370c

080019cc <bufclear>:
		i++;
	return i;
}

void bufclear(void) // Clear the buf by doing them all null
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	e007      	b.n	80019e8 <bufclear+0x1c>
	{
		buffer[i] = '\0';
 80019d8:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <bufclear+0x34>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3301      	adds	r3, #1
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ee:	dbf3      	blt.n	80019d8 <bufclear+0xc>
	}
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	200032b4 	.word	0x200032b4

08001a04 <main>:

int main(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b09a      	sub	sp, #104	; 0x68
 8001a08:	af02      	add	r7, sp, #8



  HAL_Init();
 8001a0a:	f000 fc35 	bl	8002278 <HAL_Init>
  SystemClock_Config();
 8001a0e:	f000 f8f7 	bl	8001c00 <SystemClock_Config>
  MX_GPIO_Init();
 8001a12:	f000 f9bf 	bl	8001d94 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a16:	f000 f95d 	bl	8001cd4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001a1a:	f000 f991 	bl	8001d40 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001a1e:	f002 fbe9 	bl	80041f4 <MX_FATFS_Init>

  /*
  Check the SD card connection status using the f_mount function and print the status to the
  serial monitor using the send_uart function
  */
  fresult = f_mount(&fs," ", 1);
 8001a22:	2201      	movs	r2, #1
 8001a24:	4960      	ldr	r1, [pc, #384]	; (8001ba8 <main+0x1a4>)
 8001a26:	4861      	ldr	r0, [pc, #388]	; (8001bac <main+0x1a8>)
 8001a28:	f004 fa4e 	bl	8005ec8 <f_mount>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b5f      	ldr	r3, [pc, #380]	; (8001bb0 <main+0x1ac>)
 8001a32:	701a      	strb	r2, [r3, #0]
  if(fresult != FR_OK)
 8001a34:	4b5e      	ldr	r3, [pc, #376]	; (8001bb0 <main+0x1ac>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <main+0x40>
	  send_uart("ERROR in mounting SD card\r\n");
 8001a3c:	485d      	ldr	r0, [pc, #372]	; (8001bb4 <main+0x1b0>)
 8001a3e:	f7ff ffad 	bl	800199c <send_uart>
 8001a42:	e002      	b.n	8001a4a <main+0x46>
  else
	  send_uart("SD CARD mounted successfully\r\n");
 8001a44:	485c      	ldr	r0, [pc, #368]	; (8001bb8 <main+0x1b4>)
 8001a46:	f7ff ffa9 	bl	800199c <send_uart>

  float32_t testOutput;
  float32_t testInput;

  float32_t *input;
  input = &testInput;
 8001a4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a4e:	65fb      	str	r3, [r7, #92]	; 0x5c

  float32_t *output;
  output = &testOutput;
 8001a50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a54:	65bb      	str	r3, [r7, #88]	; 0x58

  /*Structure - Number of filter coeffs - Filter coeffs - State buffer - Number of samples processed */
  arm_fir_init_f32(&FIR_F32_Struct, NUM_TAPS, (float32_t*)&firCoeffs32[0], &firState32[0], blockSize);
 8001a56:	4b59      	ldr	r3, [pc, #356]	; (8001bbc <main+0x1b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <main+0x1bc>)
 8001a62:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <main+0x1c0>)
 8001a64:	2118      	movs	r1, #24
 8001a66:	f005 f911 	bl	8006c8c <arm_fir_init_f32>


  while (1)
  {

	fresult = f_open(&fil, "input_signal.txt", FA_READ);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4956      	ldr	r1, [pc, #344]	; (8001bc8 <main+0x1c4>)
 8001a6e:	4857      	ldr	r0, [pc, #348]	; (8001bcc <main+0x1c8>)
 8001a70:	f004 fa70 	bl	8005f54 <f_open>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <main+0x1ac>)
 8001a7a:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 8001a7c:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <main+0x1ac>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <main+0x88>
		send_uart("ERROR in f_open txt file\r\n");
 8001a84:	4852      	ldr	r0, [pc, #328]	; (8001bd0 <main+0x1cc>)
 8001a86:	f7ff ff89 	bl	800199c <send_uart>
 8001a8a:	e002      	b.n	8001a92 <main+0x8e>
	else
		send_uart("f_open for read successful txt\r\n");
 8001a8c:	4851      	ldr	r0, [pc, #324]	; (8001bd4 <main+0x1d0>)
 8001a8e:	f7ff ff85 	bl	800199c <send_uart>

	fresult = f_open(&fil2, "output_signal.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
 8001a92:	2213      	movs	r2, #19
 8001a94:	4950      	ldr	r1, [pc, #320]	; (8001bd8 <main+0x1d4>)
 8001a96:	4851      	ldr	r0, [pc, #324]	; (8001bdc <main+0x1d8>)
 8001a98:	f004 fa5c 	bl	8005f54 <f_open>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b43      	ldr	r3, [pc, #268]	; (8001bb0 <main+0x1ac>)
 8001aa2:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 8001aa4:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <main+0x1ac>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <main+0xb0>
		send_uart("ERROR in f_open txt file\r\n");
 8001aac:	4848      	ldr	r0, [pc, #288]	; (8001bd0 <main+0x1cc>)
 8001aae:	f7ff ff75 	bl	800199c <send_uart>
	char buff[30];
	/*TCHAR* f_gets (
	TCHAR* buff,	 Pointer to the string buffer to read
	int len,		 Size of string buffer (characters)
	FIL* fp			 Pointer to the file object */
	while (f_gets((TCHAR*)buff, 30, &fil))
 8001ab2:	e06d      	b.n	8001b90 <main+0x18c>
		send_uart("f_open for write successful\r\n");
 8001ab4:	484a      	ldr	r0, [pc, #296]	; (8001be0 <main+0x1dc>)
 8001ab6:	f7ff ff71 	bl	800199c <send_uart>
	while (f_gets((TCHAR*)buff, 30, &fil))
 8001aba:	e069      	b.n	8001b90 <main+0x18c>
	{

		if (fresult != FR_OK) {
 8001abc:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <main+0x1ac>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00c      	beq.n	8001ade <main+0xda>
			sprintf(buffer, "read = %s\n", buff);
 8001ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4946      	ldr	r1, [pc, #280]	; (8001be4 <main+0x1e0>)
 8001acc:	4846      	ldr	r0, [pc, #280]	; (8001be8 <main+0x1e4>)
 8001ace:	f006 fa09 	bl	8007ee4 <siprintf>
			send_uart(buffer);
 8001ad2:	4845      	ldr	r0, [pc, #276]	; (8001be8 <main+0x1e4>)
 8001ad4:	f7ff ff62 	bl	800199c <send_uart>
			bufclear();
 8001ad8:	f7ff ff78 	bl	80019cc <bufclear>
 8001adc:	e00b      	b.n	8001af6 <main+0xf2>
		}
		else {
			sprintf(buffer, "ERROR in read = %s\n", buff);
 8001ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4941      	ldr	r1, [pc, #260]	; (8001bec <main+0x1e8>)
 8001ae6:	4840      	ldr	r0, [pc, #256]	; (8001be8 <main+0x1e4>)
 8001ae8:	f006 f9fc 	bl	8007ee4 <siprintf>
			send_uart(buffer);
 8001aec:	483e      	ldr	r0, [pc, #248]	; (8001be8 <main+0x1e4>)
 8001aee:	f7ff ff55 	bl	800199c <send_uart>
			bufclear();
 8001af2:	f7ff ff6b 	bl	80019cc <bufclear>
		}

		testInput = atof(buff);
 8001af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afa:	4618      	mov	r0, r3
 8001afc:	f005 fb3c 	bl	8007178 <atof>
 8001b00:	ec53 2b10 	vmov	r2, r3, d0
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f7ff f86e 	bl	8000be8 <__aeabi_d2f>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	647b      	str	r3, [r7, #68]	; 0x44
		int atoi(const char *str);
		long atol(const char *str);
		double atof(const char *str);	*/


		arm_fir_f32(&FIR_F32_Struct, input, output, blockSize);
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <main+0x1b8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001b18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b1a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001b1c:	f005 f8c8 	bl	8006cb0 <arm_fir_f32>

		char data[30];

		sprintf(data, "%f\n", testOutput);
 8001b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd10 	bl	8000548 <__aeabi_f2d>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	1d38      	adds	r0, r7, #4
 8001b2e:	4930      	ldr	r1, [pc, #192]	; (8001bf0 <main+0x1ec>)
 8001b30:	f006 f9d8 	bl	8007ee4 <siprintf>
		fresult = f_puts(data, &fil2);
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4929      	ldr	r1, [pc, #164]	; (8001bdc <main+0x1d8>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f005 f826 	bl	8006b8a <f_puts>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <main+0x1ac>)
 8001b44:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <main+0x1ac>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00b      	beq.n	8001b66 <main+0x162>
			sprintf(buffer, "write = %s\n", data);
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	461a      	mov	r2, r3
 8001b52:	4928      	ldr	r1, [pc, #160]	; (8001bf4 <main+0x1f0>)
 8001b54:	4824      	ldr	r0, [pc, #144]	; (8001be8 <main+0x1e4>)
 8001b56:	f006 f9c5 	bl	8007ee4 <siprintf>
			send_uart(buffer);
 8001b5a:	4823      	ldr	r0, [pc, #140]	; (8001be8 <main+0x1e4>)
 8001b5c:	f7ff ff1e 	bl	800199c <send_uart>
			bufclear();
 8001b60:	f7ff ff34 	bl	80019cc <bufclear>
 8001b64:	e00a      	b.n	8001b7c <main+0x178>
		}
		else {
			sprintf(buffer, "ERROR in write = %s\n", data);
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4923      	ldr	r1, [pc, #140]	; (8001bf8 <main+0x1f4>)
 8001b6c:	481e      	ldr	r0, [pc, #120]	; (8001be8 <main+0x1e4>)
 8001b6e:	f006 f9b9 	bl	8007ee4 <siprintf>
			send_uart(buffer);
 8001b72:	481d      	ldr	r0, [pc, #116]	; (8001be8 <main+0x1e4>)
 8001b74:	f7ff ff12 	bl	800199c <send_uart>
			bufclear();
 8001b78:	f7ff ff28 	bl	80019cc <bufclear>
		}

		f_close(&fil);
 8001b7c:	4813      	ldr	r0, [pc, #76]	; (8001bcc <main+0x1c8>)
 8001b7e:	f004 ff26 	bl	80069ce <f_close>
		f_close(&fil2);
 8001b82:	4816      	ldr	r0, [pc, #88]	; (8001bdc <main+0x1d8>)
 8001b84:	f004 ff23 	bl	80069ce <f_close>

		send_uart("File is closed \r\n");
 8001b88:	481c      	ldr	r0, [pc, #112]	; (8001bfc <main+0x1f8>)
 8001b8a:	f7ff ff07 	bl	800199c <send_uart>

		while(True)
 8001b8e:	e7fe      	b.n	8001b8e <main+0x18a>
	while (f_gets((TCHAR*)buff, 30, &fil))
 8001b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <main+0x1c8>)
 8001b96:	211e      	movs	r1, #30
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f004 ff42 	bl	8006a22 <f_gets>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d18b      	bne.n	8001abc <main+0xb8>
  {
 8001ba4:	e761      	b.n	8001a6a <main+0x66>
 8001ba6:	bf00      	nop
 8001ba8:	0800baf8 	.word	0x0800baf8
 8001bac:	2000021c 	.word	0x2000021c
 8001bb0:	200032b0 	.word	0x200032b0
 8001bb4:	0800bafc 	.word	0x0800bafc
 8001bb8:	0800bb18 	.word	0x0800bb18
 8001bbc:	20000004 	.word	0x20000004
 8001bc0:	20003750 	.word	0x20003750
 8001bc4:	0800bc60 	.word	0x0800bc60
 8001bc8:	0800bb38 	.word	0x0800bb38
 8001bcc:	20001250 	.word	0x20001250
 8001bd0:	0800bb4c 	.word	0x0800bb4c
 8001bd4:	0800bb68 	.word	0x0800bb68
 8001bd8:	0800bb8c 	.word	0x0800bb8c
 8001bdc:	20002280 	.word	0x20002280
 8001be0:	0800bba0 	.word	0x0800bba0
 8001be4:	0800bbc0 	.word	0x0800bbc0
 8001be8:	200032b4 	.word	0x200032b4
 8001bec:	0800bbcc 	.word	0x0800bbcc
 8001bf0:	0800bbe0 	.word	0x0800bbe0
 8001bf4:	0800bbe4 	.word	0x0800bbe4
 8001bf8:	0800bbf0 	.word	0x0800bbf0
 8001bfc:	0800bc08 	.word	0x0800bc08

08001c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b094      	sub	sp, #80	; 0x50
 8001c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c06:	f107 0320 	add.w	r3, r7, #32
 8001c0a:	2230      	movs	r2, #48	; 0x30
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f005 fae0 	bl	80071d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <SystemClock_Config+0xcc>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	4a27      	ldr	r2, [pc, #156]	; (8001ccc <SystemClock_Config+0xcc>)
 8001c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c32:	6413      	str	r3, [r2, #64]	; 0x40
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <SystemClock_Config+0xcc>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c40:	2300      	movs	r3, #0
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <SystemClock_Config+0xd0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <SystemClock_Config+0xd0>)
 8001c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <SystemClock_Config+0xd0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c66:	2302      	movs	r3, #2
 8001c68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c70:	2308      	movs	r3, #8
 8001c72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c7e:	2307      	movs	r3, #7
 8001c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c82:	f107 0320 	add.w	r3, r7, #32
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fe28 	bl	80028dc <HAL_RCC_OscConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c92:	f000 f8cf 	bl	8001e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c96:	230f      	movs	r3, #15
 8001c98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ca2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ca6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	2105      	movs	r1, #5
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 f889 	bl	8002dcc <HAL_RCC_ClockConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001cc0:	f000 f8b8 	bl	8001e34 <Error_Handler>
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	3750      	adds	r7, #80	; 0x50
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40007000 	.word	0x40007000

08001cd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001cda:	4a18      	ldr	r2, [pc, #96]	; (8001d3c <MX_SPI1_Init+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001d08:	2230      	movs	r2, #48	; 0x30
 8001d0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001d20:	220a      	movs	r2, #10
 8001d22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <MX_SPI1_Init+0x64>)
 8001d26:	f001 fa71 	bl	800320c <HAL_SPI_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d30:	f000 f880 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200036b4 	.word	0x200036b4
 8001d3c:	40013000 	.word	0x40013000

08001d40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <MX_USART2_UART_Init+0x50>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d78:	f001 fe7a 	bl	8003a70 <HAL_UART_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d82:	f000 f857 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000370c 	.word	0x2000370c
 8001d90:	40004400 	.word	0x40004400

08001d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <MX_GPIO_Init+0x98>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <MX_GPIO_Init+0x98>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <MX_GPIO_Init+0x98>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <MX_GPIO_Init+0x98>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <MX_GPIO_Init+0x98>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <MX_GPIO_Init+0x98>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <MX_GPIO_Init+0x98>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <MX_GPIO_Init+0x98>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <MX_GPIO_Init+0x98>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_Cs_GPIO_Port, SD_Cs_Pin, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2110      	movs	r1, #16
 8001e02:	480b      	ldr	r0, [pc, #44]	; (8001e30 <MX_GPIO_Init+0x9c>)
 8001e04:	f000 fd50 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_Cs_Pin */
  GPIO_InitStruct.Pin = SD_Cs_Pin;
 8001e08:	2310      	movs	r3, #16
 8001e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_Cs_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4804      	ldr	r0, [pc, #16]	; (8001e30 <MX_GPIO_Init+0x9c>)
 8001e20:	f000 fba6 	bl	8002570 <HAL_GPIO_Init>

}
 8001e24:	bf00      	nop
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020800 	.word	0x40020800

08001e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e38:	b672      	cpsid	i
}
 8001e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <Error_Handler+0x8>
	...

08001e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e54:	6453      	str	r3, [r2, #68]	; 0x44
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e7e:	2007      	movs	r0, #7
 8001e80:	f000 fb42 	bl	8002508 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40023800 	.word	0x40023800

08001e90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <HAL_SPI_MspInit+0x84>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d12b      	bne.n	8001f0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_SPI_MspInit+0x88>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001eea:	23e0      	movs	r3, #224	; 0xe0
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001efa:	2305      	movs	r3, #5
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <HAL_SPI_MspInit+0x8c>)
 8001f06:	f000 fb33 	bl	8002570 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40013000 	.word	0x40013000
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000

08001f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <HAL_UART_MspInit+0x84>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d12b      	bne.n	8001f9a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_UART_MspInit+0x88>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_UART_MspInit+0x88>)
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_UART_MspInit+0x88>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_UART_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <HAL_UART_MspInit+0x88>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_UART_MspInit+0x88>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f7a:	230c      	movs	r3, #12
 8001f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f8a:	2307      	movs	r3, #7
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <HAL_UART_MspInit+0x8c>)
 8001f96:	f000 faeb 	bl	8002570 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	; 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40004400 	.word	0x40004400
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020000 	.word	0x40020000

08001fb0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <SDTimer_Handler+0x40>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <SDTimer_Handler+0x1c>
    Timer1--;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <SDTimer_Handler+0x40>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <SDTimer_Handler+0x40>)
 8001fca:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <SDTimer_Handler+0x44>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <SDTimer_Handler+0x34>
    Timer2--;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <SDTimer_Handler+0x44>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <SDTimer_Handler+0x44>)
 8001fe2:	701a      	strb	r2, [r3, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	200047ad 	.word	0x200047ad
 8001ff4:	200047ae 	.word	0x200047ae

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <NMI_Handler+0x4>

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <SysTick_Handler+0x30>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	3301      	adds	r3, #1
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <SysTick_Handler+0x30>)
 8002050:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <SysTick_Handler+0x30>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b09      	cmp	r3, #9
 800205a:	d904      	bls.n	8002066 <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <SysTick_Handler+0x30>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 8002062:	f7ff ffa5 	bl	8001fb0 <SDTimer_Handler>
		  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002066:	f000 f959 	bl	800231c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200047ac 	.word	0x200047ac

08002074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
	return 1;
 8002078:	2301      	movs	r3, #1
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_kill>:

int _kill(int pid, int sig)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800208e:	f005 f877 	bl	8007180 <__errno>
 8002092:	4603      	mov	r3, r0
 8002094:	2216      	movs	r2, #22
 8002096:	601a      	str	r2, [r3, #0]
	return -1;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_exit>:

void _exit (int status)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ffe7 	bl	8002084 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020b6:	e7fe      	b.n	80020b6 <_exit+0x12>

080020b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	e00a      	b.n	80020e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020ca:	f3af 8000 	nop.w
 80020ce:	4601      	mov	r1, r0
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	60ba      	str	r2, [r7, #8]
 80020d6:	b2ca      	uxtb	r2, r1
 80020d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3301      	adds	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	dbf0      	blt.n	80020ca <_read+0x12>
	}

return len;
 80020e8:	687b      	ldr	r3, [r7, #4]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	e009      	b.n	8002118 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	60ba      	str	r2, [r7, #8]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3301      	adds	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	dbf1      	blt.n	8002104 <_write+0x12>
	}
	return len;
 8002120:	687b      	ldr	r3, [r7, #4]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_close>:

int _close(int file)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
	return -1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002152:	605a      	str	r2, [r3, #4]
	return 0;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_isatty>:

int _isatty(int file)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
	return 1;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
	return 0;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800219c:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <_sbrk+0x5c>)
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <_sbrk+0x60>)
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <_sbrk+0x64>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <_sbrk+0x68>)
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d207      	bcs.n	80021d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c4:	f004 ffdc 	bl	8007180 <__errno>
 80021c8:	4603      	mov	r3, r0
 80021ca:	220c      	movs	r2, #12
 80021cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
 80021d2:	e009      	b.n	80021e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <_sbrk+0x64>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <_sbrk+0x64>)
 80021e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021e6:	68fb      	ldr	r3, [r7, #12]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20020000 	.word	0x20020000
 80021f4:	00000400 	.word	0x00000400
 80021f8:	200047b0 	.word	0x200047b0
 80021fc:	20004808 	.word	0x20004808

08002200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <SystemInit+0x20>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <SystemInit+0x20>)
 800220c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800225c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002228:	480d      	ldr	r0, [pc, #52]	; (8002260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800222a:	490e      	ldr	r1, [pc, #56]	; (8002264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800222c:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002240:	4c0b      	ldr	r4, [pc, #44]	; (8002270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800224e:	f7ff ffd7 	bl	8002200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002252:	f004 ff9b 	bl	800718c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002256:	f7ff fbd5 	bl	8001a04 <main>
  bx  lr    
 800225a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800225c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002264:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002268:	0800c20c 	.word	0x0800c20c
  ldr r2, =_sbss
 800226c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002270:	20004804 	.word	0x20004804

08002274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC_IRQHandler>
	...

08002278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <HAL_Init+0x40>)
 8002282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002286:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <HAL_Init+0x40>)
 800228e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002292:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_Init+0x40>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <HAL_Init+0x40>)
 800229a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a0:	2003      	movs	r0, #3
 80022a2:	f000 f931 	bl	8002508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a6:	2000      	movs	r0, #0
 80022a8:	f000 f808 	bl	80022bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ac:	f7ff fdc8 	bl	8001e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023c00 	.word	0x40023c00

080022bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_InitTick+0x54>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_InitTick+0x58>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f93b 	bl	8002556 <HAL_SYSTICK_Config>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00e      	b.n	8002308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b0f      	cmp	r3, #15
 80022ee:	d80a      	bhi.n	8002306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f0:	2200      	movs	r2, #0
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f000 f911 	bl	800251e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022fc:	4a06      	ldr	r2, [pc, #24]	; (8002318 <HAL_InitTick+0x5c>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000008 	.word	0x20000008
 8002314:	20000010 	.word	0x20000010
 8002318:	2000000c 	.word	0x2000000c

0800231c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x20>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x24>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4413      	add	r3, r2
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_IncTick+0x24>)
 800232e:	6013      	str	r3, [r2, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000010 	.word	0x20000010
 8002340:	200047b4 	.word	0x200047b4

08002344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return uwTick;
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_GetTick+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	200047b4 	.word	0x200047b4

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff ffee 	bl	8002344 <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d005      	beq.n	8002382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_Delay+0x44>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002382:	bf00      	nop
 8002384:	f7ff ffde 	bl	8002344 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d8f7      	bhi.n	8002384 <HAL_Delay+0x28>
  {
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000010 	.word	0x20000010

080023a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c0:	4013      	ands	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d6:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	60d3      	str	r3, [r2, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <__NVIC_GetPriorityGrouping+0x18>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	f003 0307 	and.w	r3, r3, #7
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	6039      	str	r1, [r7, #0]
 8002412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	2b00      	cmp	r3, #0
 800241a:	db0a      	blt.n	8002432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	490c      	ldr	r1, [pc, #48]	; (8002454 <__NVIC_SetPriority+0x4c>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	0112      	lsls	r2, r2, #4
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	440b      	add	r3, r1
 800242c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002430:	e00a      	b.n	8002448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4908      	ldr	r1, [pc, #32]	; (8002458 <__NVIC_SetPriority+0x50>)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	3b04      	subs	r3, #4
 8002440:	0112      	lsls	r2, r2, #4
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	440b      	add	r3, r1
 8002446:	761a      	strb	r2, [r3, #24]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000e100 	.word	0xe000e100
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f1c3 0307 	rsb	r3, r3, #7
 8002476:	2b04      	cmp	r3, #4
 8002478:	bf28      	it	cs
 800247a:	2304      	movcs	r3, #4
 800247c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3304      	adds	r3, #4
 8002482:	2b06      	cmp	r3, #6
 8002484:	d902      	bls.n	800248c <NVIC_EncodePriority+0x30>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3b03      	subs	r3, #3
 800248a:	e000      	b.n	800248e <NVIC_EncodePriority+0x32>
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	401a      	ands	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	43d9      	mvns	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	4313      	orrs	r3, r2
         );
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d4:	d301      	bcc.n	80024da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00f      	b.n	80024fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <SysTick_Config+0x40>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e2:	210f      	movs	r1, #15
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f7ff ff8e 	bl	8002408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <SysTick_Config+0x40>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <SysTick_Config+0x40>)
 80024f4:	2207      	movs	r2, #7
 80024f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	e000e010 	.word	0xe000e010

08002508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ff47 	bl	80023a4 <__NVIC_SetPriorityGrouping>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002530:	f7ff ff5c 	bl	80023ec <__NVIC_GetPriorityGrouping>
 8002534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	6978      	ldr	r0, [r7, #20]
 800253c:	f7ff ff8e 	bl	800245c <NVIC_EncodePriority>
 8002540:	4602      	mov	r2, r0
 8002542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff5d 	bl	8002408 <__NVIC_SetPriority>
}
 800254e:	bf00      	nop
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ffb0 	bl	80024c4 <SysTick_Config>
 8002564:	4603      	mov	r3, r0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	; 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e16b      	b.n	8002864 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800258c:	2201      	movs	r2, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f040 815a 	bne.w	800285e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d005      	beq.n	80025c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d130      	bne.n	8002624 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 0201 	and.w	r2, r3, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b03      	cmp	r3, #3
 800262e:	d017      	beq.n	8002660 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d123      	bne.n	80026b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	69b9      	ldr	r1, [r7, #24]
 80026b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80b4 	beq.w	800285e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b60      	ldr	r3, [pc, #384]	; (800287c <HAL_GPIO_Init+0x30c>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a5f      	ldr	r2, [pc, #380]	; (800287c <HAL_GPIO_Init+0x30c>)
 8002700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b5d      	ldr	r3, [pc, #372]	; (800287c <HAL_GPIO_Init+0x30c>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002712:	4a5b      	ldr	r2, [pc, #364]	; (8002880 <HAL_GPIO_Init+0x310>)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	3302      	adds	r3, #2
 800271a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	220f      	movs	r2, #15
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_GPIO_Init+0x314>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d02b      	beq.n	8002796 <HAL_GPIO_Init+0x226>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a51      	ldr	r2, [pc, #324]	; (8002888 <HAL_GPIO_Init+0x318>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d025      	beq.n	8002792 <HAL_GPIO_Init+0x222>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a50      	ldr	r2, [pc, #320]	; (800288c <HAL_GPIO_Init+0x31c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01f      	beq.n	800278e <HAL_GPIO_Init+0x21e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4f      	ldr	r2, [pc, #316]	; (8002890 <HAL_GPIO_Init+0x320>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d019      	beq.n	800278a <HAL_GPIO_Init+0x21a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4e      	ldr	r2, [pc, #312]	; (8002894 <HAL_GPIO_Init+0x324>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0x216>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4d      	ldr	r2, [pc, #308]	; (8002898 <HAL_GPIO_Init+0x328>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00d      	beq.n	8002782 <HAL_GPIO_Init+0x212>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4c      	ldr	r2, [pc, #304]	; (800289c <HAL_GPIO_Init+0x32c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <HAL_GPIO_Init+0x20e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4b      	ldr	r2, [pc, #300]	; (80028a0 <HAL_GPIO_Init+0x330>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_GPIO_Init+0x20a>
 8002776:	2307      	movs	r3, #7
 8002778:	e00e      	b.n	8002798 <HAL_GPIO_Init+0x228>
 800277a:	2308      	movs	r3, #8
 800277c:	e00c      	b.n	8002798 <HAL_GPIO_Init+0x228>
 800277e:	2306      	movs	r3, #6
 8002780:	e00a      	b.n	8002798 <HAL_GPIO_Init+0x228>
 8002782:	2305      	movs	r3, #5
 8002784:	e008      	b.n	8002798 <HAL_GPIO_Init+0x228>
 8002786:	2304      	movs	r3, #4
 8002788:	e006      	b.n	8002798 <HAL_GPIO_Init+0x228>
 800278a:	2303      	movs	r3, #3
 800278c:	e004      	b.n	8002798 <HAL_GPIO_Init+0x228>
 800278e:	2302      	movs	r3, #2
 8002790:	e002      	b.n	8002798 <HAL_GPIO_Init+0x228>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_GPIO_Init+0x228>
 8002796:	2300      	movs	r3, #0
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	f002 0203 	and.w	r2, r2, #3
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	4093      	lsls	r3, r2
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a8:	4935      	ldr	r1, [pc, #212]	; (8002880 <HAL_GPIO_Init+0x310>)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3302      	adds	r3, #2
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b6:	4b3b      	ldr	r3, [pc, #236]	; (80028a4 <HAL_GPIO_Init+0x334>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027da:	4a32      	ldr	r2, [pc, #200]	; (80028a4 <HAL_GPIO_Init+0x334>)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e0:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_GPIO_Init+0x334>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002804:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <HAL_GPIO_Init+0x334>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800280a:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <HAL_GPIO_Init+0x334>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800282e:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <HAL_GPIO_Init+0x334>)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_GPIO_Init+0x334>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002858:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <HAL_GPIO_Init+0x334>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3301      	adds	r3, #1
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	2b0f      	cmp	r3, #15
 8002868:	f67f ae90 	bls.w	800258c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	3724      	adds	r7, #36	; 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40013800 	.word	0x40013800
 8002884:	40020000 	.word	0x40020000
 8002888:	40020400 	.word	0x40020400
 800288c:	40020800 	.word	0x40020800
 8002890:	40020c00 	.word	0x40020c00
 8002894:	40021000 	.word	0x40021000
 8002898:	40021400 	.word	0x40021400
 800289c:	40021800 	.word	0x40021800
 80028a0:	40021c00 	.word	0x40021c00
 80028a4:	40013c00 	.word	0x40013c00

080028a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
 80028b4:	4613      	mov	r3, r2
 80028b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b8:	787b      	ldrb	r3, [r7, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c4:	e003      	b.n	80028ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	041a      	lsls	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	619a      	str	r2, [r3, #24]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e267      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d075      	beq.n	80029e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028fa:	4b88      	ldr	r3, [pc, #544]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b04      	cmp	r3, #4
 8002904:	d00c      	beq.n	8002920 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002906:	4b85      	ldr	r3, [pc, #532]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800290e:	2b08      	cmp	r3, #8
 8002910:	d112      	bne.n	8002938 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002912:	4b82      	ldr	r3, [pc, #520]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291e:	d10b      	bne.n	8002938 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002920:	4b7e      	ldr	r3, [pc, #504]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d05b      	beq.n	80029e4 <HAL_RCC_OscConfig+0x108>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d157      	bne.n	80029e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e242      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002940:	d106      	bne.n	8002950 <HAL_RCC_OscConfig+0x74>
 8002942:	4b76      	ldr	r3, [pc, #472]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a75      	ldr	r2, [pc, #468]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e01d      	b.n	800298c <HAL_RCC_OscConfig+0xb0>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002958:	d10c      	bne.n	8002974 <HAL_RCC_OscConfig+0x98>
 800295a:	4b70      	ldr	r3, [pc, #448]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a6f      	ldr	r2, [pc, #444]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	4b6d      	ldr	r3, [pc, #436]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a6c      	ldr	r2, [pc, #432]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	e00b      	b.n	800298c <HAL_RCC_OscConfig+0xb0>
 8002974:	4b69      	ldr	r3, [pc, #420]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a68      	ldr	r2, [pc, #416]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 800297a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4b66      	ldr	r3, [pc, #408]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a65      	ldr	r2, [pc, #404]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d013      	beq.n	80029bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7ff fcd6 	bl	8002344 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800299c:	f7ff fcd2 	bl	8002344 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	; 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e207      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	4b5b      	ldr	r3, [pc, #364]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0xc0>
 80029ba:	e014      	b.n	80029e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7ff fcc2 	bl	8002344 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c4:	f7ff fcbe 	bl	8002344 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	; 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e1f3      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	4b51      	ldr	r3, [pc, #324]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0xe8>
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d063      	beq.n	8002aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029f2:	4b4a      	ldr	r3, [pc, #296]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029fe:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d11c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0a:	4b44      	ldr	r3, [pc, #272]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d116      	bne.n	8002a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a16:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_RCC_OscConfig+0x152>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e1c7      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4937      	ldr	r1, [pc, #220]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	e03a      	b.n	8002aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a4c:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <HAL_RCC_OscConfig+0x244>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7ff fc77 	bl	8002344 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5a:	f7ff fc73 	bl	8002344 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e1a8      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a78:	4b28      	ldr	r3, [pc, #160]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4925      	ldr	r1, [pc, #148]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]
 8002a8c:	e015      	b.n	8002aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCC_OscConfig+0x244>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7ff fc56 	bl	8002344 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9c:	f7ff fc52 	bl	8002344 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e187      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d036      	beq.n	8002b34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_RCC_OscConfig+0x248>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7ff fc36 	bl	8002344 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002adc:	f7ff fc32 	bl	8002344 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e167      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_OscConfig+0x240>)
 8002af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x200>
 8002afa:	e01b      	b.n	8002b34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_OscConfig+0x248>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7ff fc1f 	bl	8002344 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	e00e      	b.n	8002b28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0a:	f7ff fc1b 	bl	8002344 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d907      	bls.n	8002b28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e150      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	42470000 	.word	0x42470000
 8002b24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	4b88      	ldr	r3, [pc, #544]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ea      	bne.n	8002b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 8097 	beq.w	8002c70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b46:	4b81      	ldr	r3, [pc, #516]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10f      	bne.n	8002b72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	4b7d      	ldr	r3, [pc, #500]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a7c      	ldr	r2, [pc, #496]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b7a      	ldr	r3, [pc, #488]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b72:	4b77      	ldr	r3, [pc, #476]	; (8002d50 <HAL_RCC_OscConfig+0x474>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d118      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7e:	4b74      	ldr	r3, [pc, #464]	; (8002d50 <HAL_RCC_OscConfig+0x474>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a73      	ldr	r2, [pc, #460]	; (8002d50 <HAL_RCC_OscConfig+0x474>)
 8002b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8a:	f7ff fbdb 	bl	8002344 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b92:	f7ff fbd7 	bl	8002344 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e10c      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <HAL_RCC_OscConfig+0x474>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x2ea>
 8002bb8:	4b64      	ldr	r3, [pc, #400]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	4a63      	ldr	r2, [pc, #396]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc4:	e01c      	b.n	8002c00 <HAL_RCC_OscConfig+0x324>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x30c>
 8002bce:	4b5f      	ldr	r3, [pc, #380]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	4a5e      	ldr	r2, [pc, #376]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bda:	4b5c      	ldr	r3, [pc, #368]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a5b      	ldr	r2, [pc, #364]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0x324>
 8002be8:	4b58      	ldr	r3, [pc, #352]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	4a57      	ldr	r2, [pc, #348]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf4:	4b55      	ldr	r3, [pc, #340]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a54      	ldr	r2, [pc, #336]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002bfa:	f023 0304 	bic.w	r3, r3, #4
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7ff fb9c 	bl	8002344 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7ff fb98 	bl	8002344 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e0cb      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c26:	4b49      	ldr	r3, [pc, #292]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ee      	beq.n	8002c10 <HAL_RCC_OscConfig+0x334>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c34:	f7ff fb86 	bl	8002344 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7ff fb82 	bl	8002344 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0b5      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c52:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1ee      	bne.n	8002c3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c64:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	4a38      	ldr	r2, [pc, #224]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80a1 	beq.w	8002dbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c7a:	4b34      	ldr	r3, [pc, #208]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d05c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d141      	bne.n	8002d12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8e:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <HAL_RCC_OscConfig+0x478>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7ff fb56 	bl	8002344 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7ff fb52 	bl	8002344 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e087      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cae:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	019b      	lsls	r3, r3, #6
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	491b      	ldr	r1, [pc, #108]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_OscConfig+0x478>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7ff fb2b 	bl	8002344 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7ff fb27 	bl	8002344 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e05c      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x416>
 8002d10:	e054      	b.n	8002dbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_RCC_OscConfig+0x478>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7ff fb14 	bl	8002344 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d20:	f7ff fb10 	bl	8002344 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e045      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCC_OscConfig+0x470>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x444>
 8002d3e:	e03d      	b.n	8002dbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e038      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40007000 	.word	0x40007000
 8002d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <HAL_RCC_OscConfig+0x4ec>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d028      	beq.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d121      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d11a      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d88:	4013      	ands	r3, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d111      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	3b01      	subs	r3, #1
 8002da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800

08002dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0cc      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de0:	4b68      	ldr	r3, [pc, #416]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d90c      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b65      	ldr	r3, [pc, #404]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b63      	ldr	r3, [pc, #396]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0b8      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e20:	4b59      	ldr	r3, [pc, #356]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a58      	ldr	r2, [pc, #352]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e38:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e44:	4b50      	ldr	r3, [pc, #320]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	494d      	ldr	r1, [pc, #308]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d044      	beq.n	8002eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d119      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e07f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d107      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8a:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e067      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eaa:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f023 0203 	bic.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4934      	ldr	r1, [pc, #208]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ebc:	f7ff fa42 	bl	8002344 <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f7ff fa3e 	bl	8002344 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e04f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 020c 	and.w	r2, r3, #12
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d1eb      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d20c      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e032      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4916      	ldr	r1, [pc, #88]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	490e      	ldr	r1, [pc, #56]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f52:	f000 f821 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 8002f56:	4602      	mov	r2, r0
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	490a      	ldr	r1, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	5ccb      	ldrb	r3, [r1, r3]
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f9a2 	bl	80022bc <HAL_InitTick>

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023c00 	.word	0x40023c00
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	0800bcc0 	.word	0x0800bcc0
 8002f90:	20000008 	.word	0x20000008
 8002f94:	2000000c 	.word	0x2000000c

08002f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f9c:	b094      	sub	sp, #80	; 0x50
 8002f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fa8:	2300      	movs	r3, #0
 8002faa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb0:	4b79      	ldr	r3, [pc, #484]	; (8003198 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d00d      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	f200 80e1 	bhi.w	8003184 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x34>
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fca:	e0db      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fcc:	4b73      	ldr	r3, [pc, #460]	; (800319c <HAL_RCC_GetSysClockFreq+0x204>)
 8002fce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fd0:	e0db      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fd2:	4b73      	ldr	r3, [pc, #460]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fd6:	e0d8      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd8:	4b6f      	ldr	r3, [pc, #444]	; (8003198 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fe2:	4b6d      	ldr	r3, [pc, #436]	; (8003198 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d063      	beq.n	80030b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fee:	4b6a      	ldr	r3, [pc, #424]	; (8003198 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ff8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003000:	633b      	str	r3, [r7, #48]	; 0x30
 8003002:	2300      	movs	r3, #0
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
 8003006:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800300a:	4622      	mov	r2, r4
 800300c:	462b      	mov	r3, r5
 800300e:	f04f 0000 	mov.w	r0, #0
 8003012:	f04f 0100 	mov.w	r1, #0
 8003016:	0159      	lsls	r1, r3, #5
 8003018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800301c:	0150      	lsls	r0, r2, #5
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4621      	mov	r1, r4
 8003024:	1a51      	subs	r1, r2, r1
 8003026:	6139      	str	r1, [r7, #16]
 8003028:	4629      	mov	r1, r5
 800302a:	eb63 0301 	sbc.w	r3, r3, r1
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800303c:	4659      	mov	r1, fp
 800303e:	018b      	lsls	r3, r1, #6
 8003040:	4651      	mov	r1, sl
 8003042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003046:	4651      	mov	r1, sl
 8003048:	018a      	lsls	r2, r1, #6
 800304a:	4651      	mov	r1, sl
 800304c:	ebb2 0801 	subs.w	r8, r2, r1
 8003050:	4659      	mov	r1, fp
 8003052:	eb63 0901 	sbc.w	r9, r3, r1
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800306a:	4690      	mov	r8, r2
 800306c:	4699      	mov	r9, r3
 800306e:	4623      	mov	r3, r4
 8003070:	eb18 0303 	adds.w	r3, r8, r3
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	462b      	mov	r3, r5
 8003078:	eb49 0303 	adc.w	r3, r9, r3
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800308a:	4629      	mov	r1, r5
 800308c:	024b      	lsls	r3, r1, #9
 800308e:	4621      	mov	r1, r4
 8003090:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003094:	4621      	mov	r1, r4
 8003096:	024a      	lsls	r2, r1, #9
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309e:	2200      	movs	r2, #0
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030a8:	f7fd fdee 	bl	8000c88 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4613      	mov	r3, r2
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b4:	e058      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b6:	4b38      	ldr	r3, [pc, #224]	; (8003198 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	099b      	lsrs	r3, r3, #6
 80030bc:	2200      	movs	r2, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	4611      	mov	r1, r2
 80030c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030c6:	623b      	str	r3, [r7, #32]
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
 80030cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030d0:	4642      	mov	r2, r8
 80030d2:	464b      	mov	r3, r9
 80030d4:	f04f 0000 	mov.w	r0, #0
 80030d8:	f04f 0100 	mov.w	r1, #0
 80030dc:	0159      	lsls	r1, r3, #5
 80030de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e2:	0150      	lsls	r0, r2, #5
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4641      	mov	r1, r8
 80030ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ee:	4649      	mov	r1, r9
 80030f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003100:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003104:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003108:	ebb2 040a 	subs.w	r4, r2, sl
 800310c:	eb63 050b 	sbc.w	r5, r3, fp
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	00eb      	lsls	r3, r5, #3
 800311a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800311e:	00e2      	lsls	r2, r4, #3
 8003120:	4614      	mov	r4, r2
 8003122:	461d      	mov	r5, r3
 8003124:	4643      	mov	r3, r8
 8003126:	18e3      	adds	r3, r4, r3
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	464b      	mov	r3, r9
 800312c:	eb45 0303 	adc.w	r3, r5, r3
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800313e:	4629      	mov	r1, r5
 8003140:	028b      	lsls	r3, r1, #10
 8003142:	4621      	mov	r1, r4
 8003144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003148:	4621      	mov	r1, r4
 800314a:	028a      	lsls	r2, r1, #10
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003152:	2200      	movs	r2, #0
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	61fa      	str	r2, [r7, #28]
 8003158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800315c:	f7fd fd94 	bl	8000c88 <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4613      	mov	r3, r2
 8003166:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_GetSysClockFreq+0x200>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	0c1b      	lsrs	r3, r3, #16
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	3301      	adds	r3, #1
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003178:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800317a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003182:	e002      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetSysClockFreq+0x204>)
 8003186:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800318c:	4618      	mov	r0, r3
 800318e:	3750      	adds	r7, #80	; 0x50
 8003190:	46bd      	mov	sp, r7
 8003192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	00f42400 	.word	0x00f42400
 80031a0:	007a1200 	.word	0x007a1200

080031a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000008 	.word	0x20000008

080031bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031c0:	f7ff fff0 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0a9b      	lsrs	r3, r3, #10
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4903      	ldr	r1, [pc, #12]	; (80031e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40023800 	.word	0x40023800
 80031e0:	0800bcd0 	.word	0x0800bcd0

080031e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031e8:	f7ff ffdc 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	0b5b      	lsrs	r3, r3, #13
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	4903      	ldr	r1, [pc, #12]	; (8003208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031fa:	5ccb      	ldrb	r3, [r1, r3]
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003200:	4618      	mov	r0, r3
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40023800 	.word	0x40023800
 8003208:	0800bcd0 	.word	0x0800bcd0

0800320c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e07b      	b.n	8003316 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d108      	bne.n	8003238 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800322e:	d009      	beq.n	8003244 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
 8003236:	e005      	b.n	8003244 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fe fe16 	bl	8001e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800327a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c8:	ea42 0103 	orr.w	r1, r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	f003 0104 	and.w	r1, r3, #4
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	f003 0210 	and.w	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69da      	ldr	r2, [r3, #28]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003304:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b088      	sub	sp, #32
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	4613      	mov	r3, r2
 800332c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_SPI_Transmit+0x22>
 800333c:	2302      	movs	r3, #2
 800333e:	e126      	b.n	800358e <HAL_SPI_Transmit+0x270>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003348:	f7fe fffc 	bl	8002344 <HAL_GetTick>
 800334c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d002      	beq.n	8003364 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800335e:	2302      	movs	r3, #2
 8003360:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003362:	e10b      	b.n	800357c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_SPI_Transmit+0x52>
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003374:	e102      	b.n	800357c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2203      	movs	r2, #3
 800337a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	88fa      	ldrh	r2, [r7, #6]
 800338e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	88fa      	ldrh	r2, [r7, #6]
 8003394:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033bc:	d10f      	bne.n	80033de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d007      	beq.n	80033fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003404:	d14b      	bne.n	800349e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_SPI_Transmit+0xf6>
 800340e:	8afb      	ldrh	r3, [r7, #22]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d13e      	bne.n	8003492 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	881a      	ldrh	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	1c9a      	adds	r2, r3, #2
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003438:	e02b      	b.n	8003492 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d112      	bne.n	800346e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	881a      	ldrh	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	1c9a      	adds	r2, r3, #2
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	86da      	strh	r2, [r3, #54]	; 0x36
 800346c:	e011      	b.n	8003492 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800346e:	f7fe ff69 	bl	8002344 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d803      	bhi.n	8003486 <HAL_SPI_Transmit+0x168>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d102      	bne.n	800348c <HAL_SPI_Transmit+0x16e>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003490:	e074      	b.n	800357c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1ce      	bne.n	800343a <HAL_SPI_Transmit+0x11c>
 800349c:	e04c      	b.n	8003538 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_SPI_Transmit+0x18e>
 80034a6:	8afb      	ldrh	r3, [r7, #22]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d140      	bne.n	800352e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	7812      	ldrb	r2, [r2, #0]
 80034b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034d2:	e02c      	b.n	800352e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d113      	bne.n	800350a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	330c      	adds	r3, #12
 80034ec:	7812      	ldrb	r2, [r2, #0]
 80034ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	86da      	strh	r2, [r3, #54]	; 0x36
 8003508:	e011      	b.n	800352e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800350a:	f7fe ff1b 	bl	8002344 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d803      	bhi.n	8003522 <HAL_SPI_Transmit+0x204>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d102      	bne.n	8003528 <HAL_SPI_Transmit+0x20a>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800352c:	e026      	b.n	800357c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1cd      	bne.n	80034d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	6839      	ldr	r1, [r7, #0]
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 fa55 	bl	80039ec <SPI_EndRxTxTransaction>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e000      	b.n	800357c <HAL_SPI_Transmit+0x25e>
  }

error:
 800357a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800358c:	7ffb      	ldrb	r3, [r7, #31]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b08c      	sub	sp, #48	; 0x30
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035a4:	2301      	movs	r3, #1
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_SPI_TransmitReceive+0x26>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e18a      	b.n	80038d2 <HAL_SPI_TransmitReceive+0x33c>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c4:	f7fe febe 	bl	8002344 <HAL_GetTick>
 80035c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80035da:	887b      	ldrh	r3, [r7, #2]
 80035dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d00f      	beq.n	8003606 <HAL_SPI_TransmitReceive+0x70>
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ec:	d107      	bne.n	80035fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <HAL_SPI_TransmitReceive+0x68>
 80035f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d003      	beq.n	8003606 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80035fe:	2302      	movs	r3, #2
 8003600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003604:	e15b      	b.n	80038be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_SPI_TransmitReceive+0x82>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_SPI_TransmitReceive+0x82>
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d103      	bne.n	8003620 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800361e:	e14e      	b.n	80038be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b04      	cmp	r3, #4
 800362a:	d003      	beq.n	8003634 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2205      	movs	r2, #5
 8003630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	887a      	ldrh	r2, [r7, #2]
 800364a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	887a      	ldrh	r2, [r7, #2]
 8003656:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d007      	beq.n	8003688 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003686:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003690:	d178      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_SPI_TransmitReceive+0x10a>
 800369a:	8b7b      	ldrh	r3, [r7, #26]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d166      	bne.n	800376e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	881a      	ldrh	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	1c9a      	adds	r2, r3, #2
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036c4:	e053      	b.n	800376e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d11b      	bne.n	800370c <HAL_SPI_TransmitReceive+0x176>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <HAL_SPI_TransmitReceive+0x176>
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d113      	bne.n	800370c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	881a      	ldrh	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	1c9a      	adds	r2, r3, #2
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d119      	bne.n	800374e <HAL_SPI_TransmitReceive+0x1b8>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d014      	beq.n	800374e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	b292      	uxth	r2, r2
 8003730:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	1c9a      	adds	r2, r3, #2
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800374a:	2301      	movs	r3, #1
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800374e:	f7fe fdf9 	bl	8002344 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800375a:	429a      	cmp	r2, r3
 800375c:	d807      	bhi.n	800376e <HAL_SPI_TransmitReceive+0x1d8>
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d003      	beq.n	800376e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800376c:	e0a7      	b.n	80038be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1a6      	bne.n	80036c6 <HAL_SPI_TransmitReceive+0x130>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1a1      	bne.n	80036c6 <HAL_SPI_TransmitReceive+0x130>
 8003782:	e07c      	b.n	800387e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_SPI_TransmitReceive+0x1fc>
 800378c:	8b7b      	ldrh	r3, [r7, #26]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d16b      	bne.n	800386a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	7812      	ldrb	r2, [r2, #0]
 800379e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b8:	e057      	b.n	800386a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d11c      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x26c>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d017      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x26c>
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d114      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d119      	bne.n	8003844 <HAL_SPI_TransmitReceive+0x2ae>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d014      	beq.n	8003844 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003840:	2301      	movs	r3, #1
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003844:	f7fe fd7e 	bl	8002344 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003850:	429a      	cmp	r2, r3
 8003852:	d803      	bhi.n	800385c <HAL_SPI_TransmitReceive+0x2c6>
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d102      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x2cc>
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003868:	e029      	b.n	80038be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1a2      	bne.n	80037ba <HAL_SPI_TransmitReceive+0x224>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d19d      	bne.n	80037ba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800387e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003880:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f8b2 	bl	80039ec <SPI_EndRxTxTransaction>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d006      	beq.n	800389c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800389a:	e010      	b.n	80038be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	e000      	b.n	80038be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80038bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3730      	adds	r7, #48	; 0x30
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	4613      	mov	r3, r2
 80038ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038ec:	f7fe fd2a 	bl	8002344 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	4413      	add	r3, r2
 80038fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038fc:	f7fe fd22 	bl	8002344 <HAL_GetTick>
 8003900:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003902:	4b39      	ldr	r3, [pc, #228]	; (80039e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	015b      	lsls	r3, r3, #5
 8003908:	0d1b      	lsrs	r3, r3, #20
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	fb02 f303 	mul.w	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003912:	e054      	b.n	80039be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d050      	beq.n	80039be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800391c:	f7fe fd12 	bl	8002344 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	429a      	cmp	r2, r3
 800392a:	d902      	bls.n	8003932 <SPI_WaitFlagStateUntilTimeout+0x56>
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d13d      	bne.n	80039ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003940:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800394a:	d111      	bne.n	8003970 <SPI_WaitFlagStateUntilTimeout+0x94>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003954:	d004      	beq.n	8003960 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395e:	d107      	bne.n	8003970 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800396e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003978:	d10f      	bne.n	800399a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003998:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e017      	b.n	80039de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4013      	ands	r3, r2
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	bf0c      	ite	eq
 80039ce:	2301      	moveq	r3, #1
 80039d0:	2300      	movne	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	461a      	mov	r2, r3
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d19b      	bne.n	8003914 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000008 	.word	0x20000008

080039ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039f8:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <SPI_EndRxTxTransaction+0x7c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1b      	ldr	r2, [pc, #108]	; (8003a6c <SPI_EndRxTxTransaction+0x80>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	0d5b      	lsrs	r3, r3, #21
 8003a04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a08:	fb02 f303 	mul.w	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a16:	d112      	bne.n	8003a3e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2180      	movs	r1, #128	; 0x80
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7ff ff5a 	bl	80038dc <SPI_WaitFlagStateUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e00f      	b.n	8003a5e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a54:	2b80      	cmp	r3, #128	; 0x80
 8003a56:	d0f2      	beq.n	8003a3e <SPI_EndRxTxTransaction+0x52>
 8003a58:	e000      	b.n	8003a5c <SPI_EndRxTxTransaction+0x70>
        break;
 8003a5a:	bf00      	nop
  }

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000008 	.word	0x20000008
 8003a6c:	165e9f81 	.word	0x165e9f81

08003a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e03f      	b.n	8003b02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fe fa42 	bl	8001f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2224      	movs	r2, #36	; 0x24
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f929 	bl	8003d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b08a      	sub	sp, #40	; 0x28
 8003b0e:	af02      	add	r7, sp, #8
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	603b      	str	r3, [r7, #0]
 8003b16:	4613      	mov	r3, r2
 8003b18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d17c      	bne.n	8003c24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_UART_Transmit+0x2c>
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e075      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_UART_Transmit+0x3e>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e06e      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2221      	movs	r2, #33	; 0x21
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b5e:	f7fe fbf1 	bl	8002344 <HAL_GetTick>
 8003b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	88fa      	ldrh	r2, [r7, #6]
 8003b6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b78:	d108      	bne.n	8003b8c <HAL_UART_Transmit+0x82>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d104      	bne.n	8003b8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	e003      	b.n	8003b94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b9c:	e02a      	b.n	8003bf4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2180      	movs	r1, #128	; 0x80
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f840 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e036      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	e007      	b.n	8003be6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	781a      	ldrb	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	3301      	adds	r3, #1
 8003be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1cf      	bne.n	8003b9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2200      	movs	r2, #0
 8003c06:	2140      	movs	r1, #64	; 0x40
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f810 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e006      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b090      	sub	sp, #64	; 0x40
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3e:	e050      	b.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d04c      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c4e:	f7fe fb79 	bl	8002344 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d241      	bcs.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c7e:	637a      	str	r2, [r7, #52]	; 0x34
 8003c80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e5      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3314      	adds	r3, #20
 8003c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3314      	adds	r3, #20
 8003cb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb2:	623a      	str	r2, [r7, #32]
 8003cb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	69f9      	ldr	r1, [r7, #28]
 8003cb8:	6a3a      	ldr	r2, [r7, #32]
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e5      	bne.n	8003c92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e00f      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d09f      	beq.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3740      	adds	r7, #64	; 0x40
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d10:	b0c0      	sub	sp, #256	; 0x100
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	68d9      	ldr	r1, [r3, #12]
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	ea40 0301 	orr.w	r3, r0, r1
 8003d34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d64:	f021 010c 	bic.w	r1, r1, #12
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d72:	430b      	orrs	r3, r1
 8003d74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d86:	6999      	ldr	r1, [r3, #24]
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	ea40 0301 	orr.w	r3, r0, r1
 8003d92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4b8f      	ldr	r3, [pc, #572]	; (8003fd8 <UART_SetConfig+0x2cc>)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d005      	beq.n	8003dac <UART_SetConfig+0xa0>
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b8d      	ldr	r3, [pc, #564]	; (8003fdc <UART_SetConfig+0x2d0>)
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d104      	bne.n	8003db6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dac:	f7ff fa1a 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 8003db0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003db4:	e003      	b.n	8003dbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003db6:	f7ff fa01 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 8003dba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc8:	f040 810c 	bne.w	8003fe4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dde:	4622      	mov	r2, r4
 8003de0:	462b      	mov	r3, r5
 8003de2:	1891      	adds	r1, r2, r2
 8003de4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003de6:	415b      	adcs	r3, r3
 8003de8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dee:	4621      	mov	r1, r4
 8003df0:	eb12 0801 	adds.w	r8, r2, r1
 8003df4:	4629      	mov	r1, r5
 8003df6:	eb43 0901 	adc.w	r9, r3, r1
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e0e:	4690      	mov	r8, r2
 8003e10:	4699      	mov	r9, r3
 8003e12:	4623      	mov	r3, r4
 8003e14:	eb18 0303 	adds.w	r3, r8, r3
 8003e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e1c:	462b      	mov	r3, r5
 8003e1e:	eb49 0303 	adc.w	r3, r9, r3
 8003e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	18db      	adds	r3, r3, r3
 8003e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e40:	4613      	mov	r3, r2
 8003e42:	eb42 0303 	adc.w	r3, r2, r3
 8003e46:	657b      	str	r3, [r7, #84]	; 0x54
 8003e48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e50:	f7fc ff1a 	bl	8000c88 <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4b61      	ldr	r3, [pc, #388]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	011c      	lsls	r4, r3, #4
 8003e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	1891      	adds	r1, r2, r2
 8003e7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e7c:	415b      	adcs	r3, r3
 8003e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e84:	4641      	mov	r1, r8
 8003e86:	eb12 0a01 	adds.w	sl, r2, r1
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ea4:	4692      	mov	sl, r2
 8003ea6:	469b      	mov	fp, r3
 8003ea8:	4643      	mov	r3, r8
 8003eaa:	eb1a 0303 	adds.w	r3, sl, r3
 8003eae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	eb4b 0303 	adc.w	r3, fp, r3
 8003eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ec8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ecc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	18db      	adds	r3, r3, r3
 8003ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	eb42 0303 	adc.w	r3, r2, r3
 8003edc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ede:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ee2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ee6:	f7fc fecf 	bl	8000c88 <__aeabi_uldivmod>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4b3b      	ldr	r3, [pc, #236]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	2264      	movs	r2, #100	; 0x64
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
 8003efe:	1acb      	subs	r3, r1, r3
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f06:	4b36      	ldr	r3, [pc, #216]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003f08:	fba3 2302 	umull	r2, r3, r3, r2
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f14:	441c      	add	r4, r3
 8003f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f28:	4642      	mov	r2, r8
 8003f2a:	464b      	mov	r3, r9
 8003f2c:	1891      	adds	r1, r2, r2
 8003f2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f30:	415b      	adcs	r3, r3
 8003f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f38:	4641      	mov	r1, r8
 8003f3a:	1851      	adds	r1, r2, r1
 8003f3c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f3e:	4649      	mov	r1, r9
 8003f40:	414b      	adcs	r3, r1
 8003f42:	637b      	str	r3, [r7, #52]	; 0x34
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f50:	4659      	mov	r1, fp
 8003f52:	00cb      	lsls	r3, r1, #3
 8003f54:	4651      	mov	r1, sl
 8003f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	00ca      	lsls	r2, r1, #3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	4642      	mov	r2, r8
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	460a      	mov	r2, r1
 8003f70:	eb42 0303 	adc.w	r3, r2, r3
 8003f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	18db      	adds	r3, r3, r3
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f92:	4613      	mov	r3, r2
 8003f94:	eb42 0303 	adc.w	r3, r2, r3
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fa2:	f7fc fe71 	bl	8000c88 <__aeabi_uldivmod>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003fac:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	2164      	movs	r1, #100	; 0x64
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	3332      	adds	r3, #50	; 0x32
 8003fbe:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	f003 0207 	and.w	r2, r3, #7
 8003fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4422      	add	r2, r4
 8003fd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fd4:	e105      	b.n	80041e2 <UART_SetConfig+0x4d6>
 8003fd6:	bf00      	nop
 8003fd8:	40011000 	.word	0x40011000
 8003fdc:	40011400 	.word	0x40011400
 8003fe0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ff2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ff6:	4642      	mov	r2, r8
 8003ff8:	464b      	mov	r3, r9
 8003ffa:	1891      	adds	r1, r2, r2
 8003ffc:	6239      	str	r1, [r7, #32]
 8003ffe:	415b      	adcs	r3, r3
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
 8004002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004006:	4641      	mov	r1, r8
 8004008:	1854      	adds	r4, r2, r1
 800400a:	4649      	mov	r1, r9
 800400c:	eb43 0501 	adc.w	r5, r3, r1
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	00eb      	lsls	r3, r5, #3
 800401a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800401e:	00e2      	lsls	r2, r4, #3
 8004020:	4614      	mov	r4, r2
 8004022:	461d      	mov	r5, r3
 8004024:	4643      	mov	r3, r8
 8004026:	18e3      	adds	r3, r4, r3
 8004028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800402c:	464b      	mov	r3, r9
 800402e:	eb45 0303 	adc.w	r3, r5, r3
 8004032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004042:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004052:	4629      	mov	r1, r5
 8004054:	008b      	lsls	r3, r1, #2
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800405c:	4621      	mov	r1, r4
 800405e:	008a      	lsls	r2, r1, #2
 8004060:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004064:	f7fc fe10 	bl	8000c88 <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4b60      	ldr	r3, [pc, #384]	; (80041f0 <UART_SetConfig+0x4e4>)
 800406e:	fba3 2302 	umull	r2, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	011c      	lsls	r4, r3, #4
 8004076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800407a:	2200      	movs	r2, #0
 800407c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004080:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004084:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004088:	4642      	mov	r2, r8
 800408a:	464b      	mov	r3, r9
 800408c:	1891      	adds	r1, r2, r2
 800408e:	61b9      	str	r1, [r7, #24]
 8004090:	415b      	adcs	r3, r3
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004098:	4641      	mov	r1, r8
 800409a:	1851      	adds	r1, r2, r1
 800409c:	6139      	str	r1, [r7, #16]
 800409e:	4649      	mov	r1, r9
 80040a0:	414b      	adcs	r3, r1
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040b0:	4659      	mov	r1, fp
 80040b2:	00cb      	lsls	r3, r1, #3
 80040b4:	4651      	mov	r1, sl
 80040b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ba:	4651      	mov	r1, sl
 80040bc:	00ca      	lsls	r2, r1, #3
 80040be:	4610      	mov	r0, r2
 80040c0:	4619      	mov	r1, r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	4642      	mov	r2, r8
 80040c6:	189b      	adds	r3, r3, r2
 80040c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040cc:	464b      	mov	r3, r9
 80040ce:	460a      	mov	r2, r1
 80040d0:	eb42 0303 	adc.w	r3, r2, r3
 80040d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80040e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040f0:	4649      	mov	r1, r9
 80040f2:	008b      	lsls	r3, r1, #2
 80040f4:	4641      	mov	r1, r8
 80040f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040fa:	4641      	mov	r1, r8
 80040fc:	008a      	lsls	r2, r1, #2
 80040fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004102:	f7fc fdc1 	bl	8000c88 <__aeabi_uldivmod>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <UART_SetConfig+0x4e4>)
 800410c:	fba3 1302 	umull	r1, r3, r3, r2
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	2164      	movs	r1, #100	; 0x64
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	3332      	adds	r3, #50	; 0x32
 800411e:	4a34      	ldr	r2, [pc, #208]	; (80041f0 <UART_SetConfig+0x4e4>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800412a:	441c      	add	r4, r3
 800412c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004130:	2200      	movs	r2, #0
 8004132:	673b      	str	r3, [r7, #112]	; 0x70
 8004134:	677a      	str	r2, [r7, #116]	; 0x74
 8004136:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800413a:	4642      	mov	r2, r8
 800413c:	464b      	mov	r3, r9
 800413e:	1891      	adds	r1, r2, r2
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	415b      	adcs	r3, r3
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800414a:	4641      	mov	r1, r8
 800414c:	1851      	adds	r1, r2, r1
 800414e:	6039      	str	r1, [r7, #0]
 8004150:	4649      	mov	r1, r9
 8004152:	414b      	adcs	r3, r1
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004162:	4659      	mov	r1, fp
 8004164:	00cb      	lsls	r3, r1, #3
 8004166:	4651      	mov	r1, sl
 8004168:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800416c:	4651      	mov	r1, sl
 800416e:	00ca      	lsls	r2, r1, #3
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	4603      	mov	r3, r0
 8004176:	4642      	mov	r2, r8
 8004178:	189b      	adds	r3, r3, r2
 800417a:	66bb      	str	r3, [r7, #104]	; 0x68
 800417c:	464b      	mov	r3, r9
 800417e:	460a      	mov	r2, r1
 8004180:	eb42 0303 	adc.w	r3, r2, r3
 8004184:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	663b      	str	r3, [r7, #96]	; 0x60
 8004190:	667a      	str	r2, [r7, #100]	; 0x64
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800419e:	4649      	mov	r1, r9
 80041a0:	008b      	lsls	r3, r1, #2
 80041a2:	4641      	mov	r1, r8
 80041a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a8:	4641      	mov	r1, r8
 80041aa:	008a      	lsls	r2, r1, #2
 80041ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041b0:	f7fc fd6a 	bl	8000c88 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <UART_SetConfig+0x4e4>)
 80041ba:	fba3 1302 	umull	r1, r3, r3, r2
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2164      	movs	r1, #100	; 0x64
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	3332      	adds	r3, #50	; 0x32
 80041cc:	4a08      	ldr	r2, [pc, #32]	; (80041f0 <UART_SetConfig+0x4e4>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	f003 020f 	and.w	r2, r3, #15
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4422      	add	r2, r4
 80041e0:	609a      	str	r2, [r3, #8]
}
 80041e2:	bf00      	nop
 80041e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041e8:	46bd      	mov	sp, r7
 80041ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ee:	bf00      	nop
 80041f0:	51eb851f 	.word	0x51eb851f

080041f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80041f8:	4904      	ldr	r1, [pc, #16]	; (800420c <MX_FATFS_Init+0x18>)
 80041fa:	4805      	ldr	r0, [pc, #20]	; (8004210 <MX_FATFS_Init+0x1c>)
 80041fc:	f002 fd36 	bl	8006c6c <FATFS_LinkDriver>
 8004200:	4603      	mov	r3, r0
 8004202:	461a      	mov	r2, r3
 8004204:	4b03      	ldr	r3, [pc, #12]	; (8004214 <MX_FATFS_Init+0x20>)
 8004206:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004208:	bf00      	nop
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200047bc 	.word	0x200047bc
 8004210:	20000014 	.word	0x20000014
 8004214:	200047b8 	.word	0x200047b8

08004218 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800421c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800421e:	4618      	mov	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */

	return SD_disk_initialize(pdrv);
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	4618      	mov	r0, r3
 8004236:	f7fd f895 	bl	8001364 <SD_disk_initialize>
 800423a:	4603      	mov	r3, r0
 800423c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	4603      	mov	r3, r0
 800424e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

	return SD_disk_status(pdrv);
 8004250:	79fb      	ldrb	r3, [r7, #7]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd f972 	bl	800153c <SD_disk_status>
 8004258:	4603      	mov	r3, r0
 800425a:	b2db      	uxtb	r3, r3

  /* USER CODE END STATUS */
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	607a      	str	r2, [r7, #4]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4603      	mov	r3, r0
 8004272:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read ( pdrv,  buff,  sector,  count);
 8004274:	7bf8      	ldrb	r0, [r7, #15]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	f7fd f974 	bl	8001568 <SD_disk_read>
 8004280:	4603      	mov	r3, r0
 8004282:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4603      	mov	r3, r0
 800429a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write ( pdrv,   buff,  sector,  count);
 800429c:	7bf8      	ldrb	r0, [r7, #15]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	f7fd f9ca 	bl	800163c <SD_disk_write>
 80042a8:	4603      	mov	r3, r0
 80042aa:	b2db      	uxtb	r3, r3
	//return RES_OK;
  /* USER CODE END WRITE */
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	603a      	str	r2, [r7, #0]
 80042be:	71fb      	strb	r3, [r7, #7]
 80042c0:	460b      	mov	r3, r1
 80042c2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
   // return res;
	return SD_disk_ioctl ( pdrv,  cmd, buff);
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	79b9      	ldrb	r1, [r7, #6]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fd fa3a 	bl	8001744 <SD_disk_ioctl>
 80042d0:	4603      	mov	r3, r0
 80042d2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	4a08      	ldr	r2, [pc, #32]	; (800430c <disk_status+0x30>)
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	79fa      	ldrb	r2, [r7, #7]
 80042f4:	4905      	ldr	r1, [pc, #20]	; (800430c <disk_status+0x30>)
 80042f6:	440a      	add	r2, r1
 80042f8:	7a12      	ldrb	r2, [r2, #8]
 80042fa:	4610      	mov	r0, r2
 80042fc:	4798      	blx	r3
 80042fe:	4603      	mov	r3, r0
 8004300:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004302:	7bfb      	ldrb	r3, [r7, #15]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	200047e8 	.word	0x200047e8

08004310 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	4a0d      	ldr	r2, [pc, #52]	; (8004358 <disk_initialize+0x48>)
 8004322:	5cd3      	ldrb	r3, [r2, r3]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d111      	bne.n	800434c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	4a0b      	ldr	r2, [pc, #44]	; (8004358 <disk_initialize+0x48>)
 800432c:	2101      	movs	r1, #1
 800432e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	4a09      	ldr	r2, [pc, #36]	; (8004358 <disk_initialize+0x48>)
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	79fa      	ldrb	r2, [r7, #7]
 800433e:	4906      	ldr	r1, [pc, #24]	; (8004358 <disk_initialize+0x48>)
 8004340:	440a      	add	r2, r1
 8004342:	7a12      	ldrb	r2, [r2, #8]
 8004344:	4610      	mov	r0, r2
 8004346:	4798      	blx	r3
 8004348:	4603      	mov	r3, r0
 800434a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800434c:	7bfb      	ldrb	r3, [r7, #15]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	200047e8 	.word	0x200047e8

0800435c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	4603      	mov	r3, r0
 800436a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <disk_read+0x3c>)
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	689c      	ldr	r4, [r3, #8]
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	4a07      	ldr	r2, [pc, #28]	; (8004398 <disk_read+0x3c>)
 800437c:	4413      	add	r3, r2
 800437e:	7a18      	ldrb	r0, [r3, #8]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	47a0      	blx	r4
 8004388:	4603      	mov	r3, r0
 800438a:	75fb      	strb	r3, [r7, #23]
  return res;
 800438c:	7dfb      	ldrb	r3, [r7, #23]
}
 800438e:	4618      	mov	r0, r3
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	bd90      	pop	{r4, r7, pc}
 8004396:	bf00      	nop
 8004398:	200047e8 	.word	0x200047e8

0800439c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <disk_write+0x3c>)
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	68dc      	ldr	r4, [r3, #12]
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <disk_write+0x3c>)
 80043bc:	4413      	add	r3, r2
 80043be:	7a18      	ldrb	r0, [r3, #8]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	47a0      	blx	r4
 80043c8:	4603      	mov	r3, r0
 80043ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80043cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd90      	pop	{r4, r7, pc}
 80043d6:	bf00      	nop
 80043d8:	200047e8 	.word	0x200047e8

080043dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	603a      	str	r2, [r7, #0]
 80043e6:	71fb      	strb	r3, [r7, #7]
 80043e8:	460b      	mov	r3, r1
 80043ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <disk_ioctl+0x38>)
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	79fa      	ldrb	r2, [r7, #7]
 80043fa:	4906      	ldr	r1, [pc, #24]	; (8004414 <disk_ioctl+0x38>)
 80043fc:	440a      	add	r2, r1
 80043fe:	7a10      	ldrb	r0, [r2, #8]
 8004400:	79b9      	ldrb	r1, [r7, #6]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	4798      	blx	r3
 8004406:	4603      	mov	r3, r0
 8004408:	73fb      	strb	r3, [r7, #15]
  return res;
 800440a:	7bfb      	ldrb	r3, [r7, #15]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	200047e8 	.word	0x200047e8

08004418 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3301      	adds	r3, #1
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004428:	89fb      	ldrh	r3, [r7, #14]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	b21a      	sxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	b21b      	sxth	r3, r3
 8004434:	4313      	orrs	r3, r2
 8004436:	b21b      	sxth	r3, r3
 8004438:	81fb      	strh	r3, [r7, #14]
	return rv;
 800443a:	89fb      	ldrh	r3, [r7, #14]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3303      	adds	r3, #3
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	3202      	adds	r2, #2
 8004460:	7812      	ldrb	r2, [r2, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	3201      	adds	r2, #1
 800446e:	7812      	ldrb	r2, [r2, #0]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	7812      	ldrb	r2, [r2, #0]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004480:	68fb      	ldr	r3, [r7, #12]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	460b      	mov	r3, r1
 8004498:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	887a      	ldrh	r2, [r7, #2]
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	887b      	ldrh	r3, [r7, #2]
 80044a8:	0a1b      	lsrs	r3, r3, #8
 80044aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	701a      	strb	r2, [r3, #0]
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	0a1b      	lsrs	r3, r3, #8
 80044f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	0a1b      	lsrs	r3, r3, #8
 8004502:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00d      	beq.n	8004552 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	1c53      	adds	r3, r2, #1
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	1c59      	adds	r1, r3, #1
 8004540:	6179      	str	r1, [r7, #20]
 8004542:	7812      	ldrb	r2, [r2, #0]
 8004544:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3b01      	subs	r3, #1
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f1      	bne.n	8004536 <mem_cpy+0x1a>
	}
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800455e:	b480      	push	{r7}
 8004560:	b087      	sub	sp, #28
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	617a      	str	r2, [r7, #20]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3b01      	subs	r3, #1
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f3      	bne.n	800456e <mem_set+0x10>
}
 8004586:	bf00      	nop
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004594:	b480      	push	{r7}
 8004596:	b089      	sub	sp, #36	; 0x24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	61fa      	str	r2, [r7, #28]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	4619      	mov	r1, r3
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	61ba      	str	r2, [r7, #24]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	1acb      	subs	r3, r1, r3
 80045c0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	607b      	str	r3, [r7, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <mem_cmp+0x40>
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0eb      	beq.n	80045ac <mem_cmp+0x18>

	return r;
 80045d4:	697b      	ldr	r3, [r7, #20]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3724      	adds	r7, #36	; 0x24
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80045ec:	e002      	b.n	80045f4 <chk_chr+0x12>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3301      	adds	r3, #1
 80045f2:	607b      	str	r3, [r7, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <chk_chr+0x26>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	4293      	cmp	r3, r2
 8004606:	d1f2      	bne.n	80045ee <chk_chr+0xc>
	return *str;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	781b      	ldrb	r3, [r3, #0]
}
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	e029      	b.n	8004680 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800462c:	4a27      	ldr	r2, [pc, #156]	; (80046cc <chk_lock+0xb4>)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	4413      	add	r3, r2
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01d      	beq.n	8004676 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800463a:	4a24      	ldr	r2, [pc, #144]	; (80046cc <chk_lock+0xb4>)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	4413      	add	r3, r2
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d116      	bne.n	800467a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800464c:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <chk_lock+0xb4>)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	4413      	add	r3, r2
 8004654:	3304      	adds	r3, #4
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800465c:	429a      	cmp	r2, r3
 800465e:	d10c      	bne.n	800467a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004660:	4a1a      	ldr	r2, [pc, #104]	; (80046cc <chk_lock+0xb4>)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	4413      	add	r3, r2
 8004668:	3308      	adds	r3, #8
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004670:	429a      	cmp	r2, r3
 8004672:	d102      	bne.n	800467a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004674:	e007      	b.n	8004686 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004676:	2301      	movs	r3, #1
 8004678:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3301      	adds	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d9d2      	bls.n	800462c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d109      	bne.n	80046a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <chk_lock+0x80>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d101      	bne.n	800469c <chk_lock+0x84>
 8004698:	2300      	movs	r3, #0
 800469a:	e010      	b.n	80046be <chk_lock+0xa6>
 800469c:	2312      	movs	r3, #18
 800469e:	e00e      	b.n	80046be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d108      	bne.n	80046b8 <chk_lock+0xa0>
 80046a6:	4a09      	ldr	r2, [pc, #36]	; (80046cc <chk_lock+0xb4>)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	4413      	add	r3, r2
 80046ae:	330c      	adds	r3, #12
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b6:	d101      	bne.n	80046bc <chk_lock+0xa4>
 80046b8:	2310      	movs	r3, #16
 80046ba:	e000      	b.n	80046be <chk_lock+0xa6>
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	200047c8 	.word	0x200047c8

080046d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80046d6:	2300      	movs	r3, #0
 80046d8:	607b      	str	r3, [r7, #4]
 80046da:	e002      	b.n	80046e2 <enq_lock+0x12>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3301      	adds	r3, #1
 80046e0:	607b      	str	r3, [r7, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d806      	bhi.n	80046f6 <enq_lock+0x26>
 80046e8:	4a09      	ldr	r2, [pc, #36]	; (8004710 <enq_lock+0x40>)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	4413      	add	r3, r2
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f2      	bne.n	80046dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	200047c8 	.word	0x200047c8

08004714 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	e01f      	b.n	8004764 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004724:	4a41      	ldr	r2, [pc, #260]	; (800482c <inc_lock+0x118>)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	4413      	add	r3, r2
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d113      	bne.n	800475e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004736:	4a3d      	ldr	r2, [pc, #244]	; (800482c <inc_lock+0x118>)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	4413      	add	r3, r2
 800473e:	3304      	adds	r3, #4
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004746:	429a      	cmp	r2, r3
 8004748:	d109      	bne.n	800475e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800474a:	4a38      	ldr	r2, [pc, #224]	; (800482c <inc_lock+0x118>)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	4413      	add	r3, r2
 8004752:	3308      	adds	r3, #8
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800475a:	429a      	cmp	r2, r3
 800475c:	d006      	beq.n	800476c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3301      	adds	r3, #1
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d9dc      	bls.n	8004724 <inc_lock+0x10>
 800476a:	e000      	b.n	800476e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800476c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d132      	bne.n	80047da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e002      	b.n	8004780 <inc_lock+0x6c>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3301      	adds	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d806      	bhi.n	8004794 <inc_lock+0x80>
 8004786:	4a29      	ldr	r2, [pc, #164]	; (800482c <inc_lock+0x118>)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	4413      	add	r3, r2
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f2      	bne.n	800477a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d101      	bne.n	800479e <inc_lock+0x8a>
 800479a:	2300      	movs	r3, #0
 800479c:	e040      	b.n	8004820 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4922      	ldr	r1, [pc, #136]	; (800482c <inc_lock+0x118>)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	440b      	add	r3, r1
 80047aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	491e      	ldr	r1, [pc, #120]	; (800482c <inc_lock+0x118>)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	440b      	add	r3, r1
 80047b8:	3304      	adds	r3, #4
 80047ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	491a      	ldr	r1, [pc, #104]	; (800482c <inc_lock+0x118>)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	440b      	add	r3, r1
 80047c8:	3308      	adds	r3, #8
 80047ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80047cc:	4a17      	ldr	r2, [pc, #92]	; (800482c <inc_lock+0x118>)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	4413      	add	r3, r2
 80047d4:	330c      	adds	r3, #12
 80047d6:	2200      	movs	r2, #0
 80047d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d009      	beq.n	80047f4 <inc_lock+0xe0>
 80047e0:	4a12      	ldr	r2, [pc, #72]	; (800482c <inc_lock+0x118>)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	4413      	add	r3, r2
 80047e8:	330c      	adds	r3, #12
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <inc_lock+0xe0>
 80047f0:	2300      	movs	r3, #0
 80047f2:	e015      	b.n	8004820 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d108      	bne.n	800480c <inc_lock+0xf8>
 80047fa:	4a0c      	ldr	r2, [pc, #48]	; (800482c <inc_lock+0x118>)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	4413      	add	r3, r2
 8004802:	330c      	adds	r3, #12
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	3301      	adds	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	e001      	b.n	8004810 <inc_lock+0xfc>
 800480c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004810:	4906      	ldr	r1, [pc, #24]	; (800482c <inc_lock+0x118>)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	440b      	add	r3, r1
 8004818:	330c      	adds	r3, #12
 800481a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3301      	adds	r3, #1
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	200047c8 	.word	0x200047c8

08004830 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3b01      	subs	r3, #1
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d825      	bhi.n	8004890 <dec_lock+0x60>
		n = Files[i].ctr;
 8004844:	4a17      	ldr	r2, [pc, #92]	; (80048a4 <dec_lock+0x74>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	4413      	add	r3, r2
 800484c:	330c      	adds	r3, #12
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004852:	89fb      	ldrh	r3, [r7, #14]
 8004854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004858:	d101      	bne.n	800485e <dec_lock+0x2e>
 800485a:	2300      	movs	r3, #0
 800485c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800485e:	89fb      	ldrh	r3, [r7, #14]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <dec_lock+0x3a>
 8004864:	89fb      	ldrh	r3, [r7, #14]
 8004866:	3b01      	subs	r3, #1
 8004868:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800486a:	4a0e      	ldr	r2, [pc, #56]	; (80048a4 <dec_lock+0x74>)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	4413      	add	r3, r2
 8004872:	330c      	adds	r3, #12
 8004874:	89fa      	ldrh	r2, [r7, #14]
 8004876:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004878:	89fb      	ldrh	r3, [r7, #14]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d105      	bne.n	800488a <dec_lock+0x5a>
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <dec_lock+0x74>)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	4413      	add	r3, r2
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	737b      	strb	r3, [r7, #13]
 800488e:	e001      	b.n	8004894 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004890:	2302      	movs	r3, #2
 8004892:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004894:	7b7b      	ldrb	r3, [r7, #13]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	200047c8 	.word	0x200047c8

080048a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	e010      	b.n	80048d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80048b6:	4a0d      	ldr	r2, [pc, #52]	; (80048ec <clear_lock+0x44>)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	4413      	add	r3, r2
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d105      	bne.n	80048d2 <clear_lock+0x2a>
 80048c6:	4a09      	ldr	r2, [pc, #36]	; (80048ec <clear_lock+0x44>)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	4413      	add	r3, r2
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3301      	adds	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d9eb      	bls.n	80048b6 <clear_lock+0xe>
	}
}
 80048de:	bf00      	nop
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	200047c8 	.word	0x200047c8

080048f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	78db      	ldrb	r3, [r3, #3]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d034      	beq.n	800496e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	7858      	ldrb	r0, [r3, #1]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004914:	2301      	movs	r3, #1
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	f7ff fd40 	bl	800439c <disk_write>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004922:	2301      	movs	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
 8004926:	e022      	b.n	800496e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	1ad2      	subs	r2, r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	429a      	cmp	r2, r3
 800493c:	d217      	bcs.n	800496e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	789b      	ldrb	r3, [r3, #2]
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	e010      	b.n	8004968 <sync_window+0x78>
					wsect += fs->fsize;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4413      	add	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	7858      	ldrb	r0, [r3, #1]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800495a:	2301      	movs	r3, #1
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	f7ff fd1d 	bl	800439c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	3b01      	subs	r3, #1
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d8eb      	bhi.n	8004946 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800496e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d01b      	beq.n	80049c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ffad 	bl	80048f0 <sync_window>
 8004996:	4603      	mov	r3, r0
 8004998:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d113      	bne.n	80049c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	7858      	ldrb	r0, [r3, #1]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80049aa:	2301      	movs	r3, #1
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	f7ff fcd5 	bl	800435c <disk_read>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80049b8:	f04f 33ff 	mov.w	r3, #4294967295
 80049bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80049be:	2301      	movs	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff ff87 	bl	80048f0 <sync_window>
 80049e2:	4603      	mov	r3, r0
 80049e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d159      	bne.n	8004aa0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d149      	bne.n	8004a88 <sync_fs+0xb4>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	791b      	ldrb	r3, [r3, #4]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d145      	bne.n	8004a88 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	899b      	ldrh	r3, [r3, #12]
 8004a06:	461a      	mov	r2, r3
 8004a08:	2100      	movs	r1, #0
 8004a0a:	f7ff fda8 	bl	800455e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3334      	adds	r3, #52	; 0x34
 8004a12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004a16:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff fd37 	bl	800448e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3334      	adds	r3, #52	; 0x34
 8004a24:	4921      	ldr	r1, [pc, #132]	; (8004aac <sync_fs+0xd8>)
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fd4c 	bl	80044c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3334      	adds	r3, #52	; 0x34
 8004a30:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004a34:	491e      	ldr	r1, [pc, #120]	; (8004ab0 <sync_fs+0xdc>)
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fd44 	bl	80044c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3334      	adds	r3, #52	; 0x34
 8004a40:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f7ff fd3a 	bl	80044c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3334      	adds	r3, #52	; 0x34
 8004a54:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	f7ff fd30 	bl	80044c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	7858      	ldrb	r0, [r3, #1]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f7ff fc8d 	bl	800439c <disk_write>
			fs->fsi_flag = 0;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff fca3 	bl	80043dc <disk_ioctl>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <sync_fs+0xcc>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	41615252 	.word	0x41615252
 8004ab0:	61417272 	.word	0x61417272

08004ab4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	3b02      	subs	r3, #2
 8004ac2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	3b02      	subs	r3, #2
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d301      	bcc.n	8004ad4 <clust2sect+0x20>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e008      	b.n	8004ae6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	895b      	ldrh	r3, [r3, #10]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	fb03 f202 	mul.w	r2, r3, r2
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	4413      	add	r3, r2
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b086      	sub	sp, #24
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d904      	bls.n	8004b12 <get_fat+0x20>
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d302      	bcc.n	8004b18 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004b12:	2301      	movs	r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	e0bb      	b.n	8004c90 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004b18:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	f000 8083 	beq.w	8004c2e <get_fat+0x13c>
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	f300 80a7 	bgt.w	8004c7c <get_fat+0x18a>
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d002      	beq.n	8004b38 <get_fat+0x46>
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d056      	beq.n	8004be4 <get_fat+0xf2>
 8004b36:	e0a1      	b.n	8004c7c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	085b      	lsrs	r3, r3, #1
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	899b      	ldrh	r3, [r3, #12]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b56:	4413      	add	r3, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	6938      	ldr	r0, [r7, #16]
 8004b5c:	f7ff ff0c 	bl	8004978 <move_window>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f040 808d 	bne.w	8004c82 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	60fa      	str	r2, [r7, #12]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	8992      	ldrh	r2, [r2, #12]
 8004b72:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b76:	fb01 f202 	mul.w	r2, r1, r2
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b84:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	899b      	ldrh	r3, [r3, #12]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b96:	4413      	add	r3, r2
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6938      	ldr	r0, [r7, #16]
 8004b9c:	f7ff feec 	bl	8004978 <move_window>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d16f      	bne.n	8004c86 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	899b      	ldrh	r3, [r3, #12]
 8004baa:	461a      	mov	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bb2:	fb01 f202 	mul.w	r2, r1, r2
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <get_fat+0xe8>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	091b      	lsrs	r3, r3, #4
 8004bd8:	e002      	b.n	8004be0 <get_fat+0xee>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be0:	617b      	str	r3, [r7, #20]
			break;
 8004be2:	e055      	b.n	8004c90 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	899b      	ldrh	r3, [r3, #12]
 8004bec:	085b      	lsrs	r3, r3, #1
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bf8:	4413      	add	r3, r2
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6938      	ldr	r0, [r7, #16]
 8004bfe:	f7ff febb 	bl	8004978 <move_window>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d140      	bne.n	8004c8a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	8992      	ldrh	r2, [r2, #12]
 8004c16:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c1a:	fb00 f202 	mul.w	r2, r0, r2
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	440b      	add	r3, r1
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff fbf8 	bl	8004418 <ld_word>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	617b      	str	r3, [r7, #20]
			break;
 8004c2c:	e030      	b.n	8004c90 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	899b      	ldrh	r3, [r3, #12]
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c42:	4413      	add	r3, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	6938      	ldr	r0, [r7, #16]
 8004c48:	f7ff fe96 	bl	8004978 <move_window>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d11d      	bne.n	8004c8e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	8992      	ldrh	r2, [r2, #12]
 8004c60:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c64:	fb00 f202 	mul.w	r2, r0, r2
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fbeb 	bl	8004448 <ld_dword>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c78:	617b      	str	r3, [r7, #20]
			break;
 8004c7a:	e009      	b.n	8004c90 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	e006      	b.n	8004c90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c82:	bf00      	nop
 8004c84:	e004      	b.n	8004c90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c86:	bf00      	nop
 8004c88:	e002      	b.n	8004c90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004c8a:	bf00      	nop
 8004c8c:	e000      	b.n	8004c90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004c8e:	bf00      	nop
		}
	}

	return val;
 8004c90:	697b      	ldr	r3, [r7, #20]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004c9a:	b590      	push	{r4, r7, lr}
 8004c9c:	b089      	sub	sp, #36	; 0x24
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	f240 8102 	bls.w	8004eb6 <put_fat+0x21c>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	f080 80fc 	bcs.w	8004eb6 <put_fat+0x21c>
		switch (fs->fs_type) {
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	f000 80b6 	beq.w	8004e34 <put_fat+0x19a>
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	f300 80fd 	bgt.w	8004ec8 <put_fat+0x22e>
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d003      	beq.n	8004cda <put_fat+0x40>
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	f000 8083 	beq.w	8004dde <put_fat+0x144>
 8004cd8:	e0f6      	b.n	8004ec8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	899b      	ldrh	r3, [r3, #12]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cf8:	4413      	add	r3, r2
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff fe3b 	bl	8004978 <move_window>
 8004d02:	4603      	mov	r3, r0
 8004d04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d06:	7ffb      	ldrb	r3, [r7, #31]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f040 80d6 	bne.w	8004eba <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	61ba      	str	r2, [r7, #24]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	8992      	ldrh	r2, [r2, #12]
 8004d1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d22:	fb00 f202 	mul.w	r2, r0, r2
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	440b      	add	r3, r1
 8004d2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00d      	beq.n	8004d52 <put_fat+0xb8>
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	b25b      	sxtb	r3, r3
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	b25a      	sxtb	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	b25b      	sxtb	r3, r3
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	b25b      	sxtb	r3, r3
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	e001      	b.n	8004d56 <put_fat+0xbc>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	899b      	ldrh	r3, [r3, #12]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d70:	4413      	add	r3, r2
 8004d72:	4619      	mov	r1, r3
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff fdff 	bl	8004978 <move_window>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d7e:	7ffb      	ldrb	r3, [r7, #31]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f040 809c 	bne.w	8004ebe <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	899b      	ldrh	r3, [r3, #12]
 8004d90:	461a      	mov	r2, r3
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d98:	fb00 f202 	mul.w	r2, r0, r2
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	440b      	add	r3, r1
 8004da0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <put_fat+0x11a>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	091b      	lsrs	r3, r3, #4
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	e00e      	b.n	8004dd2 <put_fat+0x138>
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	b25b      	sxtb	r3, r3
 8004dba:	f023 030f 	bic.w	r3, r3, #15
 8004dbe:	b25a      	sxtb	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	b25b      	sxtb	r3, r3
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	b25b      	sxtb	r3, r3
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	b25b      	sxtb	r3, r3
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	70da      	strb	r2, [r3, #3]
			break;
 8004ddc:	e074      	b.n	8004ec8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	899b      	ldrh	r3, [r3, #12]
 8004de6:	085b      	lsrs	r3, r3, #1
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	4619      	mov	r1, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8004df2:	4413      	add	r3, r2
 8004df4:	4619      	mov	r1, r3
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f7ff fdbe 	bl	8004978 <move_window>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e00:	7ffb      	ldrb	r3, [r7, #31]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d15d      	bne.n	8004ec2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	8992      	ldrh	r2, [r2, #12]
 8004e14:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e18:	fb00 f202 	mul.w	r2, r0, r2
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	440b      	add	r3, r1
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	b292      	uxth	r2, r2
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff fb31 	bl	800448e <st_word>
			fs->wflag = 1;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	70da      	strb	r2, [r3, #3]
			break;
 8004e32:	e049      	b.n	8004ec8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	899b      	ldrh	r3, [r3, #12]
 8004e3c:	089b      	lsrs	r3, r3, #2
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	4619      	mov	r1, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e48:	4413      	add	r3, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff fd93 	bl	8004978 <move_window>
 8004e52:	4603      	mov	r3, r0
 8004e54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e56:	7ffb      	ldrb	r3, [r7, #31]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d134      	bne.n	8004ec6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	8992      	ldrh	r2, [r2, #12]
 8004e70:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e74:	fb00 f202 	mul.w	r2, r0, r2
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff fae3 	bl	8004448 <ld_dword>
 8004e82:	4603      	mov	r3, r0
 8004e84:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004e88:	4323      	orrs	r3, r4
 8004e8a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	8992      	ldrh	r2, [r2, #12]
 8004e9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e9e:	fb00 f202 	mul.w	r2, r0, r2
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff fb0b 	bl	80044c4 <st_dword>
			fs->wflag = 1;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	70da      	strb	r2, [r3, #3]
			break;
 8004eb4:	e008      	b.n	8004ec8 <put_fat+0x22e>
		}
	}
 8004eb6:	bf00      	nop
 8004eb8:	e006      	b.n	8004ec8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004eba:	bf00      	nop
 8004ebc:	e004      	b.n	8004ec8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004ebe:	bf00      	nop
 8004ec0:	e002      	b.n	8004ec8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004ec2:	bf00      	nop
 8004ec4:	e000      	b.n	8004ec8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004ec6:	bf00      	nop
	return res;
 8004ec8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3724      	adds	r7, #36	; 0x24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd90      	pop	{r4, r7, pc}

08004ed2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b088      	sub	sp, #32
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d904      	bls.n	8004ef8 <remove_chain+0x26>
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d301      	bcc.n	8004efc <remove_chain+0x2a>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e04b      	b.n	8004f94 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00c      	beq.n	8004f1c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004f02:	f04f 32ff 	mov.w	r2, #4294967295
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	69b8      	ldr	r0, [r7, #24]
 8004f0a:	f7ff fec6 	bl	8004c9a <put_fat>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004f12:	7ffb      	ldrb	r3, [r7, #31]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <remove_chain+0x4a>
 8004f18:	7ffb      	ldrb	r3, [r7, #31]
 8004f1a:	e03b      	b.n	8004f94 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f7ff fde7 	bl	8004af2 <get_fat>
 8004f24:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d031      	beq.n	8004f90 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <remove_chain+0x64>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e02e      	b.n	8004f94 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d101      	bne.n	8004f42 <remove_chain+0x70>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e028      	b.n	8004f94 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004f42:	2200      	movs	r2, #0
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	69b8      	ldr	r0, [r7, #24]
 8004f48:	f7ff fea7 	bl	8004c9a <put_fat>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004f50:	7ffb      	ldrb	r3, [r7, #31]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <remove_chain+0x88>
 8004f56:	7ffb      	ldrb	r3, [r7, #31]
 8004f58:	e01c      	b.n	8004f94 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	695a      	ldr	r2, [r3, #20]
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	3b02      	subs	r3, #2
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d20b      	bcs.n	8004f80 <remove_chain+0xae>
			fs->free_clst++;
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	791b      	ldrb	r3, [r3, #4]
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d3c6      	bcc.n	8004f1c <remove_chain+0x4a>
 8004f8e:	e000      	b.n	8004f92 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004f90:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10d      	bne.n	8004fce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d004      	beq.n	8004fc8 <create_chain+0x2c>
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d31b      	bcc.n	8005000 <create_chain+0x64>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	e018      	b.n	8005000 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff fd8e 	bl	8004af2 <get_fat>
 8004fd6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d801      	bhi.n	8004fe2 <create_chain+0x46>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e070      	b.n	80050c4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d101      	bne.n	8004fee <create_chain+0x52>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	e06a      	b.n	80050c4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d201      	bcs.n	8004ffc <create_chain+0x60>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	e063      	b.n	80050c4 <create_chain+0x128>
		scl = clst;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	3301      	adds	r3, #1
 8005008:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	429a      	cmp	r2, r3
 8005012:	d307      	bcc.n	8005024 <create_chain+0x88>
				ncl = 2;
 8005014:	2302      	movs	r3, #2
 8005016:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	429a      	cmp	r2, r3
 800501e:	d901      	bls.n	8005024 <create_chain+0x88>
 8005020:	2300      	movs	r3, #0
 8005022:	e04f      	b.n	80050c4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005024:	69f9      	ldr	r1, [r7, #28]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff fd63 	bl	8004af2 <get_fat>
 800502c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00e      	beq.n	8005052 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d003      	beq.n	8005042 <create_chain+0xa6>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d101      	bne.n	8005046 <create_chain+0xaa>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	e03e      	b.n	80050c4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005046:	69fa      	ldr	r2, [r7, #28]
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	429a      	cmp	r2, r3
 800504c:	d1da      	bne.n	8005004 <create_chain+0x68>
 800504e:	2300      	movs	r3, #0
 8005050:	e038      	b.n	80050c4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005052:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005054:	f04f 32ff 	mov.w	r2, #4294967295
 8005058:	69f9      	ldr	r1, [r7, #28]
 800505a:	6938      	ldr	r0, [r7, #16]
 800505c:	f7ff fe1d 	bl	8004c9a <put_fat>
 8005060:	4603      	mov	r3, r0
 8005062:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005064:	7dfb      	ldrb	r3, [r7, #23]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <create_chain+0xe2>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d006      	beq.n	800507e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	6938      	ldr	r0, [r7, #16]
 8005076:	f7ff fe10 	bl	8004c9a <put_fat>
 800507a:	4603      	mov	r3, r0
 800507c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800507e:	7dfb      	ldrb	r3, [r7, #23]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d116      	bne.n	80050b2 <create_chain+0x116>
		fs->last_clst = ncl;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	695a      	ldr	r2, [r3, #20]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	3b02      	subs	r3, #2
 8005094:	429a      	cmp	r2, r3
 8005096:	d804      	bhi.n	80050a2 <create_chain+0x106>
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	1e5a      	subs	r2, r3, #1
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	791b      	ldrb	r3, [r3, #4]
 80050a6:	f043 0301 	orr.w	r3, r3, #1
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	711a      	strb	r2, [r3, #4]
 80050b0:	e007      	b.n	80050c2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80050b2:	7dfb      	ldrb	r3, [r7, #23]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d102      	bne.n	80050be <create_chain+0x122>
 80050b8:	f04f 33ff 	mov.w	r3, #4294967295
 80050bc:	e000      	b.n	80050c0 <create_chain+0x124>
 80050be:	2301      	movs	r3, #1
 80050c0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80050c2:	69fb      	ldr	r3, [r7, #28]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	3304      	adds	r3, #4
 80050e2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	899b      	ldrh	r3, [r3, #12]
 80050e8:	461a      	mov	r2, r3
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	8952      	ldrh	r2, [r2, #10]
 80050f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1d1a      	adds	r2, r3, #4
 80050fe:	613a      	str	r2, [r7, #16]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <clmt_clust+0x42>
 800510a:	2300      	movs	r3, #0
 800510c:	e010      	b.n	8005130 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	429a      	cmp	r2, r3
 8005114:	d307      	bcc.n	8005126 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	3304      	adds	r3, #4
 8005122:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005124:	e7e9      	b.n	80050fa <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005126:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	4413      	add	r3, r2
}
 8005130:	4618      	mov	r0, r3
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005152:	d204      	bcs.n	800515e <dir_sdi+0x22>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	f003 031f 	and.w	r3, r3, #31
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <dir_sdi+0x26>
		return FR_INT_ERR;
 800515e:	2302      	movs	r3, #2
 8005160:	e071      	b.n	8005246 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <dir_sdi+0x46>
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d902      	bls.n	8005182 <dir_sdi+0x46>
		clst = fs->dirbase;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10c      	bne.n	80051a2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	8912      	ldrh	r2, [r2, #8]
 8005190:	4293      	cmp	r3, r2
 8005192:	d301      	bcc.n	8005198 <dir_sdi+0x5c>
 8005194:	2302      	movs	r3, #2
 8005196:	e056      	b.n	8005246 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	61da      	str	r2, [r3, #28]
 80051a0:	e02d      	b.n	80051fe <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	895b      	ldrh	r3, [r3, #10]
 80051a6:	461a      	mov	r2, r3
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	899b      	ldrh	r3, [r3, #12]
 80051ac:	fb02 f303 	mul.w	r3, r2, r3
 80051b0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80051b2:	e019      	b.n	80051e8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6979      	ldr	r1, [r7, #20]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff fc9a 	bl	8004af2 <get_fat>
 80051be:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d101      	bne.n	80051cc <dir_sdi+0x90>
 80051c8:	2301      	movs	r3, #1
 80051ca:	e03c      	b.n	8005246 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d904      	bls.n	80051dc <dir_sdi+0xa0>
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d301      	bcc.n	80051e0 <dir_sdi+0xa4>
 80051dc:	2302      	movs	r3, #2
 80051de:	e032      	b.n	8005246 <dir_sdi+0x10a>
			ofs -= csz;
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d2e1      	bcs.n	80051b4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80051f0:	6979      	ldr	r1, [r7, #20]
 80051f2:	6938      	ldr	r0, [r7, #16]
 80051f4:	f7ff fc5e 	bl	8004ab4 <clust2sect>
 80051f8:	4602      	mov	r2, r0
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <dir_sdi+0xd4>
 800520c:	2302      	movs	r3, #2
 800520e:	e01a      	b.n	8005246 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	899b      	ldrh	r3, [r3, #12]
 8005218:	4619      	mov	r1, r3
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005220:	441a      	add	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	899b      	ldrh	r3, [r3, #12]
 8005230:	461a      	mov	r2, r3
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	fbb3 f0f2 	udiv	r0, r3, r2
 8005238:	fb00 f202 	mul.w	r2, r0, r2
 800523c:	1a9b      	subs	r3, r3, r2
 800523e:	18ca      	adds	r2, r1, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b086      	sub	sp, #24
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	3320      	adds	r3, #32
 8005264:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <dir_next+0x28>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005274:	d301      	bcc.n	800527a <dir_next+0x2c>
 8005276:	2304      	movs	r3, #4
 8005278:	e0bb      	b.n	80053f2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	899b      	ldrh	r3, [r3, #12]
 800527e:	461a      	mov	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	fbb3 f1f2 	udiv	r1, r3, r2
 8005286:	fb01 f202 	mul.w	r2, r1, r2
 800528a:	1a9b      	subs	r3, r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	f040 809d 	bne.w	80053cc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10b      	bne.n	80052bc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	8912      	ldrh	r2, [r2, #8]
 80052ac:	4293      	cmp	r3, r2
 80052ae:	f0c0 808d 	bcc.w	80053cc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	61da      	str	r2, [r3, #28]
 80052b8:	2304      	movs	r3, #4
 80052ba:	e09a      	b.n	80053f2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	899b      	ldrh	r3, [r3, #12]
 80052c0:	461a      	mov	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	8952      	ldrh	r2, [r2, #10]
 80052cc:	3a01      	subs	r2, #1
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d17b      	bne.n	80053cc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f7ff fc08 	bl	8004af2 <get_fat>
 80052e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d801      	bhi.n	80052ee <dir_next+0xa0>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e081      	b.n	80053f2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f4:	d101      	bne.n	80052fa <dir_next+0xac>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e07b      	b.n	80053f2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	429a      	cmp	r2, r3
 8005302:	d359      	bcc.n	80053b8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d104      	bne.n	8005314 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	61da      	str	r2, [r3, #28]
 8005310:	2304      	movs	r3, #4
 8005312:	e06e      	b.n	80053f2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	4619      	mov	r1, r3
 800531c:	4610      	mov	r0, r2
 800531e:	f7ff fe3d 	bl	8004f9c <create_chain>
 8005322:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <dir_next+0xe0>
 800532a:	2307      	movs	r3, #7
 800532c:	e061      	b.n	80053f2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <dir_next+0xea>
 8005334:	2302      	movs	r3, #2
 8005336:	e05c      	b.n	80053f2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	d101      	bne.n	8005344 <dir_next+0xf6>
 8005340:	2301      	movs	r3, #1
 8005342:	e056      	b.n	80053f2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f7ff fad3 	bl	80048f0 <sync_window>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <dir_next+0x106>
 8005350:	2301      	movs	r3, #1
 8005352:	e04e      	b.n	80053f2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	899b      	ldrh	r3, [r3, #12]
 800535e:	461a      	mov	r2, r3
 8005360:	2100      	movs	r1, #0
 8005362:	f7ff f8fc 	bl	800455e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005366:	2300      	movs	r3, #0
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	6979      	ldr	r1, [r7, #20]
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff fba1 	bl	8004ab4 <clust2sect>
 8005372:	4602      	mov	r2, r0
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
 8005378:	e012      	b.n	80053a0 <dir_next+0x152>
						fs->wflag = 1;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff fab5 	bl	80048f0 <sync_window>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <dir_next+0x142>
 800538c:	2301      	movs	r3, #1
 800538e:	e030      	b.n	80053f2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	3301      	adds	r3, #1
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	631a      	str	r2, [r3, #48]	; 0x30
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	895b      	ldrh	r3, [r3, #10]
 80053a4:	461a      	mov	r2, r3
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d3e6      	bcc.n	800537a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad2      	subs	r2, r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80053be:	6979      	ldr	r1, [r7, #20]
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff fb77 	bl	8004ab4 <clust2sect>
 80053c6:	4602      	mov	r2, r0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	899b      	ldrh	r3, [r3, #12]
 80053dc:	461a      	mov	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80053e4:	fb00 f202 	mul.w	r2, r0, r2
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	18ca      	adds	r2, r1, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b086      	sub	sp, #24
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800540a:	2100      	movs	r1, #0
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff fe95 	bl	800513c <dir_sdi>
 8005412:	4603      	mov	r3, r0
 8005414:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005416:	7dfb      	ldrb	r3, [r7, #23]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d12b      	bne.n	8005474 <dir_alloc+0x7a>
		n = 0;
 800541c:	2300      	movs	r3, #0
 800541e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	4619      	mov	r1, r3
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7ff faa6 	bl	8004978 <move_window>
 800542c:	4603      	mov	r3, r0
 800542e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005430:	7dfb      	ldrb	r3, [r7, #23]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d11d      	bne.n	8005472 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2be5      	cmp	r3, #229	; 0xe5
 800543e:	d004      	beq.n	800544a <dir_alloc+0x50>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d107      	bne.n	800545a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	3301      	adds	r3, #1
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d102      	bne.n	800545e <dir_alloc+0x64>
 8005458:	e00c      	b.n	8005474 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800545a:	2300      	movs	r3, #0
 800545c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800545e:	2101      	movs	r1, #1
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff fef4 	bl	800524e <dir_next>
 8005466:	4603      	mov	r3, r0
 8005468:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800546a:	7dfb      	ldrb	r3, [r7, #23]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0d7      	beq.n	8005420 <dir_alloc+0x26>
 8005470:	e000      	b.n	8005474 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005472:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	2b04      	cmp	r3, #4
 8005478:	d101      	bne.n	800547e <dir_alloc+0x84>
 800547a:	2307      	movs	r3, #7
 800547c:	75fb      	strb	r3, [r7, #23]
	return res;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	331a      	adds	r3, #26
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe ffbe 	bl	8004418 <ld_word>
 800549c:	4603      	mov	r3, r0
 800549e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d109      	bne.n	80054bc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	3314      	adds	r3, #20
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fe ffb3 	bl	8004418 <ld_word>
 80054b2:	4603      	mov	r3, r0
 80054b4:	041b      	lsls	r3, r3, #16
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80054bc:	68fb      	ldr	r3, [r7, #12]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	331a      	adds	r3, #26
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	b292      	uxth	r2, r2
 80054da:	4611      	mov	r1, r2
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fe ffd6 	bl	800448e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d109      	bne.n	80054fe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f103 0214 	add.w	r2, r3, #20
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	0c1b      	lsrs	r3, r3, #16
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f7fe ffc8 	bl	800448e <st_word>
	}
}
 80054fe:	bf00      	nop
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b086      	sub	sp, #24
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005514:	2100      	movs	r1, #0
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff fe10 	bl	800513c <dir_sdi>
 800551c:	4603      	mov	r3, r0
 800551e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <dir_find+0x24>
 8005526:	7dfb      	ldrb	r3, [r7, #23]
 8005528:	e03e      	b.n	80055a8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	4619      	mov	r1, r3
 8005530:	6938      	ldr	r0, [r7, #16]
 8005532:	f7ff fa21 	bl	8004978 <move_window>
 8005536:	4603      	mov	r3, r0
 8005538:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800553a:	7dfb      	ldrb	r3, [r7, #23]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d12f      	bne.n	80055a0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d102      	bne.n	8005554 <dir_find+0x4e>
 800554e:	2304      	movs	r3, #4
 8005550:	75fb      	strb	r3, [r7, #23]
 8005552:	e028      	b.n	80055a6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	330b      	adds	r3, #11
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005560:	b2da      	uxtb	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	330b      	adds	r3, #11
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10a      	bne.n	800558c <dir_find+0x86>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a18      	ldr	r0, [r3, #32]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3324      	adds	r3, #36	; 0x24
 800557e:	220b      	movs	r2, #11
 8005580:	4619      	mov	r1, r3
 8005582:	f7ff f807 	bl	8004594 <mem_cmp>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00b      	beq.n	80055a4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800558c:	2100      	movs	r1, #0
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff fe5d 	bl	800524e <dir_next>
 8005594:	4603      	mov	r3, r0
 8005596:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0c5      	beq.n	800552a <dir_find+0x24>
 800559e:	e002      	b.n	80055a6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80055a0:	bf00      	nop
 80055a2:	e000      	b.n	80055a6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80055a4:	bf00      	nop

	return res;
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80055be:	2101      	movs	r1, #1
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff ff1a 	bl	80053fa <dir_alloc>
 80055c6:	4603      	mov	r3, r0
 80055c8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d11c      	bne.n	800560a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	4619      	mov	r1, r3
 80055d6:	68b8      	ldr	r0, [r7, #8]
 80055d8:	f7ff f9ce 	bl	8004978 <move_window>
 80055dc:	4603      	mov	r3, r0
 80055de:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d111      	bne.n	800560a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	2220      	movs	r2, #32
 80055ec:	2100      	movs	r1, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fe ffb5 	bl	800455e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a18      	ldr	r0, [r3, #32]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3324      	adds	r3, #36	; 0x24
 80055fc:	220b      	movs	r2, #11
 80055fe:	4619      	mov	r1, r3
 8005600:	f7fe ff8c 	bl	800451c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2201      	movs	r2, #1
 8005608:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800560a:	7bfb      	ldrb	r3, [r7, #15]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3324      	adds	r3, #36	; 0x24
 8005628:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800562a:	220b      	movs	r2, #11
 800562c:	2120      	movs	r1, #32
 800562e:	68b8      	ldr	r0, [r7, #8]
 8005630:	f7fe ff95 	bl	800455e <mem_set>
	si = i = 0; ni = 8;
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	61fb      	str	r3, [r7, #28]
 800563c:	2308      	movs	r3, #8
 800563e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	61fa      	str	r2, [r7, #28]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800564e:	7efb      	ldrb	r3, [r7, #27]
 8005650:	2b20      	cmp	r3, #32
 8005652:	d94e      	bls.n	80056f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005654:	7efb      	ldrb	r3, [r7, #27]
 8005656:	2b2f      	cmp	r3, #47	; 0x2f
 8005658:	d006      	beq.n	8005668 <create_name+0x54>
 800565a:	7efb      	ldrb	r3, [r7, #27]
 800565c:	2b5c      	cmp	r3, #92	; 0x5c
 800565e:	d110      	bne.n	8005682 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005660:	e002      	b.n	8005668 <create_name+0x54>
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	3301      	adds	r3, #1
 8005666:	61fb      	str	r3, [r7, #28]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4413      	add	r3, r2
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b2f      	cmp	r3, #47	; 0x2f
 8005672:	d0f6      	beq.n	8005662 <create_name+0x4e>
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b5c      	cmp	r3, #92	; 0x5c
 800567e:	d0f0      	beq.n	8005662 <create_name+0x4e>
			break;
 8005680:	e038      	b.n	80056f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005682:	7efb      	ldrb	r3, [r7, #27]
 8005684:	2b2e      	cmp	r3, #46	; 0x2e
 8005686:	d003      	beq.n	8005690 <create_name+0x7c>
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	429a      	cmp	r2, r3
 800568e:	d30c      	bcc.n	80056aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2b0b      	cmp	r3, #11
 8005694:	d002      	beq.n	800569c <create_name+0x88>
 8005696:	7efb      	ldrb	r3, [r7, #27]
 8005698:	2b2e      	cmp	r3, #46	; 0x2e
 800569a:	d001      	beq.n	80056a0 <create_name+0x8c>
 800569c:	2306      	movs	r3, #6
 800569e:	e044      	b.n	800572a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80056a0:	2308      	movs	r3, #8
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	230b      	movs	r3, #11
 80056a6:	617b      	str	r3, [r7, #20]
			continue;
 80056a8:	e022      	b.n	80056f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80056aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	da04      	bge.n	80056bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80056b2:	7efb      	ldrb	r3, [r7, #27]
 80056b4:	3b80      	subs	r3, #128	; 0x80
 80056b6:	4a1f      	ldr	r2, [pc, #124]	; (8005734 <create_name+0x120>)
 80056b8:	5cd3      	ldrb	r3, [r2, r3]
 80056ba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80056bc:	7efb      	ldrb	r3, [r7, #27]
 80056be:	4619      	mov	r1, r3
 80056c0:	481d      	ldr	r0, [pc, #116]	; (8005738 <create_name+0x124>)
 80056c2:	f7fe ff8e 	bl	80045e2 <chk_chr>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <create_name+0xbc>
 80056cc:	2306      	movs	r3, #6
 80056ce:	e02c      	b.n	800572a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80056d0:	7efb      	ldrb	r3, [r7, #27]
 80056d2:	2b60      	cmp	r3, #96	; 0x60
 80056d4:	d905      	bls.n	80056e2 <create_name+0xce>
 80056d6:	7efb      	ldrb	r3, [r7, #27]
 80056d8:	2b7a      	cmp	r3, #122	; 0x7a
 80056da:	d802      	bhi.n	80056e2 <create_name+0xce>
 80056dc:	7efb      	ldrb	r3, [r7, #27]
 80056de:	3b20      	subs	r3, #32
 80056e0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	613a      	str	r2, [r7, #16]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	4413      	add	r3, r2
 80056ec:	7efa      	ldrb	r2, [r7, #27]
 80056ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80056f0:	e7a6      	b.n	8005640 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80056f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	441a      	add	r2, r3
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <create_name+0xf4>
 8005704:	2306      	movs	r3, #6
 8005706:	e010      	b.n	800572a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2be5      	cmp	r3, #229	; 0xe5
 800570e:	d102      	bne.n	8005716 <create_name+0x102>
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2205      	movs	r2, #5
 8005714:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005716:	7efb      	ldrb	r3, [r7, #27]
 8005718:	2b20      	cmp	r3, #32
 800571a:	d801      	bhi.n	8005720 <create_name+0x10c>
 800571c:	2204      	movs	r2, #4
 800571e:	e000      	b.n	8005722 <create_name+0x10e>
 8005720:	2200      	movs	r2, #0
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	330b      	adds	r3, #11
 8005726:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005728:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	0800bcd8 	.word	0x0800bcd8
 8005738:	0800bc1c 	.word	0x0800bc1c

0800573c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005750:	e002      	b.n	8005758 <follow_path+0x1c>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b2f      	cmp	r3, #47	; 0x2f
 800575e:	d0f8      	beq.n	8005752 <follow_path+0x16>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b5c      	cmp	r3, #92	; 0x5c
 8005766:	d0f4      	beq.n	8005752 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	2200      	movs	r2, #0
 800576c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b1f      	cmp	r3, #31
 8005774:	d80a      	bhi.n	800578c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2280      	movs	r2, #128	; 0x80
 800577a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800577e:	2100      	movs	r1, #0
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fcdb 	bl	800513c <dir_sdi>
 8005786:	4603      	mov	r3, r0
 8005788:	75fb      	strb	r3, [r7, #23]
 800578a:	e048      	b.n	800581e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800578c:	463b      	mov	r3, r7
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff ff3f 	bl	8005614 <create_name>
 8005796:	4603      	mov	r3, r0
 8005798:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800579a:	7dfb      	ldrb	r3, [r7, #23]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d139      	bne.n	8005814 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff feb0 	bl	8005506 <dir_find>
 80057a6:	4603      	mov	r3, r0
 80057a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80057b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00a      	beq.n	80057ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d12c      	bne.n	8005818 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80057be:	7afb      	ldrb	r3, [r7, #11]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d127      	bne.n	8005818 <follow_path+0xdc>
 80057c8:	2305      	movs	r3, #5
 80057ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80057cc:	e024      	b.n	8005818 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80057ce:	7afb      	ldrb	r3, [r7, #11]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d121      	bne.n	800581c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	799b      	ldrb	r3, [r3, #6]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 80057e4:	2305      	movs	r3, #5
 80057e6:	75fb      	strb	r3, [r7, #23]
 80057e8:	e019      	b.n	800581e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	8992      	ldrh	r2, [r2, #12]
 80057f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80057fc:	fb00 f202 	mul.w	r2, r0, r2
 8005800:	1a9b      	subs	r3, r3, r2
 8005802:	440b      	add	r3, r1
 8005804:	4619      	mov	r1, r3
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7ff fe3e 	bl	8005488 <ld_clust>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005812:	e7bb      	b.n	800578c <follow_path+0x50>
			if (res != FR_OK) break;
 8005814:	bf00      	nop
 8005816:	e002      	b.n	800581e <follow_path+0xe2>
				break;
 8005818:	bf00      	nop
 800581a:	e000      	b.n	800581e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800581c:	bf00      	nop
			}
		}
	}

	return res;
 800581e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005830:	f04f 33ff 	mov.w	r3, #4294967295
 8005834:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d031      	beq.n	80058a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e002      	b.n	800584c <get_ldnumber+0x24>
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	3301      	adds	r3, #1
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b20      	cmp	r3, #32
 8005852:	d903      	bls.n	800585c <get_ldnumber+0x34>
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b3a      	cmp	r3, #58	; 0x3a
 800585a:	d1f4      	bne.n	8005846 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b3a      	cmp	r3, #58	; 0x3a
 8005862:	d11c      	bne.n	800589e <get_ldnumber+0x76>
			tp = *path;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	60fa      	str	r2, [r7, #12]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	3b30      	subs	r3, #48	; 0x30
 8005874:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b09      	cmp	r3, #9
 800587a:	d80e      	bhi.n	800589a <get_ldnumber+0x72>
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	429a      	cmp	r2, r3
 8005882:	d10a      	bne.n	800589a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d107      	bne.n	800589a <get_ldnumber+0x72>
					vol = (int)i;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	3301      	adds	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	e002      	b.n	80058a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800589e:	2300      	movs	r3, #0
 80058a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80058a2:	693b      	ldr	r3, [r7, #16]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	70da      	strb	r2, [r3, #3]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f04f 32ff 	mov.w	r2, #4294967295
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff f854 	bl	8004978 <move_window>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <check_fs+0x2a>
 80058d6:	2304      	movs	r3, #4
 80058d8:	e038      	b.n	800594c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3334      	adds	r3, #52	; 0x34
 80058de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fe fd98 	bl	8004418 <ld_word>
 80058e8:	4603      	mov	r3, r0
 80058ea:	461a      	mov	r2, r3
 80058ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <check_fs+0x48>
 80058f4:	2303      	movs	r3, #3
 80058f6:	e029      	b.n	800594c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058fe:	2be9      	cmp	r3, #233	; 0xe9
 8005900:	d009      	beq.n	8005916 <check_fs+0x66>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005908:	2beb      	cmp	r3, #235	; 0xeb
 800590a:	d11e      	bne.n	800594a <check_fs+0x9a>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005912:	2b90      	cmp	r3, #144	; 0x90
 8005914:	d119      	bne.n	800594a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3334      	adds	r3, #52	; 0x34
 800591a:	3336      	adds	r3, #54	; 0x36
 800591c:	4618      	mov	r0, r3
 800591e:	f7fe fd93 	bl	8004448 <ld_dword>
 8005922:	4603      	mov	r3, r0
 8005924:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005928:	4a0a      	ldr	r2, [pc, #40]	; (8005954 <check_fs+0xa4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d101      	bne.n	8005932 <check_fs+0x82>
 800592e:	2300      	movs	r3, #0
 8005930:	e00c      	b.n	800594c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3334      	adds	r3, #52	; 0x34
 8005936:	3352      	adds	r3, #82	; 0x52
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe fd85 	bl	8004448 <ld_dword>
 800593e:	4603      	mov	r3, r0
 8005940:	4a05      	ldr	r2, [pc, #20]	; (8005958 <check_fs+0xa8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d101      	bne.n	800594a <check_fs+0x9a>
 8005946:	2300      	movs	r3, #0
 8005948:	e000      	b.n	800594c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800594a:	2302      	movs	r3, #2
}
 800594c:	4618      	mov	r0, r3
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	00544146 	.word	0x00544146
 8005958:	33544146 	.word	0x33544146

0800595c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b096      	sub	sp, #88	; 0x58
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff ff59 	bl	8005828 <get_ldnumber>
 8005976:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597a:	2b00      	cmp	r3, #0
 800597c:	da01      	bge.n	8005982 <find_volume+0x26>
 800597e:	230b      	movs	r3, #11
 8005980:	e262      	b.n	8005e48 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005982:	4a9f      	ldr	r2, [pc, #636]	; (8005c00 <find_volume+0x2a4>)
 8005984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800598a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <find_volume+0x3a>
 8005992:	230c      	movs	r3, #12
 8005994:	e258      	b.n	8005e48 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800599a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800599c:	79fb      	ldrb	r3, [r7, #7]
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01a      	beq.n	80059e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fe fc93 	bl	80042dc <disk_status>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80059bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10c      	bne.n	80059e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d007      	beq.n	80059de <find_volume+0x82>
 80059ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80059da:	230a      	movs	r3, #10
 80059dc:	e234      	b.n	8005e48 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80059de:	2300      	movs	r3, #0
 80059e0:	e232      	b.n	8005e48 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80059e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	785b      	ldrb	r3, [r3, #1]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe fc8b 	bl	8004310 <disk_initialize>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005a00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e21b      	b.n	8005e48 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d007      	beq.n	8005a26 <find_volume+0xca>
 8005a16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005a22:	230a      	movs	r3, #10
 8005a24:	e210      	b.n	8005e48 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	7858      	ldrb	r0, [r3, #1]
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2c:	330c      	adds	r3, #12
 8005a2e:	461a      	mov	r2, r3
 8005a30:	2102      	movs	r1, #2
 8005a32:	f7fe fcd3 	bl	80043dc <disk_ioctl>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <find_volume+0xe4>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e203      	b.n	8005e48 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a42:	899b      	ldrh	r3, [r3, #12]
 8005a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a48:	d80d      	bhi.n	8005a66 <find_volume+0x10a>
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	899b      	ldrh	r3, [r3, #12]
 8005a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a52:	d308      	bcc.n	8005a66 <find_volume+0x10a>
 8005a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a56:	899b      	ldrh	r3, [r3, #12]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	899b      	ldrh	r3, [r3, #12]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <find_volume+0x10e>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e1ee      	b.n	8005e48 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005a6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a72:	f7ff ff1d 	bl	80058b0 <check_fs>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005a7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d149      	bne.n	8005b18 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a84:	2300      	movs	r3, #0
 8005a86:	643b      	str	r3, [r7, #64]	; 0x40
 8005a88:	e01e      	b.n	8005ac8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005a98:	4413      	add	r3, r2
 8005a9a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d006      	beq.n	8005ab4 <find_volume+0x158>
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fe fccc 	bl	8004448 <ld_dword>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	e000      	b.n	8005ab6 <find_volume+0x15a>
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	3358      	adds	r3, #88	; 0x58
 8005abc:	443b      	add	r3, r7
 8005abe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d9dd      	bls.n	8005a8a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005ace:	2300      	movs	r3, #0
 8005ad0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <find_volume+0x182>
 8005ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ada:	3b01      	subs	r3, #1
 8005adc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	3358      	adds	r3, #88	; 0x58
 8005ae4:	443b      	add	r3, r7
 8005ae6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005aea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <find_volume+0x1a2>
 8005af2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005af4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005af6:	f7ff fedb 	bl	80058b0 <check_fs>
 8005afa:	4603      	mov	r3, r0
 8005afc:	e000      	b.n	8005b00 <find_volume+0x1a4>
 8005afe:	2303      	movs	r3, #3
 8005b00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005b04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d905      	bls.n	8005b18 <find_volume+0x1bc>
 8005b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0e:	3301      	adds	r3, #1
 8005b10:	643b      	str	r3, [r7, #64]	; 0x40
 8005b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d9e2      	bls.n	8005ade <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005b18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d101      	bne.n	8005b24 <find_volume+0x1c8>
 8005b20:	2301      	movs	r3, #1
 8005b22:	e191      	b.n	8005e48 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005b24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d901      	bls.n	8005b30 <find_volume+0x1d4>
 8005b2c:	230d      	movs	r3, #13
 8005b2e:	e18b      	b.n	8005e48 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	3334      	adds	r3, #52	; 0x34
 8005b34:	330b      	adds	r3, #11
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe fc6e 	bl	8004418 <ld_word>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	461a      	mov	r2, r3
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	899b      	ldrh	r3, [r3, #12]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d001      	beq.n	8005b4c <find_volume+0x1f0>
 8005b48:	230d      	movs	r3, #13
 8005b4a:	e17d      	b.n	8005e48 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	3334      	adds	r3, #52	; 0x34
 8005b50:	3316      	adds	r3, #22
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe fc60 	bl	8004418 <ld_word>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <find_volume+0x214>
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	3334      	adds	r3, #52	; 0x34
 8005b66:	3324      	adds	r3, #36	; 0x24
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fe fc6d 	bl	8004448 <ld_dword>
 8005b6e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b74:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b82:	789b      	ldrb	r3, [r3, #2]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d005      	beq.n	8005b94 <find_volume+0x238>
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	789b      	ldrb	r3, [r3, #2]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d001      	beq.n	8005b94 <find_volume+0x238>
 8005b90:	230d      	movs	r3, #13
 8005b92:	e159      	b.n	8005e48 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b96:	789b      	ldrb	r3, [r3, #2]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	895b      	ldrh	r3, [r3, #10]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d008      	beq.n	8005bc8 <find_volume+0x26c>
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb8:	895b      	ldrh	r3, [r3, #10]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	895b      	ldrh	r3, [r3, #10]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <find_volume+0x270>
 8005bc8:	230d      	movs	r3, #13
 8005bca:	e13d      	b.n	8005e48 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	3334      	adds	r3, #52	; 0x34
 8005bd0:	3311      	adds	r3, #17
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fe fc20 	bl	8004418 <ld_word>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bde:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be2:	891b      	ldrh	r3, [r3, #8]
 8005be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be6:	8992      	ldrh	r2, [r2, #12]
 8005be8:	0952      	lsrs	r2, r2, #5
 8005bea:	b292      	uxth	r2, r2
 8005bec:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bf0:	fb01 f202 	mul.w	r2, r1, r2
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <find_volume+0x2a8>
 8005bfc:	230d      	movs	r3, #13
 8005bfe:	e123      	b.n	8005e48 <find_volume+0x4ec>
 8005c00:	200047c0 	.word	0x200047c0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	3334      	adds	r3, #52	; 0x34
 8005c08:	3313      	adds	r3, #19
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fe fc04 	bl	8004418 <ld_word>
 8005c10:	4603      	mov	r3, r0
 8005c12:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <find_volume+0x2cc>
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1c:	3334      	adds	r3, #52	; 0x34
 8005c1e:	3320      	adds	r3, #32
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe fc11 	bl	8004448 <ld_dword>
 8005c26:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	3334      	adds	r3, #52	; 0x34
 8005c2c:	330e      	adds	r3, #14
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe fbf2 	bl	8004418 <ld_word>
 8005c34:	4603      	mov	r3, r0
 8005c36:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005c38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <find_volume+0x2e6>
 8005c3e:	230d      	movs	r3, #13
 8005c40:	e102      	b.n	8005e48 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005c42:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c46:	4413      	add	r3, r2
 8005c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c4a:	8911      	ldrh	r1, [r2, #8]
 8005c4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c4e:	8992      	ldrh	r2, [r2, #12]
 8005c50:	0952      	lsrs	r2, r2, #5
 8005c52:	b292      	uxth	r2, r2
 8005c54:	fbb1 f2f2 	udiv	r2, r1, r2
 8005c58:	b292      	uxth	r2, r2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d201      	bcs.n	8005c6a <find_volume+0x30e>
 8005c66:	230d      	movs	r3, #13
 8005c68:	e0ee      	b.n	8005e48 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c72:	8952      	ldrh	r2, [r2, #10]
 8005c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <find_volume+0x328>
 8005c80:	230d      	movs	r3, #13
 8005c82:	e0e1      	b.n	8005e48 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8005c84:	2303      	movs	r3, #3
 8005c86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d802      	bhi.n	8005c9a <find_volume+0x33e>
 8005c94:	2302      	movs	r3, #2
 8005c96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d802      	bhi.n	8005caa <find_volume+0x34e>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	1c9a      	adds	r2, r3, #2
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cb6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005cb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cbc:	441a      	add	r2, r3
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005cc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	441a      	add	r2, r3
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005ccc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d11e      	bne.n	8005d12 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	3334      	adds	r3, #52	; 0x34
 8005cd8:	332a      	adds	r3, #42	; 0x2a
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe fb9c 	bl	8004418 <ld_word>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <find_volume+0x38e>
 8005ce6:	230d      	movs	r3, #13
 8005ce8:	e0ae      	b.n	8005e48 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	891b      	ldrh	r3, [r3, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <find_volume+0x39a>
 8005cf2:	230d      	movs	r3, #13
 8005cf4:	e0a8      	b.n	8005e48 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	3334      	adds	r3, #52	; 0x34
 8005cfa:	332c      	adds	r3, #44	; 0x2c
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fe fba3 	bl	8004448 <ld_dword>
 8005d02:	4602      	mov	r2, r0
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d10:	e01f      	b.n	8005d52 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	891b      	ldrh	r3, [r3, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <find_volume+0x3c2>
 8005d1a:	230d      	movs	r3, #13
 8005d1c:	e094      	b.n	8005e48 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d24:	441a      	add	r2, r3
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005d2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d103      	bne.n	8005d3a <find_volume+0x3de>
 8005d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	e00a      	b.n	8005d50 <find_volume+0x3f4>
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	4413      	add	r3, r2
 8005d44:	085a      	lsrs	r2, r3, #1
 8005d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005d50:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	69da      	ldr	r2, [r3, #28]
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	899b      	ldrh	r3, [r3, #12]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d5e:	440b      	add	r3, r1
 8005d60:	3b01      	subs	r3, #1
 8005d62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d64:	8989      	ldrh	r1, [r1, #12]
 8005d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d201      	bcs.n	8005d72 <find_volume+0x416>
 8005d6e:	230d      	movs	r3, #13
 8005d70:	e06a      	b.n	8005e48 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	f04f 32ff 	mov.w	r2, #4294967295
 8005d78:	615a      	str	r2, [r3, #20]
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	695a      	ldr	r2, [r3, #20]
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	2280      	movs	r2, #128	; 0x80
 8005d86:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005d88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d8c:	2b03      	cmp	r3, #3
 8005d8e:	d149      	bne.n	8005e24 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d92:	3334      	adds	r3, #52	; 0x34
 8005d94:	3330      	adds	r3, #48	; 0x30
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fe fb3e 	bl	8004418 <ld_word>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d140      	bne.n	8005e24 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da4:	3301      	adds	r3, #1
 8005da6:	4619      	mov	r1, r3
 8005da8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005daa:	f7fe fde5 	bl	8004978 <move_window>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d137      	bne.n	8005e24 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	2200      	movs	r2, #0
 8005db8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	3334      	adds	r3, #52	; 0x34
 8005dbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fe fb28 	bl	8004418 <ld_word>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d127      	bne.n	8005e24 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	3334      	adds	r3, #52	; 0x34
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fe fb35 	bl	8004448 <ld_dword>
 8005dde:	4603      	mov	r3, r0
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <find_volume+0x4f4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d11e      	bne.n	8005e24 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	3334      	adds	r3, #52	; 0x34
 8005dea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fe fb2a 	bl	8004448 <ld_dword>
 8005df4:	4603      	mov	r3, r0
 8005df6:	4a17      	ldr	r2, [pc, #92]	; (8005e54 <find_volume+0x4f8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d113      	bne.n	8005e24 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	3334      	adds	r3, #52	; 0x34
 8005e00:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fe fb1f 	bl	8004448 <ld_dword>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e12:	3334      	adds	r3, #52	; 0x34
 8005e14:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fe fb15 	bl	8004448 <ld_dword>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e22:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005e2a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <find_volume+0x4fc>)
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	3301      	adds	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	4b08      	ldr	r3, [pc, #32]	; (8005e58 <find_volume+0x4fc>)
 8005e36:	801a      	strh	r2, [r3, #0]
 8005e38:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <find_volume+0x4fc>)
 8005e3a:	881a      	ldrh	r2, [r3, #0]
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005e40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e42:	f7fe fd31 	bl	80048a8 <clear_lock>
#endif
	return FR_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3758      	adds	r7, #88	; 0x58
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	41615252 	.word	0x41615252
 8005e54:	61417272 	.word	0x61417272
 8005e58:	200047c4 	.word	0x200047c4

08005e5c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005e66:	2309      	movs	r3, #9
 8005e68:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01c      	beq.n	8005eaa <validate+0x4e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d018      	beq.n	8005eaa <validate+0x4e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d013      	beq.n	8005eaa <validate+0x4e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	889a      	ldrh	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	88db      	ldrh	r3, [r3, #6]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d10c      	bne.n	8005eaa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	785b      	ldrb	r3, [r3, #1]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe fa20 	bl	80042dc <disk_status>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <validate+0x4e>
			res = FR_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <validate+0x5a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	e000      	b.n	8005eb8 <validate+0x5c>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	6013      	str	r3, [r2, #0]
	return res;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
	...

08005ec8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005eda:	f107 0310 	add.w	r3, r7, #16
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff fca2 	bl	8005828 <get_ldnumber>
 8005ee4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	da01      	bge.n	8005ef0 <f_mount+0x28>
 8005eec:	230b      	movs	r3, #11
 8005eee:	e02b      	b.n	8005f48 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005ef0:	4a17      	ldr	r2, [pc, #92]	; (8005f50 <f_mount+0x88>)
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d005      	beq.n	8005f0c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005f00:	69b8      	ldr	r0, [r7, #24]
 8005f02:	f7fe fcd1 	bl	80048a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	490d      	ldr	r1, [pc, #52]	; (8005f50 <f_mount+0x88>)
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <f_mount+0x66>
 8005f28:	79fb      	ldrb	r3, [r7, #7]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d001      	beq.n	8005f32 <f_mount+0x6a>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e00a      	b.n	8005f48 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005f32:	f107 010c 	add.w	r1, r7, #12
 8005f36:	f107 0308 	add.w	r3, r7, #8
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff fd0d 	bl	800595c <find_volume>
 8005f42:	4603      	mov	r3, r0
 8005f44:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	200047c0 	.word	0x200047c0

08005f54 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b098      	sub	sp, #96	; 0x60
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <f_open+0x18>
 8005f68:	2309      	movs	r3, #9
 8005f6a:	e1bb      	b.n	80062e4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005f6c:	79fb      	ldrb	r3, [r7, #7]
 8005f6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f72:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005f74:	79fa      	ldrb	r2, [r7, #7]
 8005f76:	f107 0110 	add.w	r1, r7, #16
 8005f7a:	f107 0308 	add.w	r3, r7, #8
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff fcec 	bl	800595c <find_volume>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 819f 	bne.w	80062d2 <f_open+0x37e>
		dj.obj.fs = fs;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	f107 0314 	add.w	r3, r7, #20
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7ff fbcb 	bl	800573c <follow_path>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005fac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11a      	bne.n	8005fea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005fb4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005fb8:	b25b      	sxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	da03      	bge.n	8005fc6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8005fbe:	2306      	movs	r3, #6
 8005fc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005fc4:	e011      	b.n	8005fea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	f023 0301 	bic.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	bf14      	ite	ne
 8005fd0:	2301      	movne	r3, #1
 8005fd2:	2300      	moveq	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f107 0314 	add.w	r3, r7, #20
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fb1a 	bl	8004618 <chk_lock>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	f003 031c 	and.w	r3, r3, #28
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d07f      	beq.n	80060f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005ff4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d017      	beq.n	800602c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005ffc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006000:	2b04      	cmp	r3, #4
 8006002:	d10e      	bne.n	8006022 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006004:	f7fe fb64 	bl	80046d0 <enq_lock>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d006      	beq.n	800601c <f_open+0xc8>
 800600e:	f107 0314 	add.w	r3, r7, #20
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff facc 	bl	80055b0 <dir_register>
 8006018:	4603      	mov	r3, r0
 800601a:	e000      	b.n	800601e <f_open+0xca>
 800601c:	2312      	movs	r3, #18
 800601e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	f043 0308 	orr.w	r3, r3, #8
 8006028:	71fb      	strb	r3, [r7, #7]
 800602a:	e010      	b.n	800604e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800602c:	7ebb      	ldrb	r3, [r7, #26]
 800602e:	f003 0311 	and.w	r3, r3, #17
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <f_open+0xea>
					res = FR_DENIED;
 8006036:	2307      	movs	r3, #7
 8006038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800603c:	e007      	b.n	800604e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800603e:	79fb      	ldrb	r3, [r7, #7]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <f_open+0xfa>
 8006048:	2308      	movs	r3, #8
 800604a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800604e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006052:	2b00      	cmp	r3, #0
 8006054:	d168      	bne.n	8006128 <f_open+0x1d4>
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b00      	cmp	r3, #0
 800605e:	d063      	beq.n	8006128 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006060:	f7fe f8da 	bl	8004218 <get_fattime>
 8006064:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006068:	330e      	adds	r3, #14
 800606a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800606c:	4618      	mov	r0, r3
 800606e:	f7fe fa29 	bl	80044c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006074:	3316      	adds	r3, #22
 8006076:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006078:	4618      	mov	r0, r3
 800607a:	f7fe fa23 	bl	80044c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006080:	330b      	adds	r3, #11
 8006082:	2220      	movs	r2, #32
 8006084:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800608a:	4611      	mov	r1, r2
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff f9fb 	bl	8005488 <ld_clust>
 8006092:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006098:	2200      	movs	r2, #0
 800609a:	4618      	mov	r0, r3
 800609c:	f7ff fa13 	bl	80054c6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80060a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a2:	331c      	adds	r3, #28
 80060a4:	2100      	movs	r1, #0
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fe fa0c 	bl	80044c4 <st_dword>
					fs->wflag = 1;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2201      	movs	r2, #1
 80060b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80060b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d037      	beq.n	8006128 <f_open+0x1d4>
						dw = fs->winsect;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80060be:	f107 0314 	add.w	r3, r7, #20
 80060c2:	2200      	movs	r2, #0
 80060c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe ff03 	bl	8004ed2 <remove_chain>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80060d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d126      	bne.n	8006128 <f_open+0x1d4>
							res = move_window(fs, dw);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fe fc4a 	bl	8004978 <move_window>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060ee:	3a01      	subs	r2, #1
 80060f0:	611a      	str	r2, [r3, #16]
 80060f2:	e019      	b.n	8006128 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80060f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d115      	bne.n	8006128 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80060fc:	7ebb      	ldrb	r3, [r7, #26]
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <f_open+0x1ba>
					res = FR_NO_FILE;
 8006106:	2304      	movs	r3, #4
 8006108:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800610c:	e00c      	b.n	8006128 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d007      	beq.n	8006128 <f_open+0x1d4>
 8006118:	7ebb      	ldrb	r3, [r7, #26]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <f_open+0x1d4>
						res = FR_DENIED;
 8006122:	2307      	movs	r3, #7
 8006124:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006128:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800612c:	2b00      	cmp	r3, #0
 800612e:	d128      	bne.n	8006182 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006140:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800614a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	f023 0301 	bic.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	bf14      	ite	ne
 800615a:	2301      	movne	r3, #1
 800615c:	2300      	moveq	r3, #0
 800615e:	b2db      	uxtb	r3, r3
 8006160:	461a      	mov	r2, r3
 8006162:	f107 0314 	add.w	r3, r7, #20
 8006166:	4611      	mov	r1, r2
 8006168:	4618      	mov	r0, r3
 800616a:	f7fe fad3 	bl	8004714 <inc_lock>
 800616e:	4602      	mov	r2, r0
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <f_open+0x22e>
 800617c:	2302      	movs	r3, #2
 800617e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006186:	2b00      	cmp	r3, #0
 8006188:	f040 80a3 	bne.w	80062d2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006190:	4611      	mov	r1, r2
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff f978 	bl	8005488 <ld_clust>
 8006198:	4602      	mov	r2, r0
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800619e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a0:	331c      	adds	r3, #28
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fe f950 	bl	8004448 <ld_dword>
 80061a8:	4602      	mov	r2, r0
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	88da      	ldrh	r2, [r3, #6]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	79fa      	ldrb	r2, [r7, #7]
 80061c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3330      	adds	r3, #48	; 0x30
 80061de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061e2:	2100      	movs	r1, #0
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fe f9ba 	bl	800455e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d06e      	beq.n	80062d2 <f_open+0x37e>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d06a      	beq.n	80062d2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	895b      	ldrh	r3, [r3, #10]
 8006208:	461a      	mov	r2, r3
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	899b      	ldrh	r3, [r3, #12]
 800620e:	fb02 f303 	mul.w	r3, r2, r3
 8006212:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	657b      	str	r3, [r7, #84]	; 0x54
 8006220:	e016      	b.n	8006250 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006226:	4618      	mov	r0, r3
 8006228:	f7fe fc63 	bl	8004af2 <get_fat>
 800622c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800622e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006230:	2b01      	cmp	r3, #1
 8006232:	d802      	bhi.n	800623a <f_open+0x2e6>
 8006234:	2302      	movs	r3, #2
 8006236:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800623a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800623c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006240:	d102      	bne.n	8006248 <f_open+0x2f4>
 8006242:	2301      	movs	r3, #1
 8006244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006248:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800624a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	657b      	str	r3, [r7, #84]	; 0x54
 8006250:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006254:	2b00      	cmp	r3, #0
 8006256:	d103      	bne.n	8006260 <f_open+0x30c>
 8006258:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800625a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800625c:	429a      	cmp	r2, r3
 800625e:	d8e0      	bhi.n	8006222 <f_open+0x2ce>
				}
				fp->clust = clst;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006264:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800626a:	2b00      	cmp	r3, #0
 800626c:	d131      	bne.n	80062d2 <f_open+0x37e>
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	899b      	ldrh	r3, [r3, #12]
 8006272:	461a      	mov	r2, r3
 8006274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006276:	fbb3 f1f2 	udiv	r1, r3, r2
 800627a:	fb01 f202 	mul.w	r2, r1, r2
 800627e:	1a9b      	subs	r3, r3, r2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d026      	beq.n	80062d2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006288:	4618      	mov	r0, r3
 800628a:	f7fe fc13 	bl	8004ab4 <clust2sect>
 800628e:	6478      	str	r0, [r7, #68]	; 0x44
 8006290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006292:	2b00      	cmp	r3, #0
 8006294:	d103      	bne.n	800629e <f_open+0x34a>
						res = FR_INT_ERR;
 8006296:	2302      	movs	r3, #2
 8006298:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800629c:	e019      	b.n	80062d2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	899b      	ldrh	r3, [r3, #12]
 80062a2:	461a      	mov	r2, r3
 80062a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80062aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ac:	441a      	add	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	7858      	ldrb	r0, [r3, #1]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a1a      	ldr	r2, [r3, #32]
 80062c0:	2301      	movs	r3, #1
 80062c2:	f7fe f84b 	bl	800435c <disk_read>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <f_open+0x37e>
 80062cc:	2301      	movs	r3, #1
 80062ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80062d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <f_open+0x38c>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80062e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3760      	adds	r7, #96	; 0x60
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08e      	sub	sp, #56	; 0x38
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f107 0214 	add.w	r2, r7, #20
 800630a:	4611      	mov	r1, r2
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff fda5 	bl	8005e5c <validate>
 8006312:	4603      	mov	r3, r0
 8006314:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006318:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800631c:	2b00      	cmp	r3, #0
 800631e:	d107      	bne.n	8006330 <f_read+0x44>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	7d5b      	ldrb	r3, [r3, #21]
 8006324:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006328:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <f_read+0x4a>
 8006330:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006334:	e135      	b.n	80065a2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	7d1b      	ldrb	r3, [r3, #20]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <f_read+0x5a>
 8006342:	2307      	movs	r3, #7
 8006344:	e12d      	b.n	80065a2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	429a      	cmp	r2, r3
 8006358:	f240 811e 	bls.w	8006598 <f_read+0x2ac>
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006360:	e11a      	b.n	8006598 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	8992      	ldrh	r2, [r2, #12]
 800636a:	fbb3 f1f2 	udiv	r1, r3, r2
 800636e:	fb01 f202 	mul.w	r2, r1, r2
 8006372:	1a9b      	subs	r3, r3, r2
 8006374:	2b00      	cmp	r3, #0
 8006376:	f040 80d5 	bne.w	8006524 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	8992      	ldrh	r2, [r2, #12]
 8006382:	fbb3 f3f2 	udiv	r3, r3, r2
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	8952      	ldrh	r2, [r2, #10]
 800638a:	3a01      	subs	r2, #1
 800638c:	4013      	ands	r3, r2
 800638e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d12f      	bne.n	80063f6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d103      	bne.n	80063a6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	633b      	str	r3, [r7, #48]	; 0x30
 80063a4:	e013      	b.n	80063ce <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	4619      	mov	r1, r3
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7fe fe89 	bl	80050cc <clmt_clust>
 80063ba:	6338      	str	r0, [r7, #48]	; 0x30
 80063bc:	e007      	b.n	80063ce <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f7fe fb93 	bl	8004af2 <get_fat>
 80063cc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d804      	bhi.n	80063de <f_read+0xf2>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2202      	movs	r2, #2
 80063d8:	755a      	strb	r2, [r3, #21]
 80063da:	2302      	movs	r3, #2
 80063dc:	e0e1      	b.n	80065a2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e4:	d104      	bne.n	80063f0 <f_read+0x104>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	755a      	strb	r2, [r3, #21]
 80063ec:	2301      	movs	r3, #1
 80063ee:	e0d8      	b.n	80065a2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f7fe fb58 	bl	8004ab4 <clust2sect>
 8006404:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d104      	bne.n	8006416 <f_read+0x12a>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2202      	movs	r2, #2
 8006410:	755a      	strb	r2, [r3, #21]
 8006412:	2302      	movs	r3, #2
 8006414:	e0c5      	b.n	80065a2 <f_read+0x2b6>
			sect += csect;
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	4413      	add	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	899b      	ldrh	r3, [r3, #12]
 8006422:	461a      	mov	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	fbb3 f3f2 	udiv	r3, r3, r2
 800642a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	2b00      	cmp	r3, #0
 8006430:	d041      	beq.n	80064b6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	4413      	add	r3, r2
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	8952      	ldrh	r2, [r2, #10]
 800643c:	4293      	cmp	r3, r2
 800643e:	d905      	bls.n	800644c <f_read+0x160>
					cc = fs->csize - csect;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	895b      	ldrh	r3, [r3, #10]
 8006444:	461a      	mov	r2, r3
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	7858      	ldrb	r0, [r3, #1]
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006456:	f7fd ff81 	bl	800435c <disk_read>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <f_read+0x17e>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	755a      	strb	r2, [r3, #21]
 8006466:	2301      	movs	r3, #1
 8006468:	e09b      	b.n	80065a2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	7d1b      	ldrb	r3, [r3, #20]
 800646e:	b25b      	sxtb	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	da18      	bge.n	80064a6 <f_read+0x1ba>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a1a      	ldr	r2, [r3, #32]
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800647e:	429a      	cmp	r2, r3
 8006480:	d911      	bls.n	80064a6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a1a      	ldr	r2, [r3, #32]
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	8992      	ldrh	r2, [r2, #12]
 800648e:	fb02 f303 	mul.w	r3, r2, r3
 8006492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006494:	18d0      	adds	r0, r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	899b      	ldrh	r3, [r3, #12]
 80064a0:	461a      	mov	r2, r3
 80064a2:	f7fe f83b 	bl	800451c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	899b      	ldrh	r3, [r3, #12]
 80064aa:	461a      	mov	r2, r3
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	fb02 f303 	mul.w	r3, r2, r3
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80064b4:	e05c      	b.n	8006570 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d02e      	beq.n	800651e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	7d1b      	ldrb	r3, [r3, #20]
 80064c4:	b25b      	sxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	da18      	bge.n	80064fc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	7858      	ldrb	r0, [r3, #1]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a1a      	ldr	r2, [r3, #32]
 80064d8:	2301      	movs	r3, #1
 80064da:	f7fd ff5f 	bl	800439c <disk_write>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d004      	beq.n	80064ee <f_read+0x202>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	755a      	strb	r2, [r3, #21]
 80064ea:	2301      	movs	r3, #1
 80064ec:	e059      	b.n	80065a2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	7d1b      	ldrb	r3, [r3, #20]
 80064f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	7858      	ldrb	r0, [r3, #1]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006506:	2301      	movs	r3, #1
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	f7fd ff27 	bl	800435c <disk_read>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d004      	beq.n	800651e <f_read+0x232>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	755a      	strb	r2, [r3, #21]
 800651a:	2301      	movs	r3, #1
 800651c:	e041      	b.n	80065a2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	899b      	ldrh	r3, [r3, #12]
 8006528:	4618      	mov	r0, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	8992      	ldrh	r2, [r2, #12]
 8006532:	fbb3 f1f2 	udiv	r1, r3, r2
 8006536:	fb01 f202 	mul.w	r2, r1, r2
 800653a:	1a9b      	subs	r3, r3, r2
 800653c:	1ac3      	subs	r3, r0, r3
 800653e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	429a      	cmp	r2, r3
 8006546:	d901      	bls.n	800654c <f_read+0x260>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	8992      	ldrh	r2, [r2, #12]
 800655a:	fbb3 f0f2 	udiv	r0, r3, r2
 800655e:	fb00 f202 	mul.w	r2, r0, r2
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	440b      	add	r3, r1
 8006566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006568:	4619      	mov	r1, r3
 800656a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800656c:	f7fd ffd6 	bl	800451c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006574:	4413      	add	r3, r2
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	699a      	ldr	r2, [r3, #24]
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	441a      	add	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	619a      	str	r2, [r3, #24]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658a:	441a      	add	r2, r3
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	f47f aee1 	bne.w	8006362 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3738      	adds	r7, #56	; 0x38
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b08c      	sub	sp, #48	; 0x30
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	60f8      	str	r0, [r7, #12]
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	607a      	str	r2, [r7, #4]
 80065b6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f107 0210 	add.w	r2, r7, #16
 80065c8:	4611      	mov	r1, r2
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fc46 	bl	8005e5c <validate>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80065d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d107      	bne.n	80065ee <f_write+0x44>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	7d5b      	ldrb	r3, [r3, #21]
 80065e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80065e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <f_write+0x4a>
 80065ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065f2:	e16a      	b.n	80068ca <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	7d1b      	ldrb	r3, [r3, #20]
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <f_write+0x5a>
 8006600:	2307      	movs	r3, #7
 8006602:	e162      	b.n	80068ca <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	699a      	ldr	r2, [r3, #24]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	441a      	add	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	429a      	cmp	r2, r3
 8006612:	f080 814c 	bcs.w	80068ae <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	43db      	mvns	r3, r3
 800661c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800661e:	e146      	b.n	80068ae <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	8992      	ldrh	r2, [r2, #12]
 8006628:	fbb3 f1f2 	udiv	r1, r3, r2
 800662c:	fb01 f202 	mul.w	r2, r1, r2
 8006630:	1a9b      	subs	r3, r3, r2
 8006632:	2b00      	cmp	r3, #0
 8006634:	f040 80f1 	bne.w	800681a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	8992      	ldrh	r2, [r2, #12]
 8006640:	fbb3 f3f2 	udiv	r3, r3, r2
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	8952      	ldrh	r2, [r2, #10]
 8006648:	3a01      	subs	r2, #1
 800664a:	4013      	ands	r3, r2
 800664c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d143      	bne.n	80066dc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10c      	bne.n	8006676 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	2b00      	cmp	r3, #0
 8006666:	d11a      	bne.n	800669e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f7fe fc95 	bl	8004f9c <create_chain>
 8006672:	62b8      	str	r0, [r7, #40]	; 0x28
 8006674:	e013      	b.n	800669e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	4619      	mov	r1, r3
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f7fe fd21 	bl	80050cc <clmt_clust>
 800668a:	62b8      	str	r0, [r7, #40]	; 0x28
 800668c:	e007      	b.n	800669e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	4619      	mov	r1, r3
 8006696:	4610      	mov	r0, r2
 8006698:	f7fe fc80 	bl	8004f9c <create_chain>
 800669c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 8109 	beq.w	80068b8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80066a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d104      	bne.n	80066b6 <f_write+0x10c>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2202      	movs	r2, #2
 80066b0:	755a      	strb	r2, [r3, #21]
 80066b2:	2302      	movs	r3, #2
 80066b4:	e109      	b.n	80068ca <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d104      	bne.n	80066c8 <f_write+0x11e>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	755a      	strb	r2, [r3, #21]
 80066c4:	2301      	movs	r3, #1
 80066c6:	e100      	b.n	80068ca <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066cc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d102      	bne.n	80066dc <f_write+0x132>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066da:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	7d1b      	ldrb	r3, [r3, #20]
 80066e0:	b25b      	sxtb	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	da18      	bge.n	8006718 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	7858      	ldrb	r0, [r3, #1]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a1a      	ldr	r2, [r3, #32]
 80066f4:	2301      	movs	r3, #1
 80066f6:	f7fd fe51 	bl	800439c <disk_write>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <f_write+0x160>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2201      	movs	r2, #1
 8006704:	755a      	strb	r2, [r3, #21]
 8006706:	2301      	movs	r3, #1
 8006708:	e0df      	b.n	80068ca <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	7d1b      	ldrb	r3, [r3, #20]
 800670e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006712:	b2da      	uxtb	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f7fe f9c7 	bl	8004ab4 <clust2sect>
 8006726:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d104      	bne.n	8006738 <f_write+0x18e>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2202      	movs	r2, #2
 8006732:	755a      	strb	r2, [r3, #21]
 8006734:	2302      	movs	r3, #2
 8006736:	e0c8      	b.n	80068ca <f_write+0x320>
			sect += csect;
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	4413      	add	r3, r2
 800673e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	899b      	ldrh	r3, [r3, #12]
 8006744:	461a      	mov	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	fbb3 f3f2 	udiv	r3, r3, r2
 800674c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d043      	beq.n	80067dc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	4413      	add	r3, r2
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	8952      	ldrh	r2, [r2, #10]
 800675e:	4293      	cmp	r3, r2
 8006760:	d905      	bls.n	800676e <f_write+0x1c4>
					cc = fs->csize - csect;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	895b      	ldrh	r3, [r3, #10]
 8006766:	461a      	mov	r2, r3
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	7858      	ldrb	r0, [r3, #1]
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	69f9      	ldr	r1, [r7, #28]
 8006778:	f7fd fe10 	bl	800439c <disk_write>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d004      	beq.n	800678c <f_write+0x1e2>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	755a      	strb	r2, [r3, #21]
 8006788:	2301      	movs	r3, #1
 800678a:	e09e      	b.n	80068ca <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6a1a      	ldr	r2, [r3, #32]
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	6a3a      	ldr	r2, [r7, #32]
 8006796:	429a      	cmp	r2, r3
 8006798:	d918      	bls.n	80067cc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a1a      	ldr	r2, [r3, #32]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	8992      	ldrh	r2, [r2, #12]
 80067ac:	fb02 f303 	mul.w	r3, r2, r3
 80067b0:	69fa      	ldr	r2, [r7, #28]
 80067b2:	18d1      	adds	r1, r2, r3
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	899b      	ldrh	r3, [r3, #12]
 80067b8:	461a      	mov	r2, r3
 80067ba:	f7fd feaf 	bl	800451c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	7d1b      	ldrb	r3, [r3, #20]
 80067c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	899b      	ldrh	r3, [r3, #12]
 80067d0:	461a      	mov	r2, r3
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	fb02 f303 	mul.w	r3, r2, r3
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80067da:	e04b      	b.n	8006874 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d016      	beq.n	8006814 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d210      	bcs.n	8006814 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	7858      	ldrb	r0, [r3, #1]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067fc:	2301      	movs	r3, #1
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	f7fd fdac 	bl	800435c <disk_read>
 8006804:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006806:	2b00      	cmp	r3, #0
 8006808:	d004      	beq.n	8006814 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	755a      	strb	r2, [r3, #21]
 8006810:	2301      	movs	r3, #1
 8006812:	e05a      	b.n	80068ca <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	899b      	ldrh	r3, [r3, #12]
 800681e:	4618      	mov	r0, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	8992      	ldrh	r2, [r2, #12]
 8006828:	fbb3 f1f2 	udiv	r1, r3, r2
 800682c:	fb01 f202 	mul.w	r2, r1, r2
 8006830:	1a9b      	subs	r3, r3, r2
 8006832:	1ac3      	subs	r3, r0, r3
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	429a      	cmp	r2, r3
 800683c:	d901      	bls.n	8006842 <f_write+0x298>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	8992      	ldrh	r2, [r2, #12]
 8006850:	fbb3 f0f2 	udiv	r0, r3, r2
 8006854:	fb00 f202 	mul.w	r2, r0, r2
 8006858:	1a9b      	subs	r3, r3, r2
 800685a:	440b      	add	r3, r1
 800685c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685e:	69f9      	ldr	r1, [r7, #28]
 8006860:	4618      	mov	r0, r3
 8006862:	f7fd fe5b 	bl	800451c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	7d1b      	ldrb	r3, [r3, #20]
 800686a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800686e:	b2da      	uxtb	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	4413      	add	r3, r2
 800687a:	61fb      	str	r3, [r7, #28]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	699a      	ldr	r2, [r3, #24]
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	441a      	add	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	619a      	str	r2, [r3, #24]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68da      	ldr	r2, [r3, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	429a      	cmp	r2, r3
 8006892:	bf38      	it	cc
 8006894:	461a      	movcc	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	60da      	str	r2, [r3, #12]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	441a      	add	r2, r3
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f47f aeb5 	bne.w	8006620 <f_write+0x76>
 80068b6:	e000      	b.n	80068ba <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80068b8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	7d1b      	ldrb	r3, [r3, #20]
 80068be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3730      	adds	r7, #48	; 0x30
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b086      	sub	sp, #24
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f107 0208 	add.w	r2, r7, #8
 80068e0:	4611      	mov	r1, r2
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff faba 	bl	8005e5c <validate>
 80068e8:	4603      	mov	r3, r0
 80068ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d168      	bne.n	80069c4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	7d1b      	ldrb	r3, [r3, #20]
 80068f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d062      	beq.n	80069c4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	7d1b      	ldrb	r3, [r3, #20]
 8006902:	b25b      	sxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	da15      	bge.n	8006934 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	7858      	ldrb	r0, [r3, #1]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1a      	ldr	r2, [r3, #32]
 8006916:	2301      	movs	r3, #1
 8006918:	f7fd fd40 	bl	800439c <disk_write>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <f_sync+0x54>
 8006922:	2301      	movs	r3, #1
 8006924:	e04f      	b.n	80069c6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	7d1b      	ldrb	r3, [r3, #20]
 800692a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800692e:	b2da      	uxtb	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006934:	f7fd fc70 	bl	8004218 <get_fattime>
 8006938:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	4619      	mov	r1, r3
 8006942:	4610      	mov	r0, r2
 8006944:	f7fe f818 	bl	8004978 <move_window>
 8006948:	4603      	mov	r3, r0
 800694a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d138      	bne.n	80069c4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006956:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	330b      	adds	r3, #11
 800695c:	781a      	ldrb	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	330b      	adds	r3, #11
 8006962:	f042 0220 	orr.w	r2, r2, #32
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6818      	ldr	r0, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	461a      	mov	r2, r3
 8006974:	68f9      	ldr	r1, [r7, #12]
 8006976:	f7fe fda6 	bl	80054c6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f103 021c 	add.w	r2, r3, #28
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	4619      	mov	r1, r3
 8006986:	4610      	mov	r0, r2
 8006988:	f7fd fd9c 	bl	80044c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3316      	adds	r3, #22
 8006990:	6939      	ldr	r1, [r7, #16]
 8006992:	4618      	mov	r0, r3
 8006994:	f7fd fd96 	bl	80044c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3312      	adds	r3, #18
 800699c:	2100      	movs	r1, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fd fd75 	bl	800448e <st_word>
					fs->wflag = 1;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2201      	movs	r2, #1
 80069a8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fe f811 	bl	80049d4 <sync_fs>
 80069b2:	4603      	mov	r3, r0
 80069b4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	7d1b      	ldrb	r3, [r3, #20]
 80069ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff ff7b 	bl	80068d2 <f_sync>
 80069dc:	4603      	mov	r3, r0
 80069de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d118      	bne.n	8006a18 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f107 0208 	add.w	r2, r7, #8
 80069ec:	4611      	mov	r1, r2
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7ff fa34 	bl	8005e5c <validate>
 80069f4:	4603      	mov	r3, r0
 80069f6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10c      	bne.n	8006a18 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fd ff14 	bl	8004830 <dec_lock>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d102      	bne.n	8006a18 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b088      	sub	sp, #32
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006a36:	e01b      	b.n	8006a70 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006a38:	f107 0310 	add.w	r3, r7, #16
 8006a3c:	f107 0114 	add.w	r1, r7, #20
 8006a40:	2201      	movs	r2, #1
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff fc52 	bl	80062ec <f_read>
		if (rc != 1) break;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d116      	bne.n	8006a7c <f_gets+0x5a>
		c = s[0];
 8006a4e:	7d3b      	ldrb	r3, [r7, #20]
 8006a50:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006a52:	7dfb      	ldrb	r3, [r7, #23]
 8006a54:	2b0d      	cmp	r3, #13
 8006a56:	d100      	bne.n	8006a5a <f_gets+0x38>
 8006a58:	e00a      	b.n	8006a70 <f_gets+0x4e>
		*p++ = c;
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	61ba      	str	r2, [r7, #24]
 8006a60:	7dfa      	ldrb	r2, [r7, #23]
 8006a62:	701a      	strb	r2, [r3, #0]
		n++;
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	3301      	adds	r3, #1
 8006a68:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
 8006a6c:	2b0a      	cmp	r3, #10
 8006a6e:	d007      	beq.n	8006a80 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	dbde      	blt.n	8006a38 <f_gets+0x16>
 8006a7a:	e002      	b.n	8006a82 <f_gets+0x60>
		if (rc != 1) break;
 8006a7c:	bf00      	nop
 8006a7e:	e000      	b.n	8006a82 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006a80:	bf00      	nop
	}
	*p = 0;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <f_gets+0x70>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	e000      	b.n	8006a94 <f_gets+0x72>
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3720      	adds	r7, #32
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	2b0a      	cmp	r3, #10
 8006aac:	d103      	bne.n	8006ab6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006aae:	210d      	movs	r1, #13
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff fff3 	bl	8006a9c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	db25      	blt.n	8006b0e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	60fa      	str	r2, [r7, #12]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	4413      	add	r3, r2
 8006acc:	78fa      	ldrb	r2, [r7, #3]
 8006ace:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b3c      	cmp	r3, #60	; 0x3c
 8006ad4:	dd12      	ble.n	8006afc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f103 010c 	add.w	r1, r3, #12
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	f107 0308 	add.w	r3, r7, #8
 8006ae6:	f7ff fd60 	bl	80065aa <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d101      	bne.n	8006af6 <putc_bfd+0x5a>
 8006af2:	2300      	movs	r3, #0
 8006af4:	e001      	b.n	8006afa <putc_bfd+0x5e>
 8006af6:	f04f 33ff 	mov.w	r3, #4294967295
 8006afa:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	609a      	str	r2, [r3, #8]
 8006b0c:	e000      	b.n	8006b10 <putc_bfd+0x74>
	if (i < 0) return;
 8006b0e:	bf00      	nop
}
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	db16      	blt.n	8006b54 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6818      	ldr	r0, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f103 010c 	add.w	r1, r3, #12
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	461a      	mov	r2, r3
 8006b36:	f107 030c 	add.w	r3, r7, #12
 8006b3a:	f7ff fd36 	bl	80065aa <f_write>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d107      	bne.n	8006b54 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d102      	bne.n	8006b54 <putc_flush+0x3e>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	e001      	b.n	8006b58 <putc_flush+0x42>
	return EOF;
 8006b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	605a      	str	r2, [r3, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	609a      	str	r2, [r3, #8]
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b096      	sub	sp, #88	; 0x58
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8006b94:	f107 030c 	add.w	r3, r7, #12
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7ff ffe0 	bl	8006b60 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8006ba0:	e009      	b.n	8006bb6 <f_puts+0x2c>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	607a      	str	r2, [r7, #4]
 8006ba8:	781a      	ldrb	r2, [r3, #0]
 8006baa:	f107 030c 	add.w	r3, r7, #12
 8006bae:	4611      	mov	r1, r2
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7ff ff73 	bl	8006a9c <putc_bfd>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f1      	bne.n	8006ba2 <f_puts+0x18>
	return putc_flush(&pb);
 8006bbe:	f107 030c 	add.w	r3, r7, #12
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff ffa7 	bl	8006b16 <putc_flush>
 8006bc8:	4603      	mov	r3, r0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3758      	adds	r7, #88	; 0x58
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	4613      	mov	r3, r2
 8006be0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006be2:	2301      	movs	r3, #1
 8006be4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006bea:	4b1f      	ldr	r3, [pc, #124]	; (8006c68 <FATFS_LinkDriverEx+0x94>)
 8006bec:	7a5b      	ldrb	r3, [r3, #9]
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d131      	bne.n	8006c58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006bf4:	4b1c      	ldr	r3, [pc, #112]	; (8006c68 <FATFS_LinkDriverEx+0x94>)
 8006bf6:	7a5b      	ldrb	r3, [r3, #9]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4b1a      	ldr	r3, [pc, #104]	; (8006c68 <FATFS_LinkDriverEx+0x94>)
 8006bfe:	2100      	movs	r1, #0
 8006c00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006c02:	4b19      	ldr	r3, [pc, #100]	; (8006c68 <FATFS_LinkDriverEx+0x94>)
 8006c04:	7a5b      	ldrb	r3, [r3, #9]
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	4a17      	ldr	r2, [pc, #92]	; (8006c68 <FATFS_LinkDriverEx+0x94>)
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006c12:	4b15      	ldr	r3, [pc, #84]	; (8006c68 <FATFS_LinkDriverEx+0x94>)
 8006c14:	7a5b      	ldrb	r3, [r3, #9]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4b13      	ldr	r3, [pc, #76]	; (8006c68 <FATFS_LinkDriverEx+0x94>)
 8006c1c:	4413      	add	r3, r2
 8006c1e:	79fa      	ldrb	r2, [r7, #7]
 8006c20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006c22:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <FATFS_LinkDriverEx+0x94>)
 8006c24:	7a5b      	ldrb	r3, [r3, #9]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	b2d1      	uxtb	r1, r2
 8006c2c:	4a0e      	ldr	r2, [pc, #56]	; (8006c68 <FATFS_LinkDriverEx+0x94>)
 8006c2e:	7251      	strb	r1, [r2, #9]
 8006c30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006c32:	7dbb      	ldrb	r3, [r7, #22]
 8006c34:	3330      	adds	r3, #48	; 0x30
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	223a      	movs	r2, #58	; 0x3a
 8006c42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	3302      	adds	r3, #2
 8006c48:	222f      	movs	r2, #47	; 0x2f
 8006c4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	3303      	adds	r3, #3
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	371c      	adds	r7, #28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	200047e8 	.word	0x200047e8

08006c6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006c76:	2200      	movs	r2, #0
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff ffaa 	bl	8006bd4 <FATFS_LinkDriverEx>
 8006c80:	4603      	mov	r3, r0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
	...

08006c8c <arm_fir_init_f32>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	9c04      	ldr	r4, [sp, #16]
 8006c90:	6082      	str	r2, [r0, #8]
 8006c92:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006c96:	3c01      	subs	r4, #1
 8006c98:	4605      	mov	r5, r0
 8006c9a:	440c      	add	r4, r1
 8006c9c:	8001      	strh	r1, [r0, #0]
 8006c9e:	461e      	mov	r6, r3
 8006ca0:	00a2      	lsls	r2, r4, #2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	f000 fa95 	bl	80071d4 <memset>
 8006caa:	606e      	str	r6, [r5, #4]
 8006cac:	bd70      	pop	{r4, r5, r6, pc}
 8006cae:	bf00      	nop

08006cb0 <arm_fir_f32>:
 8006cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb4:	ed2d 8b10 	vpush	{d8-d15}
 8006cb8:	b089      	sub	sp, #36	; 0x24
 8006cba:	4605      	mov	r5, r0
 8006cbc:	9003      	str	r0, [sp, #12]
 8006cbe:	8800      	ldrh	r0, [r0, #0]
 8006cc0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	461e      	mov	r6, r3
 8006cc8:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8006cd2:	08f3      	lsrs	r3, r6, #3
 8006cd4:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8006cd8:	9001      	str	r0, [sp, #4]
 8006cda:	4625      	mov	r5, r4
 8006cdc:	9400      	str	r4, [sp, #0]
 8006cde:	9302      	str	r3, [sp, #8]
 8006ce0:	f000 81ee 	beq.w	80070c0 <arm_fir_f32+0x410>
 8006ce4:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8006ce8:	469e      	mov	lr, r3
 8006cea:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8006cee:	1f1e      	subs	r6, r3, #4
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	9605      	str	r6, [sp, #20]
 8006cf4:	eb08 0003 	add.w	r0, r8, r3
 8006cf8:	f004 0a07 	and.w	sl, r4, #7
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	f10c 0420 	add.w	r4, ip, #32
 8006d02:	f8cd c018 	str.w	ip, [sp, #24]
 8006d06:	4684      	mov	ip, r0
 8006d08:	4648      	mov	r0, r9
 8006d0a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006d0e:	9107      	str	r1, [sp, #28]
 8006d10:	f105 0720 	add.w	r7, r5, #32
 8006d14:	f101 0620 	add.w	r6, r1, #32
 8006d18:	f102 0520 	add.w	r5, r2, #32
 8006d1c:	4652      	mov	r2, sl
 8006d1e:	469a      	mov	sl, r3
 8006d20:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8006d24:	f847 3c20 	str.w	r3, [r7, #-32]
 8006d28:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8006d2c:	f847 3c1c 	str.w	r3, [r7, #-28]
 8006d30:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8006d34:	f847 3c18 	str.w	r3, [r7, #-24]
 8006d38:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8006d3c:	f847 3c14 	str.w	r3, [r7, #-20]
 8006d40:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8006d44:	f847 3c10 	str.w	r3, [r7, #-16]
 8006d48:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8006d4c:	f847 3c0c 	str.w	r3, [r7, #-12]
 8006d50:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8006d54:	f847 3c08 	str.w	r3, [r7, #-8]
 8006d58:	eddf 3af1 	vldr	s7, [pc, #964]	; 8007120 <arm_fir_f32+0x470>
 8006d5c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006d60:	f847 3c04 	str.w	r3, [r7, #-4]
 8006d64:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8006d68:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 8006d6c:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8006d70:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8006d74:	ed14 1a04 	vldr	s2, [r4, #-16]
 8006d78:	ed54 0a03 	vldr	s1, [r4, #-12]
 8006d7c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006d80:	1f21      	subs	r1, r4, #4
 8006d82:	eef0 8a63 	vmov.f32	s17, s7
 8006d86:	eef0 9a63 	vmov.f32	s19, s7
 8006d8a:	eef0 aa63 	vmov.f32	s21, s7
 8006d8e:	eef0 ba63 	vmov.f32	s23, s7
 8006d92:	eeb0 ca63 	vmov.f32	s24, s7
 8006d96:	eef0 ca63 	vmov.f32	s25, s7
 8006d9a:	eeb0 da63 	vmov.f32	s26, s7
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	f000 81e8 	beq.w	8007174 <arm_fir_f32+0x4c4>
 8006da4:	f108 0120 	add.w	r1, r8, #32
 8006da8:	f104 031c 	add.w	r3, r4, #28
 8006dac:	4683      	mov	fp, r0
 8006dae:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8006db2:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8006db6:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 8006dba:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 8006dbe:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8006dc2:	ed11 6a04 	vldr	s12, [r1, #-16]
 8006dc6:	ed51 6a03 	vldr	s13, [r1, #-12]
 8006dca:	ed11 7a02 	vldr	s14, [r1, #-8]
 8006dce:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006dd2:	ee23 fa04 	vmul.f32	s30, s6, s8
 8006dd6:	ee62 ea84 	vmul.f32	s29, s5, s8
 8006dda:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 8006dde:	ee22 ea04 	vmul.f32	s28, s4, s8
 8006de2:	ee61 da84 	vmul.f32	s27, s3, s8
 8006de6:	ee21 ba04 	vmul.f32	s22, s2, s8
 8006dea:	ee20 aa84 	vmul.f32	s20, s1, s8
 8006dee:	ee20 9a04 	vmul.f32	s18, s0, s8
 8006df2:	ee28 4a04 	vmul.f32	s8, s16, s8
 8006df6:	ee62 fa24 	vmul.f32	s31, s4, s9
 8006dfa:	ee3c ca0e 	vadd.f32	s24, s24, s28
 8006dfe:	ee7b baad 	vadd.f32	s23, s23, s27
 8006e02:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8006e06:	ee61 da24 	vmul.f32	s27, s2, s9
 8006e0a:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8006e0e:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8006e12:	ee20 baa4 	vmul.f32	s22, s1, s9
 8006e16:	ee20 aa24 	vmul.f32	s20, s0, s9
 8006e1a:	ee3d da0f 	vadd.f32	s26, s26, s30
 8006e1e:	ee7c caae 	vadd.f32	s25, s25, s29
 8006e22:	ee22 faa4 	vmul.f32	s30, s5, s9
 8006e26:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006e2a:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 8006e2e:	ee28 9a24 	vmul.f32	s18, s16, s9
 8006e32:	ee73 3a84 	vadd.f32	s7, s7, s8
 8006e36:	ee63 4a24 	vmul.f32	s9, s6, s9
 8006e3a:	ee22 4a05 	vmul.f32	s8, s4, s10
 8006e3e:	ee61 ea05 	vmul.f32	s29, s2, s10
 8006e42:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8006e46:	ee3d da0f 	vadd.f32	s26, s26, s30
 8006e4a:	ee7c caaf 	vadd.f32	s25, s25, s31
 8006e4e:	ee20 fa85 	vmul.f32	s30, s1, s10
 8006e52:	ee61 fa85 	vmul.f32	s31, s3, s10
 8006e56:	ee3c ea0e 	vadd.f32	s28, s24, s28
 8006e5a:	ee7b daad 	vadd.f32	s27, s23, s27
 8006e5e:	ee3a ba8b 	vadd.f32	s22, s21, s22
 8006e62:	ee60 ba05 	vmul.f32	s23, s0, s10
 8006e66:	ee68 aa05 	vmul.f32	s21, s16, s10
 8006e6a:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8006e6e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006e72:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8006e76:	ee63 4a05 	vmul.f32	s9, s6, s10
 8006e7a:	ee22 5a85 	vmul.f32	s10, s5, s10
 8006e7e:	ee21 9a25 	vmul.f32	s18, s2, s11
 8006e82:	ee20 ca25 	vmul.f32	s24, s0, s11
 8006e86:	ee3d da04 	vadd.f32	s26, s26, s8
 8006e8a:	ee7c caaf 	vadd.f32	s25, s25, s31
 8006e8e:	ee21 4aa5 	vmul.f32	s8, s3, s11
 8006e92:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8006e96:	ed53 1a04 	vldr	s3, [r3, #-16]
 8006e9a:	ee60 eaa5 	vmul.f32	s29, s1, s11
 8006e9e:	ee7d da8f 	vadd.f32	s27, s27, s30
 8006ea2:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8006ea6:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8006eaa:	ee68 ba25 	vmul.f32	s23, s16, s11
 8006eae:	ee63 aa25 	vmul.f32	s21, s6, s11
 8006eb2:	ee78 8aa4 	vadd.f32	s17, s17, s9
 8006eb6:	ee73 3a85 	vadd.f32	s7, s7, s10
 8006eba:	ee22 5aa5 	vmul.f32	s10, s5, s11
 8006ebe:	ee62 5a25 	vmul.f32	s11, s4, s11
 8006ec2:	ee61 4a06 	vmul.f32	s9, s2, s12
 8006ec6:	ee60 9a86 	vmul.f32	s19, s1, s12
 8006eca:	ee60 fa06 	vmul.f32	s31, s0, s12
 8006ece:	ed13 1a03 	vldr	s2, [r3, #-12]
 8006ed2:	ee23 fa06 	vmul.f32	s30, s6, s12
 8006ed6:	ee3d da04 	vadd.f32	s26, s26, s8
 8006eda:	ee7c ca89 	vadd.f32	s25, s25, s18
 8006ede:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8006ee2:	ee28 9a06 	vmul.f32	s18, s16, s12
 8006ee6:	ee7d da8c 	vadd.f32	s27, s27, s24
 8006eea:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8006eee:	ee22 ca86 	vmul.f32	s24, s5, s12
 8006ef2:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8006ef6:	ee78 8a85 	vadd.f32	s17, s17, s10
 8006efa:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8006efe:	ee62 5a06 	vmul.f32	s11, s4, s12
 8006f02:	ee21 6a86 	vmul.f32	s12, s3, s12
 8006f06:	ee20 4a26 	vmul.f32	s8, s0, s13
 8006f0a:	ee63 ea26 	vmul.f32	s29, s6, s13
 8006f0e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8006f12:	ee22 5a26 	vmul.f32	s10, s4, s13
 8006f16:	ee3d da24 	vadd.f32	s26, s26, s9
 8006f1a:	ee7c caa9 	vadd.f32	s25, s25, s19
 8006f1e:	ee60 4aa6 	vmul.f32	s9, s1, s13
 8006f22:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8006f26:	ed53 0a02 	vldr	s1, [r3, #-8]
 8006f2a:	ee68 fa26 	vmul.f32	s31, s16, s13
 8006f2e:	ee7d da89 	vadd.f32	s27, s27, s18
 8006f32:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8006f36:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8006f3a:	ee22 faa6 	vmul.f32	s30, s5, s13
 8006f3e:	ee73 3a86 	vadd.f32	s7, s7, s12
 8006f42:	ee21 6aa6 	vmul.f32	s12, s3, s13
 8006f46:	ee61 6a26 	vmul.f32	s13, s2, s13
 8006f4a:	ee60 aa07 	vmul.f32	s21, s0, s14
 8006f4e:	ee28 ca07 	vmul.f32	s24, s16, s14
 8006f52:	ee63 ba07 	vmul.f32	s23, s6, s14
 8006f56:	ee7a 9a05 	vadd.f32	s19, s20, s10
 8006f5a:	ee78 8a86 	vadd.f32	s17, s17, s12
 8006f5e:	ee3d da24 	vadd.f32	s26, s26, s9
 8006f62:	ee7c ca84 	vadd.f32	s25, s25, s8
 8006f66:	ee7d daae 	vadd.f32	s27, s27, s29
 8006f6a:	ee22 9a07 	vmul.f32	s18, s4, s14
 8006f6e:	ee62 ea87 	vmul.f32	s29, s5, s14
 8006f72:	ee61 5a87 	vmul.f32	s11, s3, s14
 8006f76:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8006f7a:	ed13 0a01 	vldr	s0, [r3, #-4]
 8006f7e:	ee61 6a07 	vmul.f32	s13, s2, s14
 8006f82:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8006f86:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8006f8a:	ee20 7a87 	vmul.f32	s14, s1, s14
 8006f8e:	ee68 4a27 	vmul.f32	s9, s16, s15
 8006f92:	ee3d da2a 	vadd.f32	s26, s26, s21
 8006f96:	ee7c ca8c 	vadd.f32	s25, s25, s24
 8006f9a:	ee23 8a27 	vmul.f32	s16, s6, s15
 8006f9e:	ee3e ea2b 	vadd.f32	s28, s28, s23
 8006fa2:	ee22 4aa7 	vmul.f32	s8, s5, s15
 8006fa6:	ee22 aa27 	vmul.f32	s20, s4, s15
 8006faa:	ee21 5aa7 	vmul.f32	s10, s3, s15
 8006fae:	ee21 6a27 	vmul.f32	s12, s2, s15
 8006fb2:	ee78 6aa6 	vadd.f32	s13, s17, s13
 8006fb6:	ee7d daae 	vadd.f32	s27, s27, s29
 8006fba:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8006fbe:	ee3b ba09 	vadd.f32	s22, s22, s18
 8006fc2:	ee79 9aa5 	vadd.f32	s19, s19, s11
 8006fc6:	ee73 3a87 	vadd.f32	s7, s7, s14
 8006fca:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006fce:	f1bb 0b01 	subs.w	fp, fp, #1
 8006fd2:	f101 0120 	add.w	r1, r1, #32
 8006fd6:	ee3d da24 	vadd.f32	s26, s26, s9
 8006fda:	ee7c ca88 	vadd.f32	s25, s25, s16
 8006fde:	ee3e ca04 	vadd.f32	s24, s28, s8
 8006fe2:	ee7d ba8a 	vadd.f32	s23, s27, s20
 8006fe6:	ee7b aa05 	vadd.f32	s21, s22, s10
 8006fea:	ee79 9a86 	vadd.f32	s19, s19, s12
 8006fee:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8006ff2:	ee73 3aa7 	vadd.f32	s7, s7, s15
 8006ff6:	f103 0320 	add.w	r3, r3, #32
 8006ffa:	f47f aed8 	bne.w	8006dae <arm_fir_f32+0xfe>
 8006ffe:	eb09 0104 	add.w	r1, r9, r4
 8007002:	46e3      	mov	fp, ip
 8007004:	b3a2      	cbz	r2, 8007070 <arm_fir_f32+0x3c0>
 8007006:	4613      	mov	r3, r2
 8007008:	ecbb 6a01 	vldmia	fp!, {s12}
 800700c:	ecf1 7a01 	vldmia	r1!, {s15}
 8007010:	ee23 3a06 	vmul.f32	s6, s6, s12
 8007014:	ee22 4a86 	vmul.f32	s8, s5, s12
 8007018:	ee62 4a06 	vmul.f32	s9, s4, s12
 800701c:	ee21 5a86 	vmul.f32	s10, s3, s12
 8007020:	ee61 5a06 	vmul.f32	s11, s2, s12
 8007024:	ee60 6a86 	vmul.f32	s13, s1, s12
 8007028:	ee20 7a06 	vmul.f32	s14, s0, s12
 800702c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8007030:	3b01      	subs	r3, #1
 8007032:	ee3d da03 	vadd.f32	s26, s26, s6
 8007036:	ee7c ca84 	vadd.f32	s25, s25, s8
 800703a:	eeb0 3a62 	vmov.f32	s6, s5
 800703e:	ee3c ca24 	vadd.f32	s24, s24, s9
 8007042:	eef0 2a42 	vmov.f32	s5, s4
 8007046:	ee7b ba85 	vadd.f32	s23, s23, s10
 800704a:	eeb0 2a61 	vmov.f32	s4, s3
 800704e:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8007052:	eef0 1a41 	vmov.f32	s3, s2
 8007056:	ee79 9aa6 	vadd.f32	s19, s19, s13
 800705a:	eeb0 1a60 	vmov.f32	s2, s1
 800705e:	ee78 8a87 	vadd.f32	s17, s17, s14
 8007062:	eef0 0a40 	vmov.f32	s1, s0
 8007066:	ee73 3a86 	vadd.f32	s7, s7, s12
 800706a:	eeb0 0a67 	vmov.f32	s0, s15
 800706e:	d1cb      	bne.n	8007008 <arm_fir_f32+0x358>
 8007070:	f1be 0e01 	subs.w	lr, lr, #1
 8007074:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8007078:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 800707c:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8007080:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8007084:	ed45 aa04 	vstr	s21, [r5, #-16]
 8007088:	ed45 9a03 	vstr	s19, [r5, #-12]
 800708c:	ed45 8a02 	vstr	s17, [r5, #-8]
 8007090:	ed45 3a01 	vstr	s7, [r5, #-4]
 8007094:	f107 0720 	add.w	r7, r7, #32
 8007098:	f106 0620 	add.w	r6, r6, #32
 800709c:	f104 0420 	add.w	r4, r4, #32
 80070a0:	f105 0520 	add.w	r5, r5, #32
 80070a4:	f47f ae3c 	bne.w	8006d20 <arm_fir_f32+0x70>
 80070a8:	9b02      	ldr	r3, [sp, #8]
 80070aa:	9800      	ldr	r0, [sp, #0]
 80070ac:	f8dd c018 	ldr.w	ip, [sp, #24]
 80070b0:	9907      	ldr	r1, [sp, #28]
 80070b2:	015b      	lsls	r3, r3, #5
 80070b4:	4652      	mov	r2, sl
 80070b6:	4418      	add	r0, r3
 80070b8:	9000      	str	r0, [sp, #0]
 80070ba:	4419      	add	r1, r3
 80070bc:	449c      	add	ip, r3
 80070be:	441a      	add	r2, r3
 80070c0:	9b04      	ldr	r3, [sp, #16]
 80070c2:	f013 0e07 	ands.w	lr, r3, #7
 80070c6:	d01f      	beq.n	8007108 <arm_fir_f32+0x458>
 80070c8:	9f00      	ldr	r7, [sp, #0]
 80070ca:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80070ce:	4676      	mov	r6, lr
 80070d0:	4665      	mov	r5, ip
 80070d2:	f851 3b04 	ldr.w	r3, [r1], #4
 80070d6:	eddf 6a12 	vldr	s13, [pc, #72]	; 8007120 <arm_fir_f32+0x470>
 80070da:	f847 3b04 	str.w	r3, [r7], #4
 80070de:	4644      	mov	r4, r8
 80070e0:	464b      	mov	r3, r9
 80070e2:	4628      	mov	r0, r5
 80070e4:	ecb0 7a01 	vldmia	r0!, {s14}
 80070e8:	ecf4 7a01 	vldmia	r4!, {s15}
 80070ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f0:	3b01      	subs	r3, #1
 80070f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80070f6:	d1f5      	bne.n	80070e4 <arm_fir_f32+0x434>
 80070f8:	3e01      	subs	r6, #1
 80070fa:	ece2 6a01 	vstmia	r2!, {s13}
 80070fe:	f105 0504 	add.w	r5, r5, #4
 8007102:	d1e6      	bne.n	80070d2 <arm_fir_f32+0x422>
 8007104:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8007108:	9b01      	ldr	r3, [sp, #4]
 800710a:	1e59      	subs	r1, r3, #1
 800710c:	9b03      	ldr	r3, [sp, #12]
 800710e:	088e      	lsrs	r6, r1, #2
 8007110:	685c      	ldr	r4, [r3, #4]
 8007112:	d020      	beq.n	8007156 <arm_fir_f32+0x4a6>
 8007114:	f104 0210 	add.w	r2, r4, #16
 8007118:	f10c 0310 	add.w	r3, ip, #16
 800711c:	4630      	mov	r0, r6
 800711e:	e001      	b.n	8007124 <arm_fir_f32+0x474>
 8007120:	00000000 	.word	0x00000000
 8007124:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8007128:	f842 5c10 	str.w	r5, [r2, #-16]
 800712c:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8007130:	f842 5c0c 	str.w	r5, [r2, #-12]
 8007134:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8007138:	f842 5c08 	str.w	r5, [r2, #-8]
 800713c:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8007140:	f842 5c04 	str.w	r5, [r2, #-4]
 8007144:	3801      	subs	r0, #1
 8007146:	f103 0310 	add.w	r3, r3, #16
 800714a:	f102 0210 	add.w	r2, r2, #16
 800714e:	d1e9      	bne.n	8007124 <arm_fir_f32+0x474>
 8007150:	0133      	lsls	r3, r6, #4
 8007152:	441c      	add	r4, r3
 8007154:	449c      	add	ip, r3
 8007156:	f011 0303 	ands.w	r3, r1, #3
 800715a:	d006      	beq.n	800716a <arm_fir_f32+0x4ba>
 800715c:	4622      	mov	r2, r4
 800715e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007162:	f842 1b04 	str.w	r1, [r2], #4
 8007166:	3b01      	subs	r3, #1
 8007168:	d1f9      	bne.n	800715e <arm_fir_f32+0x4ae>
 800716a:	b009      	add	sp, #36	; 0x24
 800716c:	ecbd 8b10 	vpop	{d8-d15}
 8007170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007174:	46c3      	mov	fp, r8
 8007176:	e745      	b.n	8007004 <arm_fir_f32+0x354>

08007178 <atof>:
 8007178:	2100      	movs	r1, #0
 800717a:	f001 bcfd 	b.w	8008b78 <strtod>
	...

08007180 <__errno>:
 8007180:	4b01      	ldr	r3, [pc, #4]	; (8007188 <__errno+0x8>)
 8007182:	6818      	ldr	r0, [r3, #0]
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	20000028 	.word	0x20000028

0800718c <__libc_init_array>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	4d0d      	ldr	r5, [pc, #52]	; (80071c4 <__libc_init_array+0x38>)
 8007190:	4c0d      	ldr	r4, [pc, #52]	; (80071c8 <__libc_init_array+0x3c>)
 8007192:	1b64      	subs	r4, r4, r5
 8007194:	10a4      	asrs	r4, r4, #2
 8007196:	2600      	movs	r6, #0
 8007198:	42a6      	cmp	r6, r4
 800719a:	d109      	bne.n	80071b0 <__libc_init_array+0x24>
 800719c:	4d0b      	ldr	r5, [pc, #44]	; (80071cc <__libc_init_array+0x40>)
 800719e:	4c0c      	ldr	r4, [pc, #48]	; (80071d0 <__libc_init_array+0x44>)
 80071a0:	f004 fc9e 	bl	800bae0 <_init>
 80071a4:	1b64      	subs	r4, r4, r5
 80071a6:	10a4      	asrs	r4, r4, #2
 80071a8:	2600      	movs	r6, #0
 80071aa:	42a6      	cmp	r6, r4
 80071ac:	d105      	bne.n	80071ba <__libc_init_array+0x2e>
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b4:	4798      	blx	r3
 80071b6:	3601      	adds	r6, #1
 80071b8:	e7ee      	b.n	8007198 <__libc_init_array+0xc>
 80071ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80071be:	4798      	blx	r3
 80071c0:	3601      	adds	r6, #1
 80071c2:	e7f2      	b.n	80071aa <__libc_init_array+0x1e>
 80071c4:	0800c204 	.word	0x0800c204
 80071c8:	0800c204 	.word	0x0800c204
 80071cc:	0800c204 	.word	0x0800c204
 80071d0:	0800c208 	.word	0x0800c208

080071d4 <memset>:
 80071d4:	4402      	add	r2, r0
 80071d6:	4603      	mov	r3, r0
 80071d8:	4293      	cmp	r3, r2
 80071da:	d100      	bne.n	80071de <memset+0xa>
 80071dc:	4770      	bx	lr
 80071de:	f803 1b01 	strb.w	r1, [r3], #1
 80071e2:	e7f9      	b.n	80071d8 <memset+0x4>

080071e4 <__cvt>:
 80071e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071e8:	ec55 4b10 	vmov	r4, r5, d0
 80071ec:	2d00      	cmp	r5, #0
 80071ee:	460e      	mov	r6, r1
 80071f0:	4619      	mov	r1, r3
 80071f2:	462b      	mov	r3, r5
 80071f4:	bfbb      	ittet	lt
 80071f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071fa:	461d      	movlt	r5, r3
 80071fc:	2300      	movge	r3, #0
 80071fe:	232d      	movlt	r3, #45	; 0x2d
 8007200:	700b      	strb	r3, [r1, #0]
 8007202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007204:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007208:	4691      	mov	r9, r2
 800720a:	f023 0820 	bic.w	r8, r3, #32
 800720e:	bfbc      	itt	lt
 8007210:	4622      	movlt	r2, r4
 8007212:	4614      	movlt	r4, r2
 8007214:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007218:	d005      	beq.n	8007226 <__cvt+0x42>
 800721a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800721e:	d100      	bne.n	8007222 <__cvt+0x3e>
 8007220:	3601      	adds	r6, #1
 8007222:	2102      	movs	r1, #2
 8007224:	e000      	b.n	8007228 <__cvt+0x44>
 8007226:	2103      	movs	r1, #3
 8007228:	ab03      	add	r3, sp, #12
 800722a:	9301      	str	r3, [sp, #4]
 800722c:	ab02      	add	r3, sp, #8
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	ec45 4b10 	vmov	d0, r4, r5
 8007234:	4653      	mov	r3, sl
 8007236:	4632      	mov	r2, r6
 8007238:	f001 fdba 	bl	8008db0 <_dtoa_r>
 800723c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007240:	4607      	mov	r7, r0
 8007242:	d102      	bne.n	800724a <__cvt+0x66>
 8007244:	f019 0f01 	tst.w	r9, #1
 8007248:	d022      	beq.n	8007290 <__cvt+0xac>
 800724a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800724e:	eb07 0906 	add.w	r9, r7, r6
 8007252:	d110      	bne.n	8007276 <__cvt+0x92>
 8007254:	783b      	ldrb	r3, [r7, #0]
 8007256:	2b30      	cmp	r3, #48	; 0x30
 8007258:	d10a      	bne.n	8007270 <__cvt+0x8c>
 800725a:	2200      	movs	r2, #0
 800725c:	2300      	movs	r3, #0
 800725e:	4620      	mov	r0, r4
 8007260:	4629      	mov	r1, r5
 8007262:	f7f9 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 8007266:	b918      	cbnz	r0, 8007270 <__cvt+0x8c>
 8007268:	f1c6 0601 	rsb	r6, r6, #1
 800726c:	f8ca 6000 	str.w	r6, [sl]
 8007270:	f8da 3000 	ldr.w	r3, [sl]
 8007274:	4499      	add	r9, r3
 8007276:	2200      	movs	r2, #0
 8007278:	2300      	movs	r3, #0
 800727a:	4620      	mov	r0, r4
 800727c:	4629      	mov	r1, r5
 800727e:	f7f9 fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 8007282:	b108      	cbz	r0, 8007288 <__cvt+0xa4>
 8007284:	f8cd 900c 	str.w	r9, [sp, #12]
 8007288:	2230      	movs	r2, #48	; 0x30
 800728a:	9b03      	ldr	r3, [sp, #12]
 800728c:	454b      	cmp	r3, r9
 800728e:	d307      	bcc.n	80072a0 <__cvt+0xbc>
 8007290:	9b03      	ldr	r3, [sp, #12]
 8007292:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007294:	1bdb      	subs	r3, r3, r7
 8007296:	4638      	mov	r0, r7
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	b004      	add	sp, #16
 800729c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a0:	1c59      	adds	r1, r3, #1
 80072a2:	9103      	str	r1, [sp, #12]
 80072a4:	701a      	strb	r2, [r3, #0]
 80072a6:	e7f0      	b.n	800728a <__cvt+0xa6>

080072a8 <__exponent>:
 80072a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072aa:	4603      	mov	r3, r0
 80072ac:	2900      	cmp	r1, #0
 80072ae:	bfb8      	it	lt
 80072b0:	4249      	neglt	r1, r1
 80072b2:	f803 2b02 	strb.w	r2, [r3], #2
 80072b6:	bfb4      	ite	lt
 80072b8:	222d      	movlt	r2, #45	; 0x2d
 80072ba:	222b      	movge	r2, #43	; 0x2b
 80072bc:	2909      	cmp	r1, #9
 80072be:	7042      	strb	r2, [r0, #1]
 80072c0:	dd2a      	ble.n	8007318 <__exponent+0x70>
 80072c2:	f10d 0407 	add.w	r4, sp, #7
 80072c6:	46a4      	mov	ip, r4
 80072c8:	270a      	movs	r7, #10
 80072ca:	46a6      	mov	lr, r4
 80072cc:	460a      	mov	r2, r1
 80072ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80072d2:	fb07 1516 	mls	r5, r7, r6, r1
 80072d6:	3530      	adds	r5, #48	; 0x30
 80072d8:	2a63      	cmp	r2, #99	; 0x63
 80072da:	f104 34ff 	add.w	r4, r4, #4294967295
 80072de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80072e2:	4631      	mov	r1, r6
 80072e4:	dcf1      	bgt.n	80072ca <__exponent+0x22>
 80072e6:	3130      	adds	r1, #48	; 0x30
 80072e8:	f1ae 0502 	sub.w	r5, lr, #2
 80072ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072f0:	1c44      	adds	r4, r0, #1
 80072f2:	4629      	mov	r1, r5
 80072f4:	4561      	cmp	r1, ip
 80072f6:	d30a      	bcc.n	800730e <__exponent+0x66>
 80072f8:	f10d 0209 	add.w	r2, sp, #9
 80072fc:	eba2 020e 	sub.w	r2, r2, lr
 8007300:	4565      	cmp	r5, ip
 8007302:	bf88      	it	hi
 8007304:	2200      	movhi	r2, #0
 8007306:	4413      	add	r3, r2
 8007308:	1a18      	subs	r0, r3, r0
 800730a:	b003      	add	sp, #12
 800730c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800730e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007312:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007316:	e7ed      	b.n	80072f4 <__exponent+0x4c>
 8007318:	2330      	movs	r3, #48	; 0x30
 800731a:	3130      	adds	r1, #48	; 0x30
 800731c:	7083      	strb	r3, [r0, #2]
 800731e:	70c1      	strb	r1, [r0, #3]
 8007320:	1d03      	adds	r3, r0, #4
 8007322:	e7f1      	b.n	8007308 <__exponent+0x60>

08007324 <_printf_float>:
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	ed2d 8b02 	vpush	{d8}
 800732c:	b08d      	sub	sp, #52	; 0x34
 800732e:	460c      	mov	r4, r1
 8007330:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007334:	4616      	mov	r6, r2
 8007336:	461f      	mov	r7, r3
 8007338:	4605      	mov	r5, r0
 800733a:	f002 fe97 	bl	800a06c <_localeconv_r>
 800733e:	f8d0 a000 	ldr.w	sl, [r0]
 8007342:	4650      	mov	r0, sl
 8007344:	f7f8 ff44 	bl	80001d0 <strlen>
 8007348:	2300      	movs	r3, #0
 800734a:	930a      	str	r3, [sp, #40]	; 0x28
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	9305      	str	r3, [sp, #20]
 8007350:	f8d8 3000 	ldr.w	r3, [r8]
 8007354:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007358:	3307      	adds	r3, #7
 800735a:	f023 0307 	bic.w	r3, r3, #7
 800735e:	f103 0208 	add.w	r2, r3, #8
 8007362:	f8c8 2000 	str.w	r2, [r8]
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800736e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007372:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007376:	9307      	str	r3, [sp, #28]
 8007378:	f8cd 8018 	str.w	r8, [sp, #24]
 800737c:	ee08 0a10 	vmov	s16, r0
 8007380:	4b9f      	ldr	r3, [pc, #636]	; (8007600 <_printf_float+0x2dc>)
 8007382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007386:	f04f 32ff 	mov.w	r2, #4294967295
 800738a:	f7f9 fbcf 	bl	8000b2c <__aeabi_dcmpun>
 800738e:	bb88      	cbnz	r0, 80073f4 <_printf_float+0xd0>
 8007390:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007394:	4b9a      	ldr	r3, [pc, #616]	; (8007600 <_printf_float+0x2dc>)
 8007396:	f04f 32ff 	mov.w	r2, #4294967295
 800739a:	f7f9 fba9 	bl	8000af0 <__aeabi_dcmple>
 800739e:	bb48      	cbnz	r0, 80073f4 <_printf_float+0xd0>
 80073a0:	2200      	movs	r2, #0
 80073a2:	2300      	movs	r3, #0
 80073a4:	4640      	mov	r0, r8
 80073a6:	4649      	mov	r1, r9
 80073a8:	f7f9 fb98 	bl	8000adc <__aeabi_dcmplt>
 80073ac:	b110      	cbz	r0, 80073b4 <_printf_float+0x90>
 80073ae:	232d      	movs	r3, #45	; 0x2d
 80073b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073b4:	4b93      	ldr	r3, [pc, #588]	; (8007604 <_printf_float+0x2e0>)
 80073b6:	4894      	ldr	r0, [pc, #592]	; (8007608 <_printf_float+0x2e4>)
 80073b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80073bc:	bf94      	ite	ls
 80073be:	4698      	movls	r8, r3
 80073c0:	4680      	movhi	r8, r0
 80073c2:	2303      	movs	r3, #3
 80073c4:	6123      	str	r3, [r4, #16]
 80073c6:	9b05      	ldr	r3, [sp, #20]
 80073c8:	f023 0204 	bic.w	r2, r3, #4
 80073cc:	6022      	str	r2, [r4, #0]
 80073ce:	f04f 0900 	mov.w	r9, #0
 80073d2:	9700      	str	r7, [sp, #0]
 80073d4:	4633      	mov	r3, r6
 80073d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80073d8:	4621      	mov	r1, r4
 80073da:	4628      	mov	r0, r5
 80073dc:	f000 f9d8 	bl	8007790 <_printf_common>
 80073e0:	3001      	adds	r0, #1
 80073e2:	f040 8090 	bne.w	8007506 <_printf_float+0x1e2>
 80073e6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ea:	b00d      	add	sp, #52	; 0x34
 80073ec:	ecbd 8b02 	vpop	{d8}
 80073f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f4:	4642      	mov	r2, r8
 80073f6:	464b      	mov	r3, r9
 80073f8:	4640      	mov	r0, r8
 80073fa:	4649      	mov	r1, r9
 80073fc:	f7f9 fb96 	bl	8000b2c <__aeabi_dcmpun>
 8007400:	b140      	cbz	r0, 8007414 <_printf_float+0xf0>
 8007402:	464b      	mov	r3, r9
 8007404:	2b00      	cmp	r3, #0
 8007406:	bfbc      	itt	lt
 8007408:	232d      	movlt	r3, #45	; 0x2d
 800740a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800740e:	487f      	ldr	r0, [pc, #508]	; (800760c <_printf_float+0x2e8>)
 8007410:	4b7f      	ldr	r3, [pc, #508]	; (8007610 <_printf_float+0x2ec>)
 8007412:	e7d1      	b.n	80073b8 <_printf_float+0x94>
 8007414:	6863      	ldr	r3, [r4, #4]
 8007416:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800741a:	9206      	str	r2, [sp, #24]
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	d13f      	bne.n	80074a0 <_printf_float+0x17c>
 8007420:	2306      	movs	r3, #6
 8007422:	6063      	str	r3, [r4, #4]
 8007424:	9b05      	ldr	r3, [sp, #20]
 8007426:	6861      	ldr	r1, [r4, #4]
 8007428:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800742c:	2300      	movs	r3, #0
 800742e:	9303      	str	r3, [sp, #12]
 8007430:	ab0a      	add	r3, sp, #40	; 0x28
 8007432:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007436:	ab09      	add	r3, sp, #36	; 0x24
 8007438:	ec49 8b10 	vmov	d0, r8, r9
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	6022      	str	r2, [r4, #0]
 8007440:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007444:	4628      	mov	r0, r5
 8007446:	f7ff fecd 	bl	80071e4 <__cvt>
 800744a:	9b06      	ldr	r3, [sp, #24]
 800744c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800744e:	2b47      	cmp	r3, #71	; 0x47
 8007450:	4680      	mov	r8, r0
 8007452:	d108      	bne.n	8007466 <_printf_float+0x142>
 8007454:	1cc8      	adds	r0, r1, #3
 8007456:	db02      	blt.n	800745e <_printf_float+0x13a>
 8007458:	6863      	ldr	r3, [r4, #4]
 800745a:	4299      	cmp	r1, r3
 800745c:	dd41      	ble.n	80074e2 <_printf_float+0x1be>
 800745e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007462:	fa5f fb8b 	uxtb.w	fp, fp
 8007466:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800746a:	d820      	bhi.n	80074ae <_printf_float+0x18a>
 800746c:	3901      	subs	r1, #1
 800746e:	465a      	mov	r2, fp
 8007470:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007474:	9109      	str	r1, [sp, #36]	; 0x24
 8007476:	f7ff ff17 	bl	80072a8 <__exponent>
 800747a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800747c:	1813      	adds	r3, r2, r0
 800747e:	2a01      	cmp	r2, #1
 8007480:	4681      	mov	r9, r0
 8007482:	6123      	str	r3, [r4, #16]
 8007484:	dc02      	bgt.n	800748c <_printf_float+0x168>
 8007486:	6822      	ldr	r2, [r4, #0]
 8007488:	07d2      	lsls	r2, r2, #31
 800748a:	d501      	bpl.n	8007490 <_printf_float+0x16c>
 800748c:	3301      	adds	r3, #1
 800748e:	6123      	str	r3, [r4, #16]
 8007490:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007494:	2b00      	cmp	r3, #0
 8007496:	d09c      	beq.n	80073d2 <_printf_float+0xae>
 8007498:	232d      	movs	r3, #45	; 0x2d
 800749a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800749e:	e798      	b.n	80073d2 <_printf_float+0xae>
 80074a0:	9a06      	ldr	r2, [sp, #24]
 80074a2:	2a47      	cmp	r2, #71	; 0x47
 80074a4:	d1be      	bne.n	8007424 <_printf_float+0x100>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1bc      	bne.n	8007424 <_printf_float+0x100>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e7b9      	b.n	8007422 <_printf_float+0xfe>
 80074ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80074b2:	d118      	bne.n	80074e6 <_printf_float+0x1c2>
 80074b4:	2900      	cmp	r1, #0
 80074b6:	6863      	ldr	r3, [r4, #4]
 80074b8:	dd0b      	ble.n	80074d2 <_printf_float+0x1ae>
 80074ba:	6121      	str	r1, [r4, #16]
 80074bc:	b913      	cbnz	r3, 80074c4 <_printf_float+0x1a0>
 80074be:	6822      	ldr	r2, [r4, #0]
 80074c0:	07d0      	lsls	r0, r2, #31
 80074c2:	d502      	bpl.n	80074ca <_printf_float+0x1a6>
 80074c4:	3301      	adds	r3, #1
 80074c6:	440b      	add	r3, r1
 80074c8:	6123      	str	r3, [r4, #16]
 80074ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80074cc:	f04f 0900 	mov.w	r9, #0
 80074d0:	e7de      	b.n	8007490 <_printf_float+0x16c>
 80074d2:	b913      	cbnz	r3, 80074da <_printf_float+0x1b6>
 80074d4:	6822      	ldr	r2, [r4, #0]
 80074d6:	07d2      	lsls	r2, r2, #31
 80074d8:	d501      	bpl.n	80074de <_printf_float+0x1ba>
 80074da:	3302      	adds	r3, #2
 80074dc:	e7f4      	b.n	80074c8 <_printf_float+0x1a4>
 80074de:	2301      	movs	r3, #1
 80074e0:	e7f2      	b.n	80074c8 <_printf_float+0x1a4>
 80074e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e8:	4299      	cmp	r1, r3
 80074ea:	db05      	blt.n	80074f8 <_printf_float+0x1d4>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	6121      	str	r1, [r4, #16]
 80074f0:	07d8      	lsls	r0, r3, #31
 80074f2:	d5ea      	bpl.n	80074ca <_printf_float+0x1a6>
 80074f4:	1c4b      	adds	r3, r1, #1
 80074f6:	e7e7      	b.n	80074c8 <_printf_float+0x1a4>
 80074f8:	2900      	cmp	r1, #0
 80074fa:	bfd4      	ite	le
 80074fc:	f1c1 0202 	rsble	r2, r1, #2
 8007500:	2201      	movgt	r2, #1
 8007502:	4413      	add	r3, r2
 8007504:	e7e0      	b.n	80074c8 <_printf_float+0x1a4>
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	055a      	lsls	r2, r3, #21
 800750a:	d407      	bmi.n	800751c <_printf_float+0x1f8>
 800750c:	6923      	ldr	r3, [r4, #16]
 800750e:	4642      	mov	r2, r8
 8007510:	4631      	mov	r1, r6
 8007512:	4628      	mov	r0, r5
 8007514:	47b8      	blx	r7
 8007516:	3001      	adds	r0, #1
 8007518:	d12c      	bne.n	8007574 <_printf_float+0x250>
 800751a:	e764      	b.n	80073e6 <_printf_float+0xc2>
 800751c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007520:	f240 80e0 	bls.w	80076e4 <_printf_float+0x3c0>
 8007524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007528:	2200      	movs	r2, #0
 800752a:	2300      	movs	r3, #0
 800752c:	f7f9 facc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007530:	2800      	cmp	r0, #0
 8007532:	d034      	beq.n	800759e <_printf_float+0x27a>
 8007534:	4a37      	ldr	r2, [pc, #220]	; (8007614 <_printf_float+0x2f0>)
 8007536:	2301      	movs	r3, #1
 8007538:	4631      	mov	r1, r6
 800753a:	4628      	mov	r0, r5
 800753c:	47b8      	blx	r7
 800753e:	3001      	adds	r0, #1
 8007540:	f43f af51 	beq.w	80073e6 <_printf_float+0xc2>
 8007544:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007548:	429a      	cmp	r2, r3
 800754a:	db02      	blt.n	8007552 <_printf_float+0x22e>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	07d8      	lsls	r0, r3, #31
 8007550:	d510      	bpl.n	8007574 <_printf_float+0x250>
 8007552:	ee18 3a10 	vmov	r3, s16
 8007556:	4652      	mov	r2, sl
 8007558:	4631      	mov	r1, r6
 800755a:	4628      	mov	r0, r5
 800755c:	47b8      	blx	r7
 800755e:	3001      	adds	r0, #1
 8007560:	f43f af41 	beq.w	80073e6 <_printf_float+0xc2>
 8007564:	f04f 0800 	mov.w	r8, #0
 8007568:	f104 091a 	add.w	r9, r4, #26
 800756c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800756e:	3b01      	subs	r3, #1
 8007570:	4543      	cmp	r3, r8
 8007572:	dc09      	bgt.n	8007588 <_printf_float+0x264>
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	079b      	lsls	r3, r3, #30
 8007578:	f100 8105 	bmi.w	8007786 <_printf_float+0x462>
 800757c:	68e0      	ldr	r0, [r4, #12]
 800757e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007580:	4298      	cmp	r0, r3
 8007582:	bfb8      	it	lt
 8007584:	4618      	movlt	r0, r3
 8007586:	e730      	b.n	80073ea <_printf_float+0xc6>
 8007588:	2301      	movs	r3, #1
 800758a:	464a      	mov	r2, r9
 800758c:	4631      	mov	r1, r6
 800758e:	4628      	mov	r0, r5
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	f43f af27 	beq.w	80073e6 <_printf_float+0xc2>
 8007598:	f108 0801 	add.w	r8, r8, #1
 800759c:	e7e6      	b.n	800756c <_printf_float+0x248>
 800759e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	dc39      	bgt.n	8007618 <_printf_float+0x2f4>
 80075a4:	4a1b      	ldr	r2, [pc, #108]	; (8007614 <_printf_float+0x2f0>)
 80075a6:	2301      	movs	r3, #1
 80075a8:	4631      	mov	r1, r6
 80075aa:	4628      	mov	r0, r5
 80075ac:	47b8      	blx	r7
 80075ae:	3001      	adds	r0, #1
 80075b0:	f43f af19 	beq.w	80073e6 <_printf_float+0xc2>
 80075b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075b8:	4313      	orrs	r3, r2
 80075ba:	d102      	bne.n	80075c2 <_printf_float+0x29e>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	07d9      	lsls	r1, r3, #31
 80075c0:	d5d8      	bpl.n	8007574 <_printf_float+0x250>
 80075c2:	ee18 3a10 	vmov	r3, s16
 80075c6:	4652      	mov	r2, sl
 80075c8:	4631      	mov	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	f43f af09 	beq.w	80073e6 <_printf_float+0xc2>
 80075d4:	f04f 0900 	mov.w	r9, #0
 80075d8:	f104 0a1a 	add.w	sl, r4, #26
 80075dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075de:	425b      	negs	r3, r3
 80075e0:	454b      	cmp	r3, r9
 80075e2:	dc01      	bgt.n	80075e8 <_printf_float+0x2c4>
 80075e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e6:	e792      	b.n	800750e <_printf_float+0x1ea>
 80075e8:	2301      	movs	r3, #1
 80075ea:	4652      	mov	r2, sl
 80075ec:	4631      	mov	r1, r6
 80075ee:	4628      	mov	r0, r5
 80075f0:	47b8      	blx	r7
 80075f2:	3001      	adds	r0, #1
 80075f4:	f43f aef7 	beq.w	80073e6 <_printf_float+0xc2>
 80075f8:	f109 0901 	add.w	r9, r9, #1
 80075fc:	e7ee      	b.n	80075dc <_printf_float+0x2b8>
 80075fe:	bf00      	nop
 8007600:	7fefffff 	.word	0x7fefffff
 8007604:	0800bd5c 	.word	0x0800bd5c
 8007608:	0800bd60 	.word	0x0800bd60
 800760c:	0800bd68 	.word	0x0800bd68
 8007610:	0800bd64 	.word	0x0800bd64
 8007614:	0800bd6c 	.word	0x0800bd6c
 8007618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800761a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800761c:	429a      	cmp	r2, r3
 800761e:	bfa8      	it	ge
 8007620:	461a      	movge	r2, r3
 8007622:	2a00      	cmp	r2, #0
 8007624:	4691      	mov	r9, r2
 8007626:	dc37      	bgt.n	8007698 <_printf_float+0x374>
 8007628:	f04f 0b00 	mov.w	fp, #0
 800762c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007630:	f104 021a 	add.w	r2, r4, #26
 8007634:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007636:	9305      	str	r3, [sp, #20]
 8007638:	eba3 0309 	sub.w	r3, r3, r9
 800763c:	455b      	cmp	r3, fp
 800763e:	dc33      	bgt.n	80076a8 <_printf_float+0x384>
 8007640:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007644:	429a      	cmp	r2, r3
 8007646:	db3b      	blt.n	80076c0 <_printf_float+0x39c>
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	07da      	lsls	r2, r3, #31
 800764c:	d438      	bmi.n	80076c0 <_printf_float+0x39c>
 800764e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007650:	9a05      	ldr	r2, [sp, #20]
 8007652:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007654:	1a9a      	subs	r2, r3, r2
 8007656:	eba3 0901 	sub.w	r9, r3, r1
 800765a:	4591      	cmp	r9, r2
 800765c:	bfa8      	it	ge
 800765e:	4691      	movge	r9, r2
 8007660:	f1b9 0f00 	cmp.w	r9, #0
 8007664:	dc35      	bgt.n	80076d2 <_printf_float+0x3ae>
 8007666:	f04f 0800 	mov.w	r8, #0
 800766a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800766e:	f104 0a1a 	add.w	sl, r4, #26
 8007672:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007676:	1a9b      	subs	r3, r3, r2
 8007678:	eba3 0309 	sub.w	r3, r3, r9
 800767c:	4543      	cmp	r3, r8
 800767e:	f77f af79 	ble.w	8007574 <_printf_float+0x250>
 8007682:	2301      	movs	r3, #1
 8007684:	4652      	mov	r2, sl
 8007686:	4631      	mov	r1, r6
 8007688:	4628      	mov	r0, r5
 800768a:	47b8      	blx	r7
 800768c:	3001      	adds	r0, #1
 800768e:	f43f aeaa 	beq.w	80073e6 <_printf_float+0xc2>
 8007692:	f108 0801 	add.w	r8, r8, #1
 8007696:	e7ec      	b.n	8007672 <_printf_float+0x34e>
 8007698:	4613      	mov	r3, r2
 800769a:	4631      	mov	r1, r6
 800769c:	4642      	mov	r2, r8
 800769e:	4628      	mov	r0, r5
 80076a0:	47b8      	blx	r7
 80076a2:	3001      	adds	r0, #1
 80076a4:	d1c0      	bne.n	8007628 <_printf_float+0x304>
 80076a6:	e69e      	b.n	80073e6 <_printf_float+0xc2>
 80076a8:	2301      	movs	r3, #1
 80076aa:	4631      	mov	r1, r6
 80076ac:	4628      	mov	r0, r5
 80076ae:	9205      	str	r2, [sp, #20]
 80076b0:	47b8      	blx	r7
 80076b2:	3001      	adds	r0, #1
 80076b4:	f43f ae97 	beq.w	80073e6 <_printf_float+0xc2>
 80076b8:	9a05      	ldr	r2, [sp, #20]
 80076ba:	f10b 0b01 	add.w	fp, fp, #1
 80076be:	e7b9      	b.n	8007634 <_printf_float+0x310>
 80076c0:	ee18 3a10 	vmov	r3, s16
 80076c4:	4652      	mov	r2, sl
 80076c6:	4631      	mov	r1, r6
 80076c8:	4628      	mov	r0, r5
 80076ca:	47b8      	blx	r7
 80076cc:	3001      	adds	r0, #1
 80076ce:	d1be      	bne.n	800764e <_printf_float+0x32a>
 80076d0:	e689      	b.n	80073e6 <_printf_float+0xc2>
 80076d2:	9a05      	ldr	r2, [sp, #20]
 80076d4:	464b      	mov	r3, r9
 80076d6:	4442      	add	r2, r8
 80076d8:	4631      	mov	r1, r6
 80076da:	4628      	mov	r0, r5
 80076dc:	47b8      	blx	r7
 80076de:	3001      	adds	r0, #1
 80076e0:	d1c1      	bne.n	8007666 <_printf_float+0x342>
 80076e2:	e680      	b.n	80073e6 <_printf_float+0xc2>
 80076e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076e6:	2a01      	cmp	r2, #1
 80076e8:	dc01      	bgt.n	80076ee <_printf_float+0x3ca>
 80076ea:	07db      	lsls	r3, r3, #31
 80076ec:	d538      	bpl.n	8007760 <_printf_float+0x43c>
 80076ee:	2301      	movs	r3, #1
 80076f0:	4642      	mov	r2, r8
 80076f2:	4631      	mov	r1, r6
 80076f4:	4628      	mov	r0, r5
 80076f6:	47b8      	blx	r7
 80076f8:	3001      	adds	r0, #1
 80076fa:	f43f ae74 	beq.w	80073e6 <_printf_float+0xc2>
 80076fe:	ee18 3a10 	vmov	r3, s16
 8007702:	4652      	mov	r2, sl
 8007704:	4631      	mov	r1, r6
 8007706:	4628      	mov	r0, r5
 8007708:	47b8      	blx	r7
 800770a:	3001      	adds	r0, #1
 800770c:	f43f ae6b 	beq.w	80073e6 <_printf_float+0xc2>
 8007710:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007714:	2200      	movs	r2, #0
 8007716:	2300      	movs	r3, #0
 8007718:	f7f9 f9d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800771c:	b9d8      	cbnz	r0, 8007756 <_printf_float+0x432>
 800771e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007720:	f108 0201 	add.w	r2, r8, #1
 8007724:	3b01      	subs	r3, #1
 8007726:	4631      	mov	r1, r6
 8007728:	4628      	mov	r0, r5
 800772a:	47b8      	blx	r7
 800772c:	3001      	adds	r0, #1
 800772e:	d10e      	bne.n	800774e <_printf_float+0x42a>
 8007730:	e659      	b.n	80073e6 <_printf_float+0xc2>
 8007732:	2301      	movs	r3, #1
 8007734:	4652      	mov	r2, sl
 8007736:	4631      	mov	r1, r6
 8007738:	4628      	mov	r0, r5
 800773a:	47b8      	blx	r7
 800773c:	3001      	adds	r0, #1
 800773e:	f43f ae52 	beq.w	80073e6 <_printf_float+0xc2>
 8007742:	f108 0801 	add.w	r8, r8, #1
 8007746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007748:	3b01      	subs	r3, #1
 800774a:	4543      	cmp	r3, r8
 800774c:	dcf1      	bgt.n	8007732 <_printf_float+0x40e>
 800774e:	464b      	mov	r3, r9
 8007750:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007754:	e6dc      	b.n	8007510 <_printf_float+0x1ec>
 8007756:	f04f 0800 	mov.w	r8, #0
 800775a:	f104 0a1a 	add.w	sl, r4, #26
 800775e:	e7f2      	b.n	8007746 <_printf_float+0x422>
 8007760:	2301      	movs	r3, #1
 8007762:	4642      	mov	r2, r8
 8007764:	e7df      	b.n	8007726 <_printf_float+0x402>
 8007766:	2301      	movs	r3, #1
 8007768:	464a      	mov	r2, r9
 800776a:	4631      	mov	r1, r6
 800776c:	4628      	mov	r0, r5
 800776e:	47b8      	blx	r7
 8007770:	3001      	adds	r0, #1
 8007772:	f43f ae38 	beq.w	80073e6 <_printf_float+0xc2>
 8007776:	f108 0801 	add.w	r8, r8, #1
 800777a:	68e3      	ldr	r3, [r4, #12]
 800777c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800777e:	1a5b      	subs	r3, r3, r1
 8007780:	4543      	cmp	r3, r8
 8007782:	dcf0      	bgt.n	8007766 <_printf_float+0x442>
 8007784:	e6fa      	b.n	800757c <_printf_float+0x258>
 8007786:	f04f 0800 	mov.w	r8, #0
 800778a:	f104 0919 	add.w	r9, r4, #25
 800778e:	e7f4      	b.n	800777a <_printf_float+0x456>

08007790 <_printf_common>:
 8007790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	4616      	mov	r6, r2
 8007796:	4699      	mov	r9, r3
 8007798:	688a      	ldr	r2, [r1, #8]
 800779a:	690b      	ldr	r3, [r1, #16]
 800779c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077a0:	4293      	cmp	r3, r2
 80077a2:	bfb8      	it	lt
 80077a4:	4613      	movlt	r3, r2
 80077a6:	6033      	str	r3, [r6, #0]
 80077a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077ac:	4607      	mov	r7, r0
 80077ae:	460c      	mov	r4, r1
 80077b0:	b10a      	cbz	r2, 80077b6 <_printf_common+0x26>
 80077b2:	3301      	adds	r3, #1
 80077b4:	6033      	str	r3, [r6, #0]
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	0699      	lsls	r1, r3, #26
 80077ba:	bf42      	ittt	mi
 80077bc:	6833      	ldrmi	r3, [r6, #0]
 80077be:	3302      	addmi	r3, #2
 80077c0:	6033      	strmi	r3, [r6, #0]
 80077c2:	6825      	ldr	r5, [r4, #0]
 80077c4:	f015 0506 	ands.w	r5, r5, #6
 80077c8:	d106      	bne.n	80077d8 <_printf_common+0x48>
 80077ca:	f104 0a19 	add.w	sl, r4, #25
 80077ce:	68e3      	ldr	r3, [r4, #12]
 80077d0:	6832      	ldr	r2, [r6, #0]
 80077d2:	1a9b      	subs	r3, r3, r2
 80077d4:	42ab      	cmp	r3, r5
 80077d6:	dc26      	bgt.n	8007826 <_printf_common+0x96>
 80077d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077dc:	1e13      	subs	r3, r2, #0
 80077de:	6822      	ldr	r2, [r4, #0]
 80077e0:	bf18      	it	ne
 80077e2:	2301      	movne	r3, #1
 80077e4:	0692      	lsls	r2, r2, #26
 80077e6:	d42b      	bmi.n	8007840 <_printf_common+0xb0>
 80077e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077ec:	4649      	mov	r1, r9
 80077ee:	4638      	mov	r0, r7
 80077f0:	47c0      	blx	r8
 80077f2:	3001      	adds	r0, #1
 80077f4:	d01e      	beq.n	8007834 <_printf_common+0xa4>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	68e5      	ldr	r5, [r4, #12]
 80077fa:	6832      	ldr	r2, [r6, #0]
 80077fc:	f003 0306 	and.w	r3, r3, #6
 8007800:	2b04      	cmp	r3, #4
 8007802:	bf08      	it	eq
 8007804:	1aad      	subeq	r5, r5, r2
 8007806:	68a3      	ldr	r3, [r4, #8]
 8007808:	6922      	ldr	r2, [r4, #16]
 800780a:	bf0c      	ite	eq
 800780c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007810:	2500      	movne	r5, #0
 8007812:	4293      	cmp	r3, r2
 8007814:	bfc4      	itt	gt
 8007816:	1a9b      	subgt	r3, r3, r2
 8007818:	18ed      	addgt	r5, r5, r3
 800781a:	2600      	movs	r6, #0
 800781c:	341a      	adds	r4, #26
 800781e:	42b5      	cmp	r5, r6
 8007820:	d11a      	bne.n	8007858 <_printf_common+0xc8>
 8007822:	2000      	movs	r0, #0
 8007824:	e008      	b.n	8007838 <_printf_common+0xa8>
 8007826:	2301      	movs	r3, #1
 8007828:	4652      	mov	r2, sl
 800782a:	4649      	mov	r1, r9
 800782c:	4638      	mov	r0, r7
 800782e:	47c0      	blx	r8
 8007830:	3001      	adds	r0, #1
 8007832:	d103      	bne.n	800783c <_printf_common+0xac>
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
 8007838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783c:	3501      	adds	r5, #1
 800783e:	e7c6      	b.n	80077ce <_printf_common+0x3e>
 8007840:	18e1      	adds	r1, r4, r3
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	2030      	movs	r0, #48	; 0x30
 8007846:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800784a:	4422      	add	r2, r4
 800784c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007850:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007854:	3302      	adds	r3, #2
 8007856:	e7c7      	b.n	80077e8 <_printf_common+0x58>
 8007858:	2301      	movs	r3, #1
 800785a:	4622      	mov	r2, r4
 800785c:	4649      	mov	r1, r9
 800785e:	4638      	mov	r0, r7
 8007860:	47c0      	blx	r8
 8007862:	3001      	adds	r0, #1
 8007864:	d0e6      	beq.n	8007834 <_printf_common+0xa4>
 8007866:	3601      	adds	r6, #1
 8007868:	e7d9      	b.n	800781e <_printf_common+0x8e>
	...

0800786c <_printf_i>:
 800786c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007870:	7e0f      	ldrb	r7, [r1, #24]
 8007872:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007874:	2f78      	cmp	r7, #120	; 0x78
 8007876:	4691      	mov	r9, r2
 8007878:	4680      	mov	r8, r0
 800787a:	460c      	mov	r4, r1
 800787c:	469a      	mov	sl, r3
 800787e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007882:	d807      	bhi.n	8007894 <_printf_i+0x28>
 8007884:	2f62      	cmp	r7, #98	; 0x62
 8007886:	d80a      	bhi.n	800789e <_printf_i+0x32>
 8007888:	2f00      	cmp	r7, #0
 800788a:	f000 80d8 	beq.w	8007a3e <_printf_i+0x1d2>
 800788e:	2f58      	cmp	r7, #88	; 0x58
 8007890:	f000 80a3 	beq.w	80079da <_printf_i+0x16e>
 8007894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007898:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800789c:	e03a      	b.n	8007914 <_printf_i+0xa8>
 800789e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078a2:	2b15      	cmp	r3, #21
 80078a4:	d8f6      	bhi.n	8007894 <_printf_i+0x28>
 80078a6:	a101      	add	r1, pc, #4	; (adr r1, 80078ac <_printf_i+0x40>)
 80078a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078ac:	08007905 	.word	0x08007905
 80078b0:	08007919 	.word	0x08007919
 80078b4:	08007895 	.word	0x08007895
 80078b8:	08007895 	.word	0x08007895
 80078bc:	08007895 	.word	0x08007895
 80078c0:	08007895 	.word	0x08007895
 80078c4:	08007919 	.word	0x08007919
 80078c8:	08007895 	.word	0x08007895
 80078cc:	08007895 	.word	0x08007895
 80078d0:	08007895 	.word	0x08007895
 80078d4:	08007895 	.word	0x08007895
 80078d8:	08007a25 	.word	0x08007a25
 80078dc:	08007949 	.word	0x08007949
 80078e0:	08007a07 	.word	0x08007a07
 80078e4:	08007895 	.word	0x08007895
 80078e8:	08007895 	.word	0x08007895
 80078ec:	08007a47 	.word	0x08007a47
 80078f0:	08007895 	.word	0x08007895
 80078f4:	08007949 	.word	0x08007949
 80078f8:	08007895 	.word	0x08007895
 80078fc:	08007895 	.word	0x08007895
 8007900:	08007a0f 	.word	0x08007a0f
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	1d1a      	adds	r2, r3, #4
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	602a      	str	r2, [r5, #0]
 800790c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007914:	2301      	movs	r3, #1
 8007916:	e0a3      	b.n	8007a60 <_printf_i+0x1f4>
 8007918:	6820      	ldr	r0, [r4, #0]
 800791a:	6829      	ldr	r1, [r5, #0]
 800791c:	0606      	lsls	r6, r0, #24
 800791e:	f101 0304 	add.w	r3, r1, #4
 8007922:	d50a      	bpl.n	800793a <_printf_i+0xce>
 8007924:	680e      	ldr	r6, [r1, #0]
 8007926:	602b      	str	r3, [r5, #0]
 8007928:	2e00      	cmp	r6, #0
 800792a:	da03      	bge.n	8007934 <_printf_i+0xc8>
 800792c:	232d      	movs	r3, #45	; 0x2d
 800792e:	4276      	negs	r6, r6
 8007930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007934:	485e      	ldr	r0, [pc, #376]	; (8007ab0 <_printf_i+0x244>)
 8007936:	230a      	movs	r3, #10
 8007938:	e019      	b.n	800796e <_printf_i+0x102>
 800793a:	680e      	ldr	r6, [r1, #0]
 800793c:	602b      	str	r3, [r5, #0]
 800793e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007942:	bf18      	it	ne
 8007944:	b236      	sxthne	r6, r6
 8007946:	e7ef      	b.n	8007928 <_printf_i+0xbc>
 8007948:	682b      	ldr	r3, [r5, #0]
 800794a:	6820      	ldr	r0, [r4, #0]
 800794c:	1d19      	adds	r1, r3, #4
 800794e:	6029      	str	r1, [r5, #0]
 8007950:	0601      	lsls	r1, r0, #24
 8007952:	d501      	bpl.n	8007958 <_printf_i+0xec>
 8007954:	681e      	ldr	r6, [r3, #0]
 8007956:	e002      	b.n	800795e <_printf_i+0xf2>
 8007958:	0646      	lsls	r6, r0, #25
 800795a:	d5fb      	bpl.n	8007954 <_printf_i+0xe8>
 800795c:	881e      	ldrh	r6, [r3, #0]
 800795e:	4854      	ldr	r0, [pc, #336]	; (8007ab0 <_printf_i+0x244>)
 8007960:	2f6f      	cmp	r7, #111	; 0x6f
 8007962:	bf0c      	ite	eq
 8007964:	2308      	moveq	r3, #8
 8007966:	230a      	movne	r3, #10
 8007968:	2100      	movs	r1, #0
 800796a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800796e:	6865      	ldr	r5, [r4, #4]
 8007970:	60a5      	str	r5, [r4, #8]
 8007972:	2d00      	cmp	r5, #0
 8007974:	bfa2      	ittt	ge
 8007976:	6821      	ldrge	r1, [r4, #0]
 8007978:	f021 0104 	bicge.w	r1, r1, #4
 800797c:	6021      	strge	r1, [r4, #0]
 800797e:	b90e      	cbnz	r6, 8007984 <_printf_i+0x118>
 8007980:	2d00      	cmp	r5, #0
 8007982:	d04d      	beq.n	8007a20 <_printf_i+0x1b4>
 8007984:	4615      	mov	r5, r2
 8007986:	fbb6 f1f3 	udiv	r1, r6, r3
 800798a:	fb03 6711 	mls	r7, r3, r1, r6
 800798e:	5dc7      	ldrb	r7, [r0, r7]
 8007990:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007994:	4637      	mov	r7, r6
 8007996:	42bb      	cmp	r3, r7
 8007998:	460e      	mov	r6, r1
 800799a:	d9f4      	bls.n	8007986 <_printf_i+0x11a>
 800799c:	2b08      	cmp	r3, #8
 800799e:	d10b      	bne.n	80079b8 <_printf_i+0x14c>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	07de      	lsls	r6, r3, #31
 80079a4:	d508      	bpl.n	80079b8 <_printf_i+0x14c>
 80079a6:	6923      	ldr	r3, [r4, #16]
 80079a8:	6861      	ldr	r1, [r4, #4]
 80079aa:	4299      	cmp	r1, r3
 80079ac:	bfde      	ittt	le
 80079ae:	2330      	movle	r3, #48	; 0x30
 80079b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079b8:	1b52      	subs	r2, r2, r5
 80079ba:	6122      	str	r2, [r4, #16]
 80079bc:	f8cd a000 	str.w	sl, [sp]
 80079c0:	464b      	mov	r3, r9
 80079c2:	aa03      	add	r2, sp, #12
 80079c4:	4621      	mov	r1, r4
 80079c6:	4640      	mov	r0, r8
 80079c8:	f7ff fee2 	bl	8007790 <_printf_common>
 80079cc:	3001      	adds	r0, #1
 80079ce:	d14c      	bne.n	8007a6a <_printf_i+0x1fe>
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	b004      	add	sp, #16
 80079d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079da:	4835      	ldr	r0, [pc, #212]	; (8007ab0 <_printf_i+0x244>)
 80079dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079e0:	6829      	ldr	r1, [r5, #0]
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80079e8:	6029      	str	r1, [r5, #0]
 80079ea:	061d      	lsls	r5, r3, #24
 80079ec:	d514      	bpl.n	8007a18 <_printf_i+0x1ac>
 80079ee:	07df      	lsls	r7, r3, #31
 80079f0:	bf44      	itt	mi
 80079f2:	f043 0320 	orrmi.w	r3, r3, #32
 80079f6:	6023      	strmi	r3, [r4, #0]
 80079f8:	b91e      	cbnz	r6, 8007a02 <_printf_i+0x196>
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	f023 0320 	bic.w	r3, r3, #32
 8007a00:	6023      	str	r3, [r4, #0]
 8007a02:	2310      	movs	r3, #16
 8007a04:	e7b0      	b.n	8007968 <_printf_i+0xfc>
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	f043 0320 	orr.w	r3, r3, #32
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	2378      	movs	r3, #120	; 0x78
 8007a10:	4828      	ldr	r0, [pc, #160]	; (8007ab4 <_printf_i+0x248>)
 8007a12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a16:	e7e3      	b.n	80079e0 <_printf_i+0x174>
 8007a18:	0659      	lsls	r1, r3, #25
 8007a1a:	bf48      	it	mi
 8007a1c:	b2b6      	uxthmi	r6, r6
 8007a1e:	e7e6      	b.n	80079ee <_printf_i+0x182>
 8007a20:	4615      	mov	r5, r2
 8007a22:	e7bb      	b.n	800799c <_printf_i+0x130>
 8007a24:	682b      	ldr	r3, [r5, #0]
 8007a26:	6826      	ldr	r6, [r4, #0]
 8007a28:	6961      	ldr	r1, [r4, #20]
 8007a2a:	1d18      	adds	r0, r3, #4
 8007a2c:	6028      	str	r0, [r5, #0]
 8007a2e:	0635      	lsls	r5, r6, #24
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	d501      	bpl.n	8007a38 <_printf_i+0x1cc>
 8007a34:	6019      	str	r1, [r3, #0]
 8007a36:	e002      	b.n	8007a3e <_printf_i+0x1d2>
 8007a38:	0670      	lsls	r0, r6, #25
 8007a3a:	d5fb      	bpl.n	8007a34 <_printf_i+0x1c8>
 8007a3c:	8019      	strh	r1, [r3, #0]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	6123      	str	r3, [r4, #16]
 8007a42:	4615      	mov	r5, r2
 8007a44:	e7ba      	b.n	80079bc <_printf_i+0x150>
 8007a46:	682b      	ldr	r3, [r5, #0]
 8007a48:	1d1a      	adds	r2, r3, #4
 8007a4a:	602a      	str	r2, [r5, #0]
 8007a4c:	681d      	ldr	r5, [r3, #0]
 8007a4e:	6862      	ldr	r2, [r4, #4]
 8007a50:	2100      	movs	r1, #0
 8007a52:	4628      	mov	r0, r5
 8007a54:	f7f8 fbc4 	bl	80001e0 <memchr>
 8007a58:	b108      	cbz	r0, 8007a5e <_printf_i+0x1f2>
 8007a5a:	1b40      	subs	r0, r0, r5
 8007a5c:	6060      	str	r0, [r4, #4]
 8007a5e:	6863      	ldr	r3, [r4, #4]
 8007a60:	6123      	str	r3, [r4, #16]
 8007a62:	2300      	movs	r3, #0
 8007a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a68:	e7a8      	b.n	80079bc <_printf_i+0x150>
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	462a      	mov	r2, r5
 8007a6e:	4649      	mov	r1, r9
 8007a70:	4640      	mov	r0, r8
 8007a72:	47d0      	blx	sl
 8007a74:	3001      	adds	r0, #1
 8007a76:	d0ab      	beq.n	80079d0 <_printf_i+0x164>
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	079b      	lsls	r3, r3, #30
 8007a7c:	d413      	bmi.n	8007aa6 <_printf_i+0x23a>
 8007a7e:	68e0      	ldr	r0, [r4, #12]
 8007a80:	9b03      	ldr	r3, [sp, #12]
 8007a82:	4298      	cmp	r0, r3
 8007a84:	bfb8      	it	lt
 8007a86:	4618      	movlt	r0, r3
 8007a88:	e7a4      	b.n	80079d4 <_printf_i+0x168>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	4632      	mov	r2, r6
 8007a8e:	4649      	mov	r1, r9
 8007a90:	4640      	mov	r0, r8
 8007a92:	47d0      	blx	sl
 8007a94:	3001      	adds	r0, #1
 8007a96:	d09b      	beq.n	80079d0 <_printf_i+0x164>
 8007a98:	3501      	adds	r5, #1
 8007a9a:	68e3      	ldr	r3, [r4, #12]
 8007a9c:	9903      	ldr	r1, [sp, #12]
 8007a9e:	1a5b      	subs	r3, r3, r1
 8007aa0:	42ab      	cmp	r3, r5
 8007aa2:	dcf2      	bgt.n	8007a8a <_printf_i+0x21e>
 8007aa4:	e7eb      	b.n	8007a7e <_printf_i+0x212>
 8007aa6:	2500      	movs	r5, #0
 8007aa8:	f104 0619 	add.w	r6, r4, #25
 8007aac:	e7f5      	b.n	8007a9a <_printf_i+0x22e>
 8007aae:	bf00      	nop
 8007ab0:	0800bd6e 	.word	0x0800bd6e
 8007ab4:	0800bd7f 	.word	0x0800bd7f

08007ab8 <_scanf_float>:
 8007ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	b087      	sub	sp, #28
 8007abe:	4617      	mov	r7, r2
 8007ac0:	9303      	str	r3, [sp, #12]
 8007ac2:	688b      	ldr	r3, [r1, #8]
 8007ac4:	1e5a      	subs	r2, r3, #1
 8007ac6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007aca:	bf83      	ittte	hi
 8007acc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007ad0:	195b      	addhi	r3, r3, r5
 8007ad2:	9302      	strhi	r3, [sp, #8]
 8007ad4:	2300      	movls	r3, #0
 8007ad6:	bf86      	itte	hi
 8007ad8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007adc:	608b      	strhi	r3, [r1, #8]
 8007ade:	9302      	strls	r3, [sp, #8]
 8007ae0:	680b      	ldr	r3, [r1, #0]
 8007ae2:	468b      	mov	fp, r1
 8007ae4:	2500      	movs	r5, #0
 8007ae6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007aea:	f84b 3b1c 	str.w	r3, [fp], #28
 8007aee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007af2:	4680      	mov	r8, r0
 8007af4:	460c      	mov	r4, r1
 8007af6:	465e      	mov	r6, fp
 8007af8:	46aa      	mov	sl, r5
 8007afa:	46a9      	mov	r9, r5
 8007afc:	9501      	str	r5, [sp, #4]
 8007afe:	68a2      	ldr	r2, [r4, #8]
 8007b00:	b152      	cbz	r2, 8007b18 <_scanf_float+0x60>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	2b4e      	cmp	r3, #78	; 0x4e
 8007b08:	d864      	bhi.n	8007bd4 <_scanf_float+0x11c>
 8007b0a:	2b40      	cmp	r3, #64	; 0x40
 8007b0c:	d83c      	bhi.n	8007b88 <_scanf_float+0xd0>
 8007b0e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007b12:	b2c8      	uxtb	r0, r1
 8007b14:	280e      	cmp	r0, #14
 8007b16:	d93a      	bls.n	8007b8e <_scanf_float+0xd6>
 8007b18:	f1b9 0f00 	cmp.w	r9, #0
 8007b1c:	d003      	beq.n	8007b26 <_scanf_float+0x6e>
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b2a:	f1ba 0f01 	cmp.w	sl, #1
 8007b2e:	f200 8113 	bhi.w	8007d58 <_scanf_float+0x2a0>
 8007b32:	455e      	cmp	r6, fp
 8007b34:	f200 8105 	bhi.w	8007d42 <_scanf_float+0x28a>
 8007b38:	2501      	movs	r5, #1
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	b007      	add	sp, #28
 8007b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b42:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007b46:	2a0d      	cmp	r2, #13
 8007b48:	d8e6      	bhi.n	8007b18 <_scanf_float+0x60>
 8007b4a:	a101      	add	r1, pc, #4	; (adr r1, 8007b50 <_scanf_float+0x98>)
 8007b4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b50:	08007c8f 	.word	0x08007c8f
 8007b54:	08007b19 	.word	0x08007b19
 8007b58:	08007b19 	.word	0x08007b19
 8007b5c:	08007b19 	.word	0x08007b19
 8007b60:	08007cef 	.word	0x08007cef
 8007b64:	08007cc7 	.word	0x08007cc7
 8007b68:	08007b19 	.word	0x08007b19
 8007b6c:	08007b19 	.word	0x08007b19
 8007b70:	08007c9d 	.word	0x08007c9d
 8007b74:	08007b19 	.word	0x08007b19
 8007b78:	08007b19 	.word	0x08007b19
 8007b7c:	08007b19 	.word	0x08007b19
 8007b80:	08007b19 	.word	0x08007b19
 8007b84:	08007c55 	.word	0x08007c55
 8007b88:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007b8c:	e7db      	b.n	8007b46 <_scanf_float+0x8e>
 8007b8e:	290e      	cmp	r1, #14
 8007b90:	d8c2      	bhi.n	8007b18 <_scanf_float+0x60>
 8007b92:	a001      	add	r0, pc, #4	; (adr r0, 8007b98 <_scanf_float+0xe0>)
 8007b94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007b98:	08007c47 	.word	0x08007c47
 8007b9c:	08007b19 	.word	0x08007b19
 8007ba0:	08007c47 	.word	0x08007c47
 8007ba4:	08007cdb 	.word	0x08007cdb
 8007ba8:	08007b19 	.word	0x08007b19
 8007bac:	08007bf5 	.word	0x08007bf5
 8007bb0:	08007c31 	.word	0x08007c31
 8007bb4:	08007c31 	.word	0x08007c31
 8007bb8:	08007c31 	.word	0x08007c31
 8007bbc:	08007c31 	.word	0x08007c31
 8007bc0:	08007c31 	.word	0x08007c31
 8007bc4:	08007c31 	.word	0x08007c31
 8007bc8:	08007c31 	.word	0x08007c31
 8007bcc:	08007c31 	.word	0x08007c31
 8007bd0:	08007c31 	.word	0x08007c31
 8007bd4:	2b6e      	cmp	r3, #110	; 0x6e
 8007bd6:	d809      	bhi.n	8007bec <_scanf_float+0x134>
 8007bd8:	2b60      	cmp	r3, #96	; 0x60
 8007bda:	d8b2      	bhi.n	8007b42 <_scanf_float+0x8a>
 8007bdc:	2b54      	cmp	r3, #84	; 0x54
 8007bde:	d077      	beq.n	8007cd0 <_scanf_float+0x218>
 8007be0:	2b59      	cmp	r3, #89	; 0x59
 8007be2:	d199      	bne.n	8007b18 <_scanf_float+0x60>
 8007be4:	2d07      	cmp	r5, #7
 8007be6:	d197      	bne.n	8007b18 <_scanf_float+0x60>
 8007be8:	2508      	movs	r5, #8
 8007bea:	e029      	b.n	8007c40 <_scanf_float+0x188>
 8007bec:	2b74      	cmp	r3, #116	; 0x74
 8007bee:	d06f      	beq.n	8007cd0 <_scanf_float+0x218>
 8007bf0:	2b79      	cmp	r3, #121	; 0x79
 8007bf2:	e7f6      	b.n	8007be2 <_scanf_float+0x12a>
 8007bf4:	6821      	ldr	r1, [r4, #0]
 8007bf6:	05c8      	lsls	r0, r1, #23
 8007bf8:	d51a      	bpl.n	8007c30 <_scanf_float+0x178>
 8007bfa:	9b02      	ldr	r3, [sp, #8]
 8007bfc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007c00:	6021      	str	r1, [r4, #0]
 8007c02:	f109 0901 	add.w	r9, r9, #1
 8007c06:	b11b      	cbz	r3, 8007c10 <_scanf_float+0x158>
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	3201      	adds	r2, #1
 8007c0c:	9302      	str	r3, [sp, #8]
 8007c0e:	60a2      	str	r2, [r4, #8]
 8007c10:	68a3      	ldr	r3, [r4, #8]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	60a3      	str	r3, [r4, #8]
 8007c16:	6923      	ldr	r3, [r4, #16]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	6123      	str	r3, [r4, #16]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	607b      	str	r3, [r7, #4]
 8007c24:	f340 8084 	ble.w	8007d30 <_scanf_float+0x278>
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	603b      	str	r3, [r7, #0]
 8007c2e:	e766      	b.n	8007afe <_scanf_float+0x46>
 8007c30:	eb1a 0f05 	cmn.w	sl, r5
 8007c34:	f47f af70 	bne.w	8007b18 <_scanf_float+0x60>
 8007c38:	6822      	ldr	r2, [r4, #0]
 8007c3a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007c3e:	6022      	str	r2, [r4, #0]
 8007c40:	f806 3b01 	strb.w	r3, [r6], #1
 8007c44:	e7e4      	b.n	8007c10 <_scanf_float+0x158>
 8007c46:	6822      	ldr	r2, [r4, #0]
 8007c48:	0610      	lsls	r0, r2, #24
 8007c4a:	f57f af65 	bpl.w	8007b18 <_scanf_float+0x60>
 8007c4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c52:	e7f4      	b.n	8007c3e <_scanf_float+0x186>
 8007c54:	f1ba 0f00 	cmp.w	sl, #0
 8007c58:	d10e      	bne.n	8007c78 <_scanf_float+0x1c0>
 8007c5a:	f1b9 0f00 	cmp.w	r9, #0
 8007c5e:	d10e      	bne.n	8007c7e <_scanf_float+0x1c6>
 8007c60:	6822      	ldr	r2, [r4, #0]
 8007c62:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007c66:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007c6a:	d108      	bne.n	8007c7e <_scanf_float+0x1c6>
 8007c6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c70:	6022      	str	r2, [r4, #0]
 8007c72:	f04f 0a01 	mov.w	sl, #1
 8007c76:	e7e3      	b.n	8007c40 <_scanf_float+0x188>
 8007c78:	f1ba 0f02 	cmp.w	sl, #2
 8007c7c:	d055      	beq.n	8007d2a <_scanf_float+0x272>
 8007c7e:	2d01      	cmp	r5, #1
 8007c80:	d002      	beq.n	8007c88 <_scanf_float+0x1d0>
 8007c82:	2d04      	cmp	r5, #4
 8007c84:	f47f af48 	bne.w	8007b18 <_scanf_float+0x60>
 8007c88:	3501      	adds	r5, #1
 8007c8a:	b2ed      	uxtb	r5, r5
 8007c8c:	e7d8      	b.n	8007c40 <_scanf_float+0x188>
 8007c8e:	f1ba 0f01 	cmp.w	sl, #1
 8007c92:	f47f af41 	bne.w	8007b18 <_scanf_float+0x60>
 8007c96:	f04f 0a02 	mov.w	sl, #2
 8007c9a:	e7d1      	b.n	8007c40 <_scanf_float+0x188>
 8007c9c:	b97d      	cbnz	r5, 8007cbe <_scanf_float+0x206>
 8007c9e:	f1b9 0f00 	cmp.w	r9, #0
 8007ca2:	f47f af3c 	bne.w	8007b1e <_scanf_float+0x66>
 8007ca6:	6822      	ldr	r2, [r4, #0]
 8007ca8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007cac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007cb0:	f47f af39 	bne.w	8007b26 <_scanf_float+0x6e>
 8007cb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007cb8:	6022      	str	r2, [r4, #0]
 8007cba:	2501      	movs	r5, #1
 8007cbc:	e7c0      	b.n	8007c40 <_scanf_float+0x188>
 8007cbe:	2d03      	cmp	r5, #3
 8007cc0:	d0e2      	beq.n	8007c88 <_scanf_float+0x1d0>
 8007cc2:	2d05      	cmp	r5, #5
 8007cc4:	e7de      	b.n	8007c84 <_scanf_float+0x1cc>
 8007cc6:	2d02      	cmp	r5, #2
 8007cc8:	f47f af26 	bne.w	8007b18 <_scanf_float+0x60>
 8007ccc:	2503      	movs	r5, #3
 8007cce:	e7b7      	b.n	8007c40 <_scanf_float+0x188>
 8007cd0:	2d06      	cmp	r5, #6
 8007cd2:	f47f af21 	bne.w	8007b18 <_scanf_float+0x60>
 8007cd6:	2507      	movs	r5, #7
 8007cd8:	e7b2      	b.n	8007c40 <_scanf_float+0x188>
 8007cda:	6822      	ldr	r2, [r4, #0]
 8007cdc:	0591      	lsls	r1, r2, #22
 8007cde:	f57f af1b 	bpl.w	8007b18 <_scanf_float+0x60>
 8007ce2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007ce6:	6022      	str	r2, [r4, #0]
 8007ce8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007cec:	e7a8      	b.n	8007c40 <_scanf_float+0x188>
 8007cee:	6822      	ldr	r2, [r4, #0]
 8007cf0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007cf4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007cf8:	d006      	beq.n	8007d08 <_scanf_float+0x250>
 8007cfa:	0550      	lsls	r0, r2, #21
 8007cfc:	f57f af0c 	bpl.w	8007b18 <_scanf_float+0x60>
 8007d00:	f1b9 0f00 	cmp.w	r9, #0
 8007d04:	f43f af0f 	beq.w	8007b26 <_scanf_float+0x6e>
 8007d08:	0591      	lsls	r1, r2, #22
 8007d0a:	bf58      	it	pl
 8007d0c:	9901      	ldrpl	r1, [sp, #4]
 8007d0e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d12:	bf58      	it	pl
 8007d14:	eba9 0101 	subpl.w	r1, r9, r1
 8007d18:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007d1c:	bf58      	it	pl
 8007d1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007d22:	6022      	str	r2, [r4, #0]
 8007d24:	f04f 0900 	mov.w	r9, #0
 8007d28:	e78a      	b.n	8007c40 <_scanf_float+0x188>
 8007d2a:	f04f 0a03 	mov.w	sl, #3
 8007d2e:	e787      	b.n	8007c40 <_scanf_float+0x188>
 8007d30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007d34:	4639      	mov	r1, r7
 8007d36:	4640      	mov	r0, r8
 8007d38:	4798      	blx	r3
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	f43f aedf 	beq.w	8007afe <_scanf_float+0x46>
 8007d40:	e6ea      	b.n	8007b18 <_scanf_float+0x60>
 8007d42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d4a:	463a      	mov	r2, r7
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	4798      	blx	r3
 8007d50:	6923      	ldr	r3, [r4, #16]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	6123      	str	r3, [r4, #16]
 8007d56:	e6ec      	b.n	8007b32 <_scanf_float+0x7a>
 8007d58:	1e6b      	subs	r3, r5, #1
 8007d5a:	2b06      	cmp	r3, #6
 8007d5c:	d825      	bhi.n	8007daa <_scanf_float+0x2f2>
 8007d5e:	2d02      	cmp	r5, #2
 8007d60:	d836      	bhi.n	8007dd0 <_scanf_float+0x318>
 8007d62:	455e      	cmp	r6, fp
 8007d64:	f67f aee8 	bls.w	8007b38 <_scanf_float+0x80>
 8007d68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d6c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d70:	463a      	mov	r2, r7
 8007d72:	4640      	mov	r0, r8
 8007d74:	4798      	blx	r3
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	6123      	str	r3, [r4, #16]
 8007d7c:	e7f1      	b.n	8007d62 <_scanf_float+0x2aa>
 8007d7e:	9802      	ldr	r0, [sp, #8]
 8007d80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d84:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007d88:	9002      	str	r0, [sp, #8]
 8007d8a:	463a      	mov	r2, r7
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	4798      	blx	r3
 8007d90:	6923      	ldr	r3, [r4, #16]
 8007d92:	3b01      	subs	r3, #1
 8007d94:	6123      	str	r3, [r4, #16]
 8007d96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d9a:	fa5f fa8a 	uxtb.w	sl, sl
 8007d9e:	f1ba 0f02 	cmp.w	sl, #2
 8007da2:	d1ec      	bne.n	8007d7e <_scanf_float+0x2c6>
 8007da4:	3d03      	subs	r5, #3
 8007da6:	b2ed      	uxtb	r5, r5
 8007da8:	1b76      	subs	r6, r6, r5
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	05da      	lsls	r2, r3, #23
 8007dae:	d52f      	bpl.n	8007e10 <_scanf_float+0x358>
 8007db0:	055b      	lsls	r3, r3, #21
 8007db2:	d510      	bpl.n	8007dd6 <_scanf_float+0x31e>
 8007db4:	455e      	cmp	r6, fp
 8007db6:	f67f aebf 	bls.w	8007b38 <_scanf_float+0x80>
 8007dba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007dc2:	463a      	mov	r2, r7
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	4798      	blx	r3
 8007dc8:	6923      	ldr	r3, [r4, #16]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	6123      	str	r3, [r4, #16]
 8007dce:	e7f1      	b.n	8007db4 <_scanf_float+0x2fc>
 8007dd0:	46aa      	mov	sl, r5
 8007dd2:	9602      	str	r6, [sp, #8]
 8007dd4:	e7df      	b.n	8007d96 <_scanf_float+0x2de>
 8007dd6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007dda:	6923      	ldr	r3, [r4, #16]
 8007ddc:	2965      	cmp	r1, #101	; 0x65
 8007dde:	f103 33ff 	add.w	r3, r3, #4294967295
 8007de2:	f106 35ff 	add.w	r5, r6, #4294967295
 8007de6:	6123      	str	r3, [r4, #16]
 8007de8:	d00c      	beq.n	8007e04 <_scanf_float+0x34c>
 8007dea:	2945      	cmp	r1, #69	; 0x45
 8007dec:	d00a      	beq.n	8007e04 <_scanf_float+0x34c>
 8007dee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007df2:	463a      	mov	r2, r7
 8007df4:	4640      	mov	r0, r8
 8007df6:	4798      	blx	r3
 8007df8:	6923      	ldr	r3, [r4, #16]
 8007dfa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	1eb5      	subs	r5, r6, #2
 8007e02:	6123      	str	r3, [r4, #16]
 8007e04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e08:	463a      	mov	r2, r7
 8007e0a:	4640      	mov	r0, r8
 8007e0c:	4798      	blx	r3
 8007e0e:	462e      	mov	r6, r5
 8007e10:	6825      	ldr	r5, [r4, #0]
 8007e12:	f015 0510 	ands.w	r5, r5, #16
 8007e16:	d159      	bne.n	8007ecc <_scanf_float+0x414>
 8007e18:	7035      	strb	r5, [r6, #0]
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e24:	d11b      	bne.n	8007e5e <_scanf_float+0x3a6>
 8007e26:	9b01      	ldr	r3, [sp, #4]
 8007e28:	454b      	cmp	r3, r9
 8007e2a:	eba3 0209 	sub.w	r2, r3, r9
 8007e2e:	d123      	bne.n	8007e78 <_scanf_float+0x3c0>
 8007e30:	2200      	movs	r2, #0
 8007e32:	4659      	mov	r1, fp
 8007e34:	4640      	mov	r0, r8
 8007e36:	f000 fe99 	bl	8008b6c <_strtod_r>
 8007e3a:	6822      	ldr	r2, [r4, #0]
 8007e3c:	9b03      	ldr	r3, [sp, #12]
 8007e3e:	f012 0f02 	tst.w	r2, #2
 8007e42:	ec57 6b10 	vmov	r6, r7, d0
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	d021      	beq.n	8007e8e <_scanf_float+0x3d6>
 8007e4a:	9903      	ldr	r1, [sp, #12]
 8007e4c:	1d1a      	adds	r2, r3, #4
 8007e4e:	600a      	str	r2, [r1, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	e9c3 6700 	strd	r6, r7, [r3]
 8007e56:	68e3      	ldr	r3, [r4, #12]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	60e3      	str	r3, [r4, #12]
 8007e5c:	e66d      	b.n	8007b3a <_scanf_float+0x82>
 8007e5e:	9b04      	ldr	r3, [sp, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d0e5      	beq.n	8007e30 <_scanf_float+0x378>
 8007e64:	9905      	ldr	r1, [sp, #20]
 8007e66:	230a      	movs	r3, #10
 8007e68:	462a      	mov	r2, r5
 8007e6a:	3101      	adds	r1, #1
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	f000 ff11 	bl	8008c94 <_strtol_r>
 8007e72:	9b04      	ldr	r3, [sp, #16]
 8007e74:	9e05      	ldr	r6, [sp, #20]
 8007e76:	1ac2      	subs	r2, r0, r3
 8007e78:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007e7c:	429e      	cmp	r6, r3
 8007e7e:	bf28      	it	cs
 8007e80:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007e84:	4912      	ldr	r1, [pc, #72]	; (8007ed0 <_scanf_float+0x418>)
 8007e86:	4630      	mov	r0, r6
 8007e88:	f000 f82c 	bl	8007ee4 <siprintf>
 8007e8c:	e7d0      	b.n	8007e30 <_scanf_float+0x378>
 8007e8e:	9903      	ldr	r1, [sp, #12]
 8007e90:	f012 0f04 	tst.w	r2, #4
 8007e94:	f103 0204 	add.w	r2, r3, #4
 8007e98:	600a      	str	r2, [r1, #0]
 8007e9a:	d1d9      	bne.n	8007e50 <_scanf_float+0x398>
 8007e9c:	f8d3 8000 	ldr.w	r8, [r3]
 8007ea0:	ee10 2a10 	vmov	r2, s0
 8007ea4:	ee10 0a10 	vmov	r0, s0
 8007ea8:	463b      	mov	r3, r7
 8007eaa:	4639      	mov	r1, r7
 8007eac:	f7f8 fe3e 	bl	8000b2c <__aeabi_dcmpun>
 8007eb0:	b128      	cbz	r0, 8007ebe <_scanf_float+0x406>
 8007eb2:	4808      	ldr	r0, [pc, #32]	; (8007ed4 <_scanf_float+0x41c>)
 8007eb4:	f000 f810 	bl	8007ed8 <nanf>
 8007eb8:	ed88 0a00 	vstr	s0, [r8]
 8007ebc:	e7cb      	b.n	8007e56 <_scanf_float+0x39e>
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	4639      	mov	r1, r7
 8007ec2:	f7f8 fe91 	bl	8000be8 <__aeabi_d2f>
 8007ec6:	f8c8 0000 	str.w	r0, [r8]
 8007eca:	e7c4      	b.n	8007e56 <_scanf_float+0x39e>
 8007ecc:	2500      	movs	r5, #0
 8007ece:	e634      	b.n	8007b3a <_scanf_float+0x82>
 8007ed0:	0800bd90 	.word	0x0800bd90
 8007ed4:	0800c198 	.word	0x0800c198

08007ed8 <nanf>:
 8007ed8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007ee0 <nanf+0x8>
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	7fc00000 	.word	0x7fc00000

08007ee4 <siprintf>:
 8007ee4:	b40e      	push	{r1, r2, r3}
 8007ee6:	b500      	push	{lr}
 8007ee8:	b09c      	sub	sp, #112	; 0x70
 8007eea:	ab1d      	add	r3, sp, #116	; 0x74
 8007eec:	9002      	str	r0, [sp, #8]
 8007eee:	9006      	str	r0, [sp, #24]
 8007ef0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ef4:	4809      	ldr	r0, [pc, #36]	; (8007f1c <siprintf+0x38>)
 8007ef6:	9107      	str	r1, [sp, #28]
 8007ef8:	9104      	str	r1, [sp, #16]
 8007efa:	4909      	ldr	r1, [pc, #36]	; (8007f20 <siprintf+0x3c>)
 8007efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f00:	9105      	str	r1, [sp, #20]
 8007f02:	6800      	ldr	r0, [r0, #0]
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	a902      	add	r1, sp, #8
 8007f08:	f002 fef0 	bl	800acec <_svfiprintf_r>
 8007f0c:	9b02      	ldr	r3, [sp, #8]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	701a      	strb	r2, [r3, #0]
 8007f12:	b01c      	add	sp, #112	; 0x70
 8007f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f18:	b003      	add	sp, #12
 8007f1a:	4770      	bx	lr
 8007f1c:	20000028 	.word	0x20000028
 8007f20:	ffff0208 	.word	0xffff0208

08007f24 <sulp>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	4604      	mov	r4, r0
 8007f28:	460d      	mov	r5, r1
 8007f2a:	ec45 4b10 	vmov	d0, r4, r5
 8007f2e:	4616      	mov	r6, r2
 8007f30:	f002 fc3a 	bl	800a7a8 <__ulp>
 8007f34:	ec51 0b10 	vmov	r0, r1, d0
 8007f38:	b17e      	cbz	r6, 8007f5a <sulp+0x36>
 8007f3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007f3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dd09      	ble.n	8007f5a <sulp+0x36>
 8007f46:	051b      	lsls	r3, r3, #20
 8007f48:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007f4c:	2400      	movs	r4, #0
 8007f4e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007f52:	4622      	mov	r2, r4
 8007f54:	462b      	mov	r3, r5
 8007f56:	f7f8 fb4f 	bl	80005f8 <__aeabi_dmul>
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	0000      	movs	r0, r0
	...

08007f60 <_strtod_l>:
 8007f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	ed2d 8b02 	vpush	{d8}
 8007f68:	b09d      	sub	sp, #116	; 0x74
 8007f6a:	461f      	mov	r7, r3
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9318      	str	r3, [sp, #96]	; 0x60
 8007f70:	4ba2      	ldr	r3, [pc, #648]	; (80081fc <_strtod_l+0x29c>)
 8007f72:	9213      	str	r2, [sp, #76]	; 0x4c
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	9305      	str	r3, [sp, #20]
 8007f78:	4604      	mov	r4, r0
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	4688      	mov	r8, r1
 8007f7e:	f7f8 f927 	bl	80001d0 <strlen>
 8007f82:	f04f 0a00 	mov.w	sl, #0
 8007f86:	4605      	mov	r5, r0
 8007f88:	f04f 0b00 	mov.w	fp, #0
 8007f8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007f90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f92:	781a      	ldrb	r2, [r3, #0]
 8007f94:	2a2b      	cmp	r2, #43	; 0x2b
 8007f96:	d04e      	beq.n	8008036 <_strtod_l+0xd6>
 8007f98:	d83b      	bhi.n	8008012 <_strtod_l+0xb2>
 8007f9a:	2a0d      	cmp	r2, #13
 8007f9c:	d834      	bhi.n	8008008 <_strtod_l+0xa8>
 8007f9e:	2a08      	cmp	r2, #8
 8007fa0:	d834      	bhi.n	800800c <_strtod_l+0xac>
 8007fa2:	2a00      	cmp	r2, #0
 8007fa4:	d03e      	beq.n	8008024 <_strtod_l+0xc4>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	930a      	str	r3, [sp, #40]	; 0x28
 8007faa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007fac:	7833      	ldrb	r3, [r6, #0]
 8007fae:	2b30      	cmp	r3, #48	; 0x30
 8007fb0:	f040 80b0 	bne.w	8008114 <_strtod_l+0x1b4>
 8007fb4:	7873      	ldrb	r3, [r6, #1]
 8007fb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007fba:	2b58      	cmp	r3, #88	; 0x58
 8007fbc:	d168      	bne.n	8008090 <_strtod_l+0x130>
 8007fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	ab18      	add	r3, sp, #96	; 0x60
 8007fc4:	9702      	str	r7, [sp, #8]
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	4a8d      	ldr	r2, [pc, #564]	; (8008200 <_strtod_l+0x2a0>)
 8007fca:	ab19      	add	r3, sp, #100	; 0x64
 8007fcc:	a917      	add	r1, sp, #92	; 0x5c
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f001 fd44 	bl	8009a5c <__gethex>
 8007fd4:	f010 0707 	ands.w	r7, r0, #7
 8007fd8:	4605      	mov	r5, r0
 8007fda:	d005      	beq.n	8007fe8 <_strtod_l+0x88>
 8007fdc:	2f06      	cmp	r7, #6
 8007fde:	d12c      	bne.n	800803a <_strtod_l+0xda>
 8007fe0:	3601      	adds	r6, #1
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	9617      	str	r6, [sp, #92]	; 0x5c
 8007fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8007fe8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f040 8590 	bne.w	8008b10 <_strtod_l+0xbb0>
 8007ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ff2:	b1eb      	cbz	r3, 8008030 <_strtod_l+0xd0>
 8007ff4:	4652      	mov	r2, sl
 8007ff6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ffa:	ec43 2b10 	vmov	d0, r2, r3
 8007ffe:	b01d      	add	sp, #116	; 0x74
 8008000:	ecbd 8b02 	vpop	{d8}
 8008004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008008:	2a20      	cmp	r2, #32
 800800a:	d1cc      	bne.n	8007fa6 <_strtod_l+0x46>
 800800c:	3301      	adds	r3, #1
 800800e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008010:	e7be      	b.n	8007f90 <_strtod_l+0x30>
 8008012:	2a2d      	cmp	r2, #45	; 0x2d
 8008014:	d1c7      	bne.n	8007fa6 <_strtod_l+0x46>
 8008016:	2201      	movs	r2, #1
 8008018:	920a      	str	r2, [sp, #40]	; 0x28
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	9217      	str	r2, [sp, #92]	; 0x5c
 800801e:	785b      	ldrb	r3, [r3, #1]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1c2      	bne.n	8007faa <_strtod_l+0x4a>
 8008024:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008026:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800802a:	2b00      	cmp	r3, #0
 800802c:	f040 856e 	bne.w	8008b0c <_strtod_l+0xbac>
 8008030:	4652      	mov	r2, sl
 8008032:	465b      	mov	r3, fp
 8008034:	e7e1      	b.n	8007ffa <_strtod_l+0x9a>
 8008036:	2200      	movs	r2, #0
 8008038:	e7ee      	b.n	8008018 <_strtod_l+0xb8>
 800803a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800803c:	b13a      	cbz	r2, 800804e <_strtod_l+0xee>
 800803e:	2135      	movs	r1, #53	; 0x35
 8008040:	a81a      	add	r0, sp, #104	; 0x68
 8008042:	f002 fcbc 	bl	800a9be <__copybits>
 8008046:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008048:	4620      	mov	r0, r4
 800804a:	f002 f87b 	bl	800a144 <_Bfree>
 800804e:	3f01      	subs	r7, #1
 8008050:	2f04      	cmp	r7, #4
 8008052:	d806      	bhi.n	8008062 <_strtod_l+0x102>
 8008054:	e8df f007 	tbb	[pc, r7]
 8008058:	1714030a 	.word	0x1714030a
 800805c:	0a          	.byte	0x0a
 800805d:	00          	.byte	0x00
 800805e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008062:	0728      	lsls	r0, r5, #28
 8008064:	d5c0      	bpl.n	8007fe8 <_strtod_l+0x88>
 8008066:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800806a:	e7bd      	b.n	8007fe8 <_strtod_l+0x88>
 800806c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008070:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008072:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008076:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800807a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800807e:	e7f0      	b.n	8008062 <_strtod_l+0x102>
 8008080:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008204 <_strtod_l+0x2a4>
 8008084:	e7ed      	b.n	8008062 <_strtod_l+0x102>
 8008086:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800808a:	f04f 3aff 	mov.w	sl, #4294967295
 800808e:	e7e8      	b.n	8008062 <_strtod_l+0x102>
 8008090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008092:	1c5a      	adds	r2, r3, #1
 8008094:	9217      	str	r2, [sp, #92]	; 0x5c
 8008096:	785b      	ldrb	r3, [r3, #1]
 8008098:	2b30      	cmp	r3, #48	; 0x30
 800809a:	d0f9      	beq.n	8008090 <_strtod_l+0x130>
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0a3      	beq.n	8007fe8 <_strtod_l+0x88>
 80080a0:	2301      	movs	r3, #1
 80080a2:	f04f 0900 	mov.w	r9, #0
 80080a6:	9304      	str	r3, [sp, #16]
 80080a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080aa:	9308      	str	r3, [sp, #32]
 80080ac:	f8cd 901c 	str.w	r9, [sp, #28]
 80080b0:	464f      	mov	r7, r9
 80080b2:	220a      	movs	r2, #10
 80080b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80080b6:	7806      	ldrb	r6, [r0, #0]
 80080b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80080bc:	b2d9      	uxtb	r1, r3
 80080be:	2909      	cmp	r1, #9
 80080c0:	d92a      	bls.n	8008118 <_strtod_l+0x1b8>
 80080c2:	9905      	ldr	r1, [sp, #20]
 80080c4:	462a      	mov	r2, r5
 80080c6:	f002 ff2b 	bl	800af20 <strncmp>
 80080ca:	b398      	cbz	r0, 8008134 <_strtod_l+0x1d4>
 80080cc:	2000      	movs	r0, #0
 80080ce:	4632      	mov	r2, r6
 80080d0:	463d      	mov	r5, r7
 80080d2:	9005      	str	r0, [sp, #20]
 80080d4:	4603      	mov	r3, r0
 80080d6:	2a65      	cmp	r2, #101	; 0x65
 80080d8:	d001      	beq.n	80080de <_strtod_l+0x17e>
 80080da:	2a45      	cmp	r2, #69	; 0x45
 80080dc:	d118      	bne.n	8008110 <_strtod_l+0x1b0>
 80080de:	b91d      	cbnz	r5, 80080e8 <_strtod_l+0x188>
 80080e0:	9a04      	ldr	r2, [sp, #16]
 80080e2:	4302      	orrs	r2, r0
 80080e4:	d09e      	beq.n	8008024 <_strtod_l+0xc4>
 80080e6:	2500      	movs	r5, #0
 80080e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80080ec:	f108 0201 	add.w	r2, r8, #1
 80080f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80080f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80080f6:	2a2b      	cmp	r2, #43	; 0x2b
 80080f8:	d075      	beq.n	80081e6 <_strtod_l+0x286>
 80080fa:	2a2d      	cmp	r2, #45	; 0x2d
 80080fc:	d07b      	beq.n	80081f6 <_strtod_l+0x296>
 80080fe:	f04f 0c00 	mov.w	ip, #0
 8008102:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008106:	2909      	cmp	r1, #9
 8008108:	f240 8082 	bls.w	8008210 <_strtod_l+0x2b0>
 800810c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008110:	2600      	movs	r6, #0
 8008112:	e09d      	b.n	8008250 <_strtod_l+0x2f0>
 8008114:	2300      	movs	r3, #0
 8008116:	e7c4      	b.n	80080a2 <_strtod_l+0x142>
 8008118:	2f08      	cmp	r7, #8
 800811a:	bfd8      	it	le
 800811c:	9907      	ldrle	r1, [sp, #28]
 800811e:	f100 0001 	add.w	r0, r0, #1
 8008122:	bfda      	itte	le
 8008124:	fb02 3301 	mlale	r3, r2, r1, r3
 8008128:	9307      	strle	r3, [sp, #28]
 800812a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800812e:	3701      	adds	r7, #1
 8008130:	9017      	str	r0, [sp, #92]	; 0x5c
 8008132:	e7bf      	b.n	80080b4 <_strtod_l+0x154>
 8008134:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008136:	195a      	adds	r2, r3, r5
 8008138:	9217      	str	r2, [sp, #92]	; 0x5c
 800813a:	5d5a      	ldrb	r2, [r3, r5]
 800813c:	2f00      	cmp	r7, #0
 800813e:	d037      	beq.n	80081b0 <_strtod_l+0x250>
 8008140:	9005      	str	r0, [sp, #20]
 8008142:	463d      	mov	r5, r7
 8008144:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008148:	2b09      	cmp	r3, #9
 800814a:	d912      	bls.n	8008172 <_strtod_l+0x212>
 800814c:	2301      	movs	r3, #1
 800814e:	e7c2      	b.n	80080d6 <_strtod_l+0x176>
 8008150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	9217      	str	r2, [sp, #92]	; 0x5c
 8008156:	785a      	ldrb	r2, [r3, #1]
 8008158:	3001      	adds	r0, #1
 800815a:	2a30      	cmp	r2, #48	; 0x30
 800815c:	d0f8      	beq.n	8008150 <_strtod_l+0x1f0>
 800815e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008162:	2b08      	cmp	r3, #8
 8008164:	f200 84d9 	bhi.w	8008b1a <_strtod_l+0xbba>
 8008168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800816a:	9005      	str	r0, [sp, #20]
 800816c:	2000      	movs	r0, #0
 800816e:	9308      	str	r3, [sp, #32]
 8008170:	4605      	mov	r5, r0
 8008172:	3a30      	subs	r2, #48	; 0x30
 8008174:	f100 0301 	add.w	r3, r0, #1
 8008178:	d014      	beq.n	80081a4 <_strtod_l+0x244>
 800817a:	9905      	ldr	r1, [sp, #20]
 800817c:	4419      	add	r1, r3
 800817e:	9105      	str	r1, [sp, #20]
 8008180:	462b      	mov	r3, r5
 8008182:	eb00 0e05 	add.w	lr, r0, r5
 8008186:	210a      	movs	r1, #10
 8008188:	4573      	cmp	r3, lr
 800818a:	d113      	bne.n	80081b4 <_strtod_l+0x254>
 800818c:	182b      	adds	r3, r5, r0
 800818e:	2b08      	cmp	r3, #8
 8008190:	f105 0501 	add.w	r5, r5, #1
 8008194:	4405      	add	r5, r0
 8008196:	dc1c      	bgt.n	80081d2 <_strtod_l+0x272>
 8008198:	9907      	ldr	r1, [sp, #28]
 800819a:	230a      	movs	r3, #10
 800819c:	fb03 2301 	mla	r3, r3, r1, r2
 80081a0:	9307      	str	r3, [sp, #28]
 80081a2:	2300      	movs	r3, #0
 80081a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081a6:	1c51      	adds	r1, r2, #1
 80081a8:	9117      	str	r1, [sp, #92]	; 0x5c
 80081aa:	7852      	ldrb	r2, [r2, #1]
 80081ac:	4618      	mov	r0, r3
 80081ae:	e7c9      	b.n	8008144 <_strtod_l+0x1e4>
 80081b0:	4638      	mov	r0, r7
 80081b2:	e7d2      	b.n	800815a <_strtod_l+0x1fa>
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	dc04      	bgt.n	80081c2 <_strtod_l+0x262>
 80081b8:	9e07      	ldr	r6, [sp, #28]
 80081ba:	434e      	muls	r6, r1
 80081bc:	9607      	str	r6, [sp, #28]
 80081be:	3301      	adds	r3, #1
 80081c0:	e7e2      	b.n	8008188 <_strtod_l+0x228>
 80081c2:	f103 0c01 	add.w	ip, r3, #1
 80081c6:	f1bc 0f10 	cmp.w	ip, #16
 80081ca:	bfd8      	it	le
 80081cc:	fb01 f909 	mulle.w	r9, r1, r9
 80081d0:	e7f5      	b.n	80081be <_strtod_l+0x25e>
 80081d2:	2d10      	cmp	r5, #16
 80081d4:	bfdc      	itt	le
 80081d6:	230a      	movle	r3, #10
 80081d8:	fb03 2909 	mlale	r9, r3, r9, r2
 80081dc:	e7e1      	b.n	80081a2 <_strtod_l+0x242>
 80081de:	2300      	movs	r3, #0
 80081e0:	9305      	str	r3, [sp, #20]
 80081e2:	2301      	movs	r3, #1
 80081e4:	e77c      	b.n	80080e0 <_strtod_l+0x180>
 80081e6:	f04f 0c00 	mov.w	ip, #0
 80081ea:	f108 0202 	add.w	r2, r8, #2
 80081ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80081f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80081f4:	e785      	b.n	8008102 <_strtod_l+0x1a2>
 80081f6:	f04f 0c01 	mov.w	ip, #1
 80081fa:	e7f6      	b.n	80081ea <_strtod_l+0x28a>
 80081fc:	0800bfe0 	.word	0x0800bfe0
 8008200:	0800bd98 	.word	0x0800bd98
 8008204:	7ff00000 	.word	0x7ff00000
 8008208:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800820a:	1c51      	adds	r1, r2, #1
 800820c:	9117      	str	r1, [sp, #92]	; 0x5c
 800820e:	7852      	ldrb	r2, [r2, #1]
 8008210:	2a30      	cmp	r2, #48	; 0x30
 8008212:	d0f9      	beq.n	8008208 <_strtod_l+0x2a8>
 8008214:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008218:	2908      	cmp	r1, #8
 800821a:	f63f af79 	bhi.w	8008110 <_strtod_l+0x1b0>
 800821e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008222:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008224:	9206      	str	r2, [sp, #24]
 8008226:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008228:	1c51      	adds	r1, r2, #1
 800822a:	9117      	str	r1, [sp, #92]	; 0x5c
 800822c:	7852      	ldrb	r2, [r2, #1]
 800822e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008232:	2e09      	cmp	r6, #9
 8008234:	d937      	bls.n	80082a6 <_strtod_l+0x346>
 8008236:	9e06      	ldr	r6, [sp, #24]
 8008238:	1b89      	subs	r1, r1, r6
 800823a:	2908      	cmp	r1, #8
 800823c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008240:	dc02      	bgt.n	8008248 <_strtod_l+0x2e8>
 8008242:	4576      	cmp	r6, lr
 8008244:	bfa8      	it	ge
 8008246:	4676      	movge	r6, lr
 8008248:	f1bc 0f00 	cmp.w	ip, #0
 800824c:	d000      	beq.n	8008250 <_strtod_l+0x2f0>
 800824e:	4276      	negs	r6, r6
 8008250:	2d00      	cmp	r5, #0
 8008252:	d14d      	bne.n	80082f0 <_strtod_l+0x390>
 8008254:	9904      	ldr	r1, [sp, #16]
 8008256:	4301      	orrs	r1, r0
 8008258:	f47f aec6 	bne.w	8007fe8 <_strtod_l+0x88>
 800825c:	2b00      	cmp	r3, #0
 800825e:	f47f aee1 	bne.w	8008024 <_strtod_l+0xc4>
 8008262:	2a69      	cmp	r2, #105	; 0x69
 8008264:	d027      	beq.n	80082b6 <_strtod_l+0x356>
 8008266:	dc24      	bgt.n	80082b2 <_strtod_l+0x352>
 8008268:	2a49      	cmp	r2, #73	; 0x49
 800826a:	d024      	beq.n	80082b6 <_strtod_l+0x356>
 800826c:	2a4e      	cmp	r2, #78	; 0x4e
 800826e:	f47f aed9 	bne.w	8008024 <_strtod_l+0xc4>
 8008272:	499f      	ldr	r1, [pc, #636]	; (80084f0 <_strtod_l+0x590>)
 8008274:	a817      	add	r0, sp, #92	; 0x5c
 8008276:	f001 fe49 	bl	8009f0c <__match>
 800827a:	2800      	cmp	r0, #0
 800827c:	f43f aed2 	beq.w	8008024 <_strtod_l+0xc4>
 8008280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	2b28      	cmp	r3, #40	; 0x28
 8008286:	d12d      	bne.n	80082e4 <_strtod_l+0x384>
 8008288:	499a      	ldr	r1, [pc, #616]	; (80084f4 <_strtod_l+0x594>)
 800828a:	aa1a      	add	r2, sp, #104	; 0x68
 800828c:	a817      	add	r0, sp, #92	; 0x5c
 800828e:	f001 fe51 	bl	8009f34 <__hexnan>
 8008292:	2805      	cmp	r0, #5
 8008294:	d126      	bne.n	80082e4 <_strtod_l+0x384>
 8008296:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008298:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800829c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80082a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80082a4:	e6a0      	b.n	8007fe8 <_strtod_l+0x88>
 80082a6:	210a      	movs	r1, #10
 80082a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80082ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80082b0:	e7b9      	b.n	8008226 <_strtod_l+0x2c6>
 80082b2:	2a6e      	cmp	r2, #110	; 0x6e
 80082b4:	e7db      	b.n	800826e <_strtod_l+0x30e>
 80082b6:	4990      	ldr	r1, [pc, #576]	; (80084f8 <_strtod_l+0x598>)
 80082b8:	a817      	add	r0, sp, #92	; 0x5c
 80082ba:	f001 fe27 	bl	8009f0c <__match>
 80082be:	2800      	cmp	r0, #0
 80082c0:	f43f aeb0 	beq.w	8008024 <_strtod_l+0xc4>
 80082c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082c6:	498d      	ldr	r1, [pc, #564]	; (80084fc <_strtod_l+0x59c>)
 80082c8:	3b01      	subs	r3, #1
 80082ca:	a817      	add	r0, sp, #92	; 0x5c
 80082cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80082ce:	f001 fe1d 	bl	8009f0c <__match>
 80082d2:	b910      	cbnz	r0, 80082da <_strtod_l+0x37a>
 80082d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082d6:	3301      	adds	r3, #1
 80082d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80082da:	f8df b230 	ldr.w	fp, [pc, #560]	; 800850c <_strtod_l+0x5ac>
 80082de:	f04f 0a00 	mov.w	sl, #0
 80082e2:	e681      	b.n	8007fe8 <_strtod_l+0x88>
 80082e4:	4886      	ldr	r0, [pc, #536]	; (8008500 <_strtod_l+0x5a0>)
 80082e6:	f002 fe03 	bl	800aef0 <nan>
 80082ea:	ec5b ab10 	vmov	sl, fp, d0
 80082ee:	e67b      	b.n	8007fe8 <_strtod_l+0x88>
 80082f0:	9b05      	ldr	r3, [sp, #20]
 80082f2:	9807      	ldr	r0, [sp, #28]
 80082f4:	1af3      	subs	r3, r6, r3
 80082f6:	2f00      	cmp	r7, #0
 80082f8:	bf08      	it	eq
 80082fa:	462f      	moveq	r7, r5
 80082fc:	2d10      	cmp	r5, #16
 80082fe:	9306      	str	r3, [sp, #24]
 8008300:	46a8      	mov	r8, r5
 8008302:	bfa8      	it	ge
 8008304:	f04f 0810 	movge.w	r8, #16
 8008308:	f7f8 f8fc 	bl	8000504 <__aeabi_ui2d>
 800830c:	2d09      	cmp	r5, #9
 800830e:	4682      	mov	sl, r0
 8008310:	468b      	mov	fp, r1
 8008312:	dd13      	ble.n	800833c <_strtod_l+0x3dc>
 8008314:	4b7b      	ldr	r3, [pc, #492]	; (8008504 <_strtod_l+0x5a4>)
 8008316:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800831a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800831e:	f7f8 f96b 	bl	80005f8 <__aeabi_dmul>
 8008322:	4682      	mov	sl, r0
 8008324:	4648      	mov	r0, r9
 8008326:	468b      	mov	fp, r1
 8008328:	f7f8 f8ec 	bl	8000504 <__aeabi_ui2d>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4650      	mov	r0, sl
 8008332:	4659      	mov	r1, fp
 8008334:	f7f7 ffaa 	bl	800028c <__adddf3>
 8008338:	4682      	mov	sl, r0
 800833a:	468b      	mov	fp, r1
 800833c:	2d0f      	cmp	r5, #15
 800833e:	dc38      	bgt.n	80083b2 <_strtod_l+0x452>
 8008340:	9b06      	ldr	r3, [sp, #24]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f43f ae50 	beq.w	8007fe8 <_strtod_l+0x88>
 8008348:	dd24      	ble.n	8008394 <_strtod_l+0x434>
 800834a:	2b16      	cmp	r3, #22
 800834c:	dc0b      	bgt.n	8008366 <_strtod_l+0x406>
 800834e:	496d      	ldr	r1, [pc, #436]	; (8008504 <_strtod_l+0x5a4>)
 8008350:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008354:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008358:	4652      	mov	r2, sl
 800835a:	465b      	mov	r3, fp
 800835c:	f7f8 f94c 	bl	80005f8 <__aeabi_dmul>
 8008360:	4682      	mov	sl, r0
 8008362:	468b      	mov	fp, r1
 8008364:	e640      	b.n	8007fe8 <_strtod_l+0x88>
 8008366:	9a06      	ldr	r2, [sp, #24]
 8008368:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800836c:	4293      	cmp	r3, r2
 800836e:	db20      	blt.n	80083b2 <_strtod_l+0x452>
 8008370:	4c64      	ldr	r4, [pc, #400]	; (8008504 <_strtod_l+0x5a4>)
 8008372:	f1c5 050f 	rsb	r5, r5, #15
 8008376:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800837a:	4652      	mov	r2, sl
 800837c:	465b      	mov	r3, fp
 800837e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008382:	f7f8 f939 	bl	80005f8 <__aeabi_dmul>
 8008386:	9b06      	ldr	r3, [sp, #24]
 8008388:	1b5d      	subs	r5, r3, r5
 800838a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800838e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008392:	e7e3      	b.n	800835c <_strtod_l+0x3fc>
 8008394:	9b06      	ldr	r3, [sp, #24]
 8008396:	3316      	adds	r3, #22
 8008398:	db0b      	blt.n	80083b2 <_strtod_l+0x452>
 800839a:	9b05      	ldr	r3, [sp, #20]
 800839c:	1b9e      	subs	r6, r3, r6
 800839e:	4b59      	ldr	r3, [pc, #356]	; (8008504 <_strtod_l+0x5a4>)
 80083a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80083a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083a8:	4650      	mov	r0, sl
 80083aa:	4659      	mov	r1, fp
 80083ac:	f7f8 fa4e 	bl	800084c <__aeabi_ddiv>
 80083b0:	e7d6      	b.n	8008360 <_strtod_l+0x400>
 80083b2:	9b06      	ldr	r3, [sp, #24]
 80083b4:	eba5 0808 	sub.w	r8, r5, r8
 80083b8:	4498      	add	r8, r3
 80083ba:	f1b8 0f00 	cmp.w	r8, #0
 80083be:	dd74      	ble.n	80084aa <_strtod_l+0x54a>
 80083c0:	f018 030f 	ands.w	r3, r8, #15
 80083c4:	d00a      	beq.n	80083dc <_strtod_l+0x47c>
 80083c6:	494f      	ldr	r1, [pc, #316]	; (8008504 <_strtod_l+0x5a4>)
 80083c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083cc:	4652      	mov	r2, sl
 80083ce:	465b      	mov	r3, fp
 80083d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083d4:	f7f8 f910 	bl	80005f8 <__aeabi_dmul>
 80083d8:	4682      	mov	sl, r0
 80083da:	468b      	mov	fp, r1
 80083dc:	f038 080f 	bics.w	r8, r8, #15
 80083e0:	d04f      	beq.n	8008482 <_strtod_l+0x522>
 80083e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80083e6:	dd22      	ble.n	800842e <_strtod_l+0x4ce>
 80083e8:	2500      	movs	r5, #0
 80083ea:	462e      	mov	r6, r5
 80083ec:	9507      	str	r5, [sp, #28]
 80083ee:	9505      	str	r5, [sp, #20]
 80083f0:	2322      	movs	r3, #34	; 0x22
 80083f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800850c <_strtod_l+0x5ac>
 80083f6:	6023      	str	r3, [r4, #0]
 80083f8:	f04f 0a00 	mov.w	sl, #0
 80083fc:	9b07      	ldr	r3, [sp, #28]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f43f adf2 	beq.w	8007fe8 <_strtod_l+0x88>
 8008404:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008406:	4620      	mov	r0, r4
 8008408:	f001 fe9c 	bl	800a144 <_Bfree>
 800840c:	9905      	ldr	r1, [sp, #20]
 800840e:	4620      	mov	r0, r4
 8008410:	f001 fe98 	bl	800a144 <_Bfree>
 8008414:	4631      	mov	r1, r6
 8008416:	4620      	mov	r0, r4
 8008418:	f001 fe94 	bl	800a144 <_Bfree>
 800841c:	9907      	ldr	r1, [sp, #28]
 800841e:	4620      	mov	r0, r4
 8008420:	f001 fe90 	bl	800a144 <_Bfree>
 8008424:	4629      	mov	r1, r5
 8008426:	4620      	mov	r0, r4
 8008428:	f001 fe8c 	bl	800a144 <_Bfree>
 800842c:	e5dc      	b.n	8007fe8 <_strtod_l+0x88>
 800842e:	4b36      	ldr	r3, [pc, #216]	; (8008508 <_strtod_l+0x5a8>)
 8008430:	9304      	str	r3, [sp, #16]
 8008432:	2300      	movs	r3, #0
 8008434:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008438:	4650      	mov	r0, sl
 800843a:	4659      	mov	r1, fp
 800843c:	4699      	mov	r9, r3
 800843e:	f1b8 0f01 	cmp.w	r8, #1
 8008442:	dc21      	bgt.n	8008488 <_strtod_l+0x528>
 8008444:	b10b      	cbz	r3, 800844a <_strtod_l+0x4ea>
 8008446:	4682      	mov	sl, r0
 8008448:	468b      	mov	fp, r1
 800844a:	4b2f      	ldr	r3, [pc, #188]	; (8008508 <_strtod_l+0x5a8>)
 800844c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008450:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008454:	4652      	mov	r2, sl
 8008456:	465b      	mov	r3, fp
 8008458:	e9d9 0100 	ldrd	r0, r1, [r9]
 800845c:	f7f8 f8cc 	bl	80005f8 <__aeabi_dmul>
 8008460:	4b2a      	ldr	r3, [pc, #168]	; (800850c <_strtod_l+0x5ac>)
 8008462:	460a      	mov	r2, r1
 8008464:	400b      	ands	r3, r1
 8008466:	492a      	ldr	r1, [pc, #168]	; (8008510 <_strtod_l+0x5b0>)
 8008468:	428b      	cmp	r3, r1
 800846a:	4682      	mov	sl, r0
 800846c:	d8bc      	bhi.n	80083e8 <_strtod_l+0x488>
 800846e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008472:	428b      	cmp	r3, r1
 8008474:	bf86      	itte	hi
 8008476:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008514 <_strtod_l+0x5b4>
 800847a:	f04f 3aff 	movhi.w	sl, #4294967295
 800847e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008482:	2300      	movs	r3, #0
 8008484:	9304      	str	r3, [sp, #16]
 8008486:	e084      	b.n	8008592 <_strtod_l+0x632>
 8008488:	f018 0f01 	tst.w	r8, #1
 800848c:	d005      	beq.n	800849a <_strtod_l+0x53a>
 800848e:	9b04      	ldr	r3, [sp, #16]
 8008490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008494:	f7f8 f8b0 	bl	80005f8 <__aeabi_dmul>
 8008498:	2301      	movs	r3, #1
 800849a:	9a04      	ldr	r2, [sp, #16]
 800849c:	3208      	adds	r2, #8
 800849e:	f109 0901 	add.w	r9, r9, #1
 80084a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80084a6:	9204      	str	r2, [sp, #16]
 80084a8:	e7c9      	b.n	800843e <_strtod_l+0x4de>
 80084aa:	d0ea      	beq.n	8008482 <_strtod_l+0x522>
 80084ac:	f1c8 0800 	rsb	r8, r8, #0
 80084b0:	f018 020f 	ands.w	r2, r8, #15
 80084b4:	d00a      	beq.n	80084cc <_strtod_l+0x56c>
 80084b6:	4b13      	ldr	r3, [pc, #76]	; (8008504 <_strtod_l+0x5a4>)
 80084b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084bc:	4650      	mov	r0, sl
 80084be:	4659      	mov	r1, fp
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f7f8 f9c2 	bl	800084c <__aeabi_ddiv>
 80084c8:	4682      	mov	sl, r0
 80084ca:	468b      	mov	fp, r1
 80084cc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80084d0:	d0d7      	beq.n	8008482 <_strtod_l+0x522>
 80084d2:	f1b8 0f1f 	cmp.w	r8, #31
 80084d6:	dd1f      	ble.n	8008518 <_strtod_l+0x5b8>
 80084d8:	2500      	movs	r5, #0
 80084da:	462e      	mov	r6, r5
 80084dc:	9507      	str	r5, [sp, #28]
 80084de:	9505      	str	r5, [sp, #20]
 80084e0:	2322      	movs	r3, #34	; 0x22
 80084e2:	f04f 0a00 	mov.w	sl, #0
 80084e6:	f04f 0b00 	mov.w	fp, #0
 80084ea:	6023      	str	r3, [r4, #0]
 80084ec:	e786      	b.n	80083fc <_strtod_l+0x49c>
 80084ee:	bf00      	nop
 80084f0:	0800bd69 	.word	0x0800bd69
 80084f4:	0800bdac 	.word	0x0800bdac
 80084f8:	0800bd61 	.word	0x0800bd61
 80084fc:	0800beec 	.word	0x0800beec
 8008500:	0800c198 	.word	0x0800c198
 8008504:	0800c078 	.word	0x0800c078
 8008508:	0800c050 	.word	0x0800c050
 800850c:	7ff00000 	.word	0x7ff00000
 8008510:	7ca00000 	.word	0x7ca00000
 8008514:	7fefffff 	.word	0x7fefffff
 8008518:	f018 0310 	ands.w	r3, r8, #16
 800851c:	bf18      	it	ne
 800851e:	236a      	movne	r3, #106	; 0x6a
 8008520:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80088d0 <_strtod_l+0x970>
 8008524:	9304      	str	r3, [sp, #16]
 8008526:	4650      	mov	r0, sl
 8008528:	4659      	mov	r1, fp
 800852a:	2300      	movs	r3, #0
 800852c:	f018 0f01 	tst.w	r8, #1
 8008530:	d004      	beq.n	800853c <_strtod_l+0x5dc>
 8008532:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008536:	f7f8 f85f 	bl	80005f8 <__aeabi_dmul>
 800853a:	2301      	movs	r3, #1
 800853c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008540:	f109 0908 	add.w	r9, r9, #8
 8008544:	d1f2      	bne.n	800852c <_strtod_l+0x5cc>
 8008546:	b10b      	cbz	r3, 800854c <_strtod_l+0x5ec>
 8008548:	4682      	mov	sl, r0
 800854a:	468b      	mov	fp, r1
 800854c:	9b04      	ldr	r3, [sp, #16]
 800854e:	b1c3      	cbz	r3, 8008582 <_strtod_l+0x622>
 8008550:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008554:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008558:	2b00      	cmp	r3, #0
 800855a:	4659      	mov	r1, fp
 800855c:	dd11      	ble.n	8008582 <_strtod_l+0x622>
 800855e:	2b1f      	cmp	r3, #31
 8008560:	f340 8124 	ble.w	80087ac <_strtod_l+0x84c>
 8008564:	2b34      	cmp	r3, #52	; 0x34
 8008566:	bfde      	ittt	le
 8008568:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800856c:	f04f 33ff 	movle.w	r3, #4294967295
 8008570:	fa03 f202 	lslle.w	r2, r3, r2
 8008574:	f04f 0a00 	mov.w	sl, #0
 8008578:	bfcc      	ite	gt
 800857a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800857e:	ea02 0b01 	andle.w	fp, r2, r1
 8008582:	2200      	movs	r2, #0
 8008584:	2300      	movs	r3, #0
 8008586:	4650      	mov	r0, sl
 8008588:	4659      	mov	r1, fp
 800858a:	f7f8 fa9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800858e:	2800      	cmp	r0, #0
 8008590:	d1a2      	bne.n	80084d8 <_strtod_l+0x578>
 8008592:	9b07      	ldr	r3, [sp, #28]
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	9908      	ldr	r1, [sp, #32]
 8008598:	462b      	mov	r3, r5
 800859a:	463a      	mov	r2, r7
 800859c:	4620      	mov	r0, r4
 800859e:	f001 fe39 	bl	800a214 <__s2b>
 80085a2:	9007      	str	r0, [sp, #28]
 80085a4:	2800      	cmp	r0, #0
 80085a6:	f43f af1f 	beq.w	80083e8 <_strtod_l+0x488>
 80085aa:	9b05      	ldr	r3, [sp, #20]
 80085ac:	1b9e      	subs	r6, r3, r6
 80085ae:	9b06      	ldr	r3, [sp, #24]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	bfb4      	ite	lt
 80085b4:	4633      	movlt	r3, r6
 80085b6:	2300      	movge	r3, #0
 80085b8:	930c      	str	r3, [sp, #48]	; 0x30
 80085ba:	9b06      	ldr	r3, [sp, #24]
 80085bc:	2500      	movs	r5, #0
 80085be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80085c2:	9312      	str	r3, [sp, #72]	; 0x48
 80085c4:	462e      	mov	r6, r5
 80085c6:	9b07      	ldr	r3, [sp, #28]
 80085c8:	4620      	mov	r0, r4
 80085ca:	6859      	ldr	r1, [r3, #4]
 80085cc:	f001 fd7a 	bl	800a0c4 <_Balloc>
 80085d0:	9005      	str	r0, [sp, #20]
 80085d2:	2800      	cmp	r0, #0
 80085d4:	f43f af0c 	beq.w	80083f0 <_strtod_l+0x490>
 80085d8:	9b07      	ldr	r3, [sp, #28]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	3202      	adds	r2, #2
 80085de:	f103 010c 	add.w	r1, r3, #12
 80085e2:	0092      	lsls	r2, r2, #2
 80085e4:	300c      	adds	r0, #12
 80085e6:	f001 fd5f 	bl	800a0a8 <memcpy>
 80085ea:	ec4b ab10 	vmov	d0, sl, fp
 80085ee:	aa1a      	add	r2, sp, #104	; 0x68
 80085f0:	a919      	add	r1, sp, #100	; 0x64
 80085f2:	4620      	mov	r0, r4
 80085f4:	f002 f954 	bl	800a8a0 <__d2b>
 80085f8:	ec4b ab18 	vmov	d8, sl, fp
 80085fc:	9018      	str	r0, [sp, #96]	; 0x60
 80085fe:	2800      	cmp	r0, #0
 8008600:	f43f aef6 	beq.w	80083f0 <_strtod_l+0x490>
 8008604:	2101      	movs	r1, #1
 8008606:	4620      	mov	r0, r4
 8008608:	f001 fe9e 	bl	800a348 <__i2b>
 800860c:	4606      	mov	r6, r0
 800860e:	2800      	cmp	r0, #0
 8008610:	f43f aeee 	beq.w	80083f0 <_strtod_l+0x490>
 8008614:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008616:	9904      	ldr	r1, [sp, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	bfab      	itete	ge
 800861c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800861e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008620:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008622:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008626:	bfac      	ite	ge
 8008628:	eb03 0902 	addge.w	r9, r3, r2
 800862c:	1ad7      	sublt	r7, r2, r3
 800862e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008630:	eba3 0801 	sub.w	r8, r3, r1
 8008634:	4490      	add	r8, r2
 8008636:	4ba1      	ldr	r3, [pc, #644]	; (80088bc <_strtod_l+0x95c>)
 8008638:	f108 38ff 	add.w	r8, r8, #4294967295
 800863c:	4598      	cmp	r8, r3
 800863e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008642:	f280 80c7 	bge.w	80087d4 <_strtod_l+0x874>
 8008646:	eba3 0308 	sub.w	r3, r3, r8
 800864a:	2b1f      	cmp	r3, #31
 800864c:	eba2 0203 	sub.w	r2, r2, r3
 8008650:	f04f 0101 	mov.w	r1, #1
 8008654:	f300 80b1 	bgt.w	80087ba <_strtod_l+0x85a>
 8008658:	fa01 f303 	lsl.w	r3, r1, r3
 800865c:	930d      	str	r3, [sp, #52]	; 0x34
 800865e:	2300      	movs	r3, #0
 8008660:	9308      	str	r3, [sp, #32]
 8008662:	eb09 0802 	add.w	r8, r9, r2
 8008666:	9b04      	ldr	r3, [sp, #16]
 8008668:	45c1      	cmp	r9, r8
 800866a:	4417      	add	r7, r2
 800866c:	441f      	add	r7, r3
 800866e:	464b      	mov	r3, r9
 8008670:	bfa8      	it	ge
 8008672:	4643      	movge	r3, r8
 8008674:	42bb      	cmp	r3, r7
 8008676:	bfa8      	it	ge
 8008678:	463b      	movge	r3, r7
 800867a:	2b00      	cmp	r3, #0
 800867c:	bfc2      	ittt	gt
 800867e:	eba8 0803 	subgt.w	r8, r8, r3
 8008682:	1aff      	subgt	r7, r7, r3
 8008684:	eba9 0903 	subgt.w	r9, r9, r3
 8008688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800868a:	2b00      	cmp	r3, #0
 800868c:	dd17      	ble.n	80086be <_strtod_l+0x75e>
 800868e:	4631      	mov	r1, r6
 8008690:	461a      	mov	r2, r3
 8008692:	4620      	mov	r0, r4
 8008694:	f001 ff18 	bl	800a4c8 <__pow5mult>
 8008698:	4606      	mov	r6, r0
 800869a:	2800      	cmp	r0, #0
 800869c:	f43f aea8 	beq.w	80083f0 <_strtod_l+0x490>
 80086a0:	4601      	mov	r1, r0
 80086a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80086a4:	4620      	mov	r0, r4
 80086a6:	f001 fe65 	bl	800a374 <__multiply>
 80086aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80086ac:	2800      	cmp	r0, #0
 80086ae:	f43f ae9f 	beq.w	80083f0 <_strtod_l+0x490>
 80086b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086b4:	4620      	mov	r0, r4
 80086b6:	f001 fd45 	bl	800a144 <_Bfree>
 80086ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086bc:	9318      	str	r3, [sp, #96]	; 0x60
 80086be:	f1b8 0f00 	cmp.w	r8, #0
 80086c2:	f300 808c 	bgt.w	80087de <_strtod_l+0x87e>
 80086c6:	9b06      	ldr	r3, [sp, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	dd08      	ble.n	80086de <_strtod_l+0x77e>
 80086cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086ce:	9905      	ldr	r1, [sp, #20]
 80086d0:	4620      	mov	r0, r4
 80086d2:	f001 fef9 	bl	800a4c8 <__pow5mult>
 80086d6:	9005      	str	r0, [sp, #20]
 80086d8:	2800      	cmp	r0, #0
 80086da:	f43f ae89 	beq.w	80083f0 <_strtod_l+0x490>
 80086de:	2f00      	cmp	r7, #0
 80086e0:	dd08      	ble.n	80086f4 <_strtod_l+0x794>
 80086e2:	9905      	ldr	r1, [sp, #20]
 80086e4:	463a      	mov	r2, r7
 80086e6:	4620      	mov	r0, r4
 80086e8:	f001 ff48 	bl	800a57c <__lshift>
 80086ec:	9005      	str	r0, [sp, #20]
 80086ee:	2800      	cmp	r0, #0
 80086f0:	f43f ae7e 	beq.w	80083f0 <_strtod_l+0x490>
 80086f4:	f1b9 0f00 	cmp.w	r9, #0
 80086f8:	dd08      	ble.n	800870c <_strtod_l+0x7ac>
 80086fa:	4631      	mov	r1, r6
 80086fc:	464a      	mov	r2, r9
 80086fe:	4620      	mov	r0, r4
 8008700:	f001 ff3c 	bl	800a57c <__lshift>
 8008704:	4606      	mov	r6, r0
 8008706:	2800      	cmp	r0, #0
 8008708:	f43f ae72 	beq.w	80083f0 <_strtod_l+0x490>
 800870c:	9a05      	ldr	r2, [sp, #20]
 800870e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008710:	4620      	mov	r0, r4
 8008712:	f001 ffbf 	bl	800a694 <__mdiff>
 8008716:	4605      	mov	r5, r0
 8008718:	2800      	cmp	r0, #0
 800871a:	f43f ae69 	beq.w	80083f0 <_strtod_l+0x490>
 800871e:	68c3      	ldr	r3, [r0, #12]
 8008720:	930b      	str	r3, [sp, #44]	; 0x2c
 8008722:	2300      	movs	r3, #0
 8008724:	60c3      	str	r3, [r0, #12]
 8008726:	4631      	mov	r1, r6
 8008728:	f001 ff98 	bl	800a65c <__mcmp>
 800872c:	2800      	cmp	r0, #0
 800872e:	da60      	bge.n	80087f2 <_strtod_l+0x892>
 8008730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008732:	ea53 030a 	orrs.w	r3, r3, sl
 8008736:	f040 8082 	bne.w	800883e <_strtod_l+0x8de>
 800873a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800873e:	2b00      	cmp	r3, #0
 8008740:	d17d      	bne.n	800883e <_strtod_l+0x8de>
 8008742:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008746:	0d1b      	lsrs	r3, r3, #20
 8008748:	051b      	lsls	r3, r3, #20
 800874a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800874e:	d976      	bls.n	800883e <_strtod_l+0x8de>
 8008750:	696b      	ldr	r3, [r5, #20]
 8008752:	b913      	cbnz	r3, 800875a <_strtod_l+0x7fa>
 8008754:	692b      	ldr	r3, [r5, #16]
 8008756:	2b01      	cmp	r3, #1
 8008758:	dd71      	ble.n	800883e <_strtod_l+0x8de>
 800875a:	4629      	mov	r1, r5
 800875c:	2201      	movs	r2, #1
 800875e:	4620      	mov	r0, r4
 8008760:	f001 ff0c 	bl	800a57c <__lshift>
 8008764:	4631      	mov	r1, r6
 8008766:	4605      	mov	r5, r0
 8008768:	f001 ff78 	bl	800a65c <__mcmp>
 800876c:	2800      	cmp	r0, #0
 800876e:	dd66      	ble.n	800883e <_strtod_l+0x8de>
 8008770:	9904      	ldr	r1, [sp, #16]
 8008772:	4a53      	ldr	r2, [pc, #332]	; (80088c0 <_strtod_l+0x960>)
 8008774:	465b      	mov	r3, fp
 8008776:	2900      	cmp	r1, #0
 8008778:	f000 8081 	beq.w	800887e <_strtod_l+0x91e>
 800877c:	ea02 010b 	and.w	r1, r2, fp
 8008780:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008784:	dc7b      	bgt.n	800887e <_strtod_l+0x91e>
 8008786:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800878a:	f77f aea9 	ble.w	80084e0 <_strtod_l+0x580>
 800878e:	4b4d      	ldr	r3, [pc, #308]	; (80088c4 <_strtod_l+0x964>)
 8008790:	4650      	mov	r0, sl
 8008792:	4659      	mov	r1, fp
 8008794:	2200      	movs	r2, #0
 8008796:	f7f7 ff2f 	bl	80005f8 <__aeabi_dmul>
 800879a:	460b      	mov	r3, r1
 800879c:	4303      	orrs	r3, r0
 800879e:	bf08      	it	eq
 80087a0:	2322      	moveq	r3, #34	; 0x22
 80087a2:	4682      	mov	sl, r0
 80087a4:	468b      	mov	fp, r1
 80087a6:	bf08      	it	eq
 80087a8:	6023      	streq	r3, [r4, #0]
 80087aa:	e62b      	b.n	8008404 <_strtod_l+0x4a4>
 80087ac:	f04f 32ff 	mov.w	r2, #4294967295
 80087b0:	fa02 f303 	lsl.w	r3, r2, r3
 80087b4:	ea03 0a0a 	and.w	sl, r3, sl
 80087b8:	e6e3      	b.n	8008582 <_strtod_l+0x622>
 80087ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80087be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80087c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80087c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80087ca:	fa01 f308 	lsl.w	r3, r1, r8
 80087ce:	9308      	str	r3, [sp, #32]
 80087d0:	910d      	str	r1, [sp, #52]	; 0x34
 80087d2:	e746      	b.n	8008662 <_strtod_l+0x702>
 80087d4:	2300      	movs	r3, #0
 80087d6:	9308      	str	r3, [sp, #32]
 80087d8:	2301      	movs	r3, #1
 80087da:	930d      	str	r3, [sp, #52]	; 0x34
 80087dc:	e741      	b.n	8008662 <_strtod_l+0x702>
 80087de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80087e0:	4642      	mov	r2, r8
 80087e2:	4620      	mov	r0, r4
 80087e4:	f001 feca 	bl	800a57c <__lshift>
 80087e8:	9018      	str	r0, [sp, #96]	; 0x60
 80087ea:	2800      	cmp	r0, #0
 80087ec:	f47f af6b 	bne.w	80086c6 <_strtod_l+0x766>
 80087f0:	e5fe      	b.n	80083f0 <_strtod_l+0x490>
 80087f2:	465f      	mov	r7, fp
 80087f4:	d16e      	bne.n	80088d4 <_strtod_l+0x974>
 80087f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087fc:	b342      	cbz	r2, 8008850 <_strtod_l+0x8f0>
 80087fe:	4a32      	ldr	r2, [pc, #200]	; (80088c8 <_strtod_l+0x968>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d128      	bne.n	8008856 <_strtod_l+0x8f6>
 8008804:	9b04      	ldr	r3, [sp, #16]
 8008806:	4651      	mov	r1, sl
 8008808:	b1eb      	cbz	r3, 8008846 <_strtod_l+0x8e6>
 800880a:	4b2d      	ldr	r3, [pc, #180]	; (80088c0 <_strtod_l+0x960>)
 800880c:	403b      	ands	r3, r7
 800880e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008812:	f04f 32ff 	mov.w	r2, #4294967295
 8008816:	d819      	bhi.n	800884c <_strtod_l+0x8ec>
 8008818:	0d1b      	lsrs	r3, r3, #20
 800881a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800881e:	fa02 f303 	lsl.w	r3, r2, r3
 8008822:	4299      	cmp	r1, r3
 8008824:	d117      	bne.n	8008856 <_strtod_l+0x8f6>
 8008826:	4b29      	ldr	r3, [pc, #164]	; (80088cc <_strtod_l+0x96c>)
 8008828:	429f      	cmp	r7, r3
 800882a:	d102      	bne.n	8008832 <_strtod_l+0x8d2>
 800882c:	3101      	adds	r1, #1
 800882e:	f43f addf 	beq.w	80083f0 <_strtod_l+0x490>
 8008832:	4b23      	ldr	r3, [pc, #140]	; (80088c0 <_strtod_l+0x960>)
 8008834:	403b      	ands	r3, r7
 8008836:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800883a:	f04f 0a00 	mov.w	sl, #0
 800883e:	9b04      	ldr	r3, [sp, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1a4      	bne.n	800878e <_strtod_l+0x82e>
 8008844:	e5de      	b.n	8008404 <_strtod_l+0x4a4>
 8008846:	f04f 33ff 	mov.w	r3, #4294967295
 800884a:	e7ea      	b.n	8008822 <_strtod_l+0x8c2>
 800884c:	4613      	mov	r3, r2
 800884e:	e7e8      	b.n	8008822 <_strtod_l+0x8c2>
 8008850:	ea53 030a 	orrs.w	r3, r3, sl
 8008854:	d08c      	beq.n	8008770 <_strtod_l+0x810>
 8008856:	9b08      	ldr	r3, [sp, #32]
 8008858:	b1db      	cbz	r3, 8008892 <_strtod_l+0x932>
 800885a:	423b      	tst	r3, r7
 800885c:	d0ef      	beq.n	800883e <_strtod_l+0x8de>
 800885e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008860:	9a04      	ldr	r2, [sp, #16]
 8008862:	4650      	mov	r0, sl
 8008864:	4659      	mov	r1, fp
 8008866:	b1c3      	cbz	r3, 800889a <_strtod_l+0x93a>
 8008868:	f7ff fb5c 	bl	8007f24 <sulp>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	ec51 0b18 	vmov	r0, r1, d8
 8008874:	f7f7 fd0a 	bl	800028c <__adddf3>
 8008878:	4682      	mov	sl, r0
 800887a:	468b      	mov	fp, r1
 800887c:	e7df      	b.n	800883e <_strtod_l+0x8de>
 800887e:	4013      	ands	r3, r2
 8008880:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008884:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008888:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800888c:	f04f 3aff 	mov.w	sl, #4294967295
 8008890:	e7d5      	b.n	800883e <_strtod_l+0x8de>
 8008892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008894:	ea13 0f0a 	tst.w	r3, sl
 8008898:	e7e0      	b.n	800885c <_strtod_l+0x8fc>
 800889a:	f7ff fb43 	bl	8007f24 <sulp>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	ec51 0b18 	vmov	r0, r1, d8
 80088a6:	f7f7 fcef 	bl	8000288 <__aeabi_dsub>
 80088aa:	2200      	movs	r2, #0
 80088ac:	2300      	movs	r3, #0
 80088ae:	4682      	mov	sl, r0
 80088b0:	468b      	mov	fp, r1
 80088b2:	f7f8 f909 	bl	8000ac8 <__aeabi_dcmpeq>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d0c1      	beq.n	800883e <_strtod_l+0x8de>
 80088ba:	e611      	b.n	80084e0 <_strtod_l+0x580>
 80088bc:	fffffc02 	.word	0xfffffc02
 80088c0:	7ff00000 	.word	0x7ff00000
 80088c4:	39500000 	.word	0x39500000
 80088c8:	000fffff 	.word	0x000fffff
 80088cc:	7fefffff 	.word	0x7fefffff
 80088d0:	0800bdc0 	.word	0x0800bdc0
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	f002 f83e 	bl	800a958 <__ratio>
 80088dc:	ec59 8b10 	vmov	r8, r9, d0
 80088e0:	ee10 0a10 	vmov	r0, s0
 80088e4:	2200      	movs	r2, #0
 80088e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80088ea:	4649      	mov	r1, r9
 80088ec:	f7f8 f900 	bl	8000af0 <__aeabi_dcmple>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d07a      	beq.n	80089ea <_strtod_l+0xa8a>
 80088f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d04a      	beq.n	8008990 <_strtod_l+0xa30>
 80088fa:	4b95      	ldr	r3, [pc, #596]	; (8008b50 <_strtod_l+0xbf0>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008902:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008b50 <_strtod_l+0xbf0>
 8008906:	f04f 0800 	mov.w	r8, #0
 800890a:	4b92      	ldr	r3, [pc, #584]	; (8008b54 <_strtod_l+0xbf4>)
 800890c:	403b      	ands	r3, r7
 800890e:	930d      	str	r3, [sp, #52]	; 0x34
 8008910:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008912:	4b91      	ldr	r3, [pc, #580]	; (8008b58 <_strtod_l+0xbf8>)
 8008914:	429a      	cmp	r2, r3
 8008916:	f040 80b0 	bne.w	8008a7a <_strtod_l+0xb1a>
 800891a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800891e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008922:	ec4b ab10 	vmov	d0, sl, fp
 8008926:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800892a:	f001 ff3d 	bl	800a7a8 <__ulp>
 800892e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008932:	ec53 2b10 	vmov	r2, r3, d0
 8008936:	f7f7 fe5f 	bl	80005f8 <__aeabi_dmul>
 800893a:	4652      	mov	r2, sl
 800893c:	465b      	mov	r3, fp
 800893e:	f7f7 fca5 	bl	800028c <__adddf3>
 8008942:	460b      	mov	r3, r1
 8008944:	4983      	ldr	r1, [pc, #524]	; (8008b54 <_strtod_l+0xbf4>)
 8008946:	4a85      	ldr	r2, [pc, #532]	; (8008b5c <_strtod_l+0xbfc>)
 8008948:	4019      	ands	r1, r3
 800894a:	4291      	cmp	r1, r2
 800894c:	4682      	mov	sl, r0
 800894e:	d960      	bls.n	8008a12 <_strtod_l+0xab2>
 8008950:	ee18 3a90 	vmov	r3, s17
 8008954:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008958:	4293      	cmp	r3, r2
 800895a:	d104      	bne.n	8008966 <_strtod_l+0xa06>
 800895c:	ee18 3a10 	vmov	r3, s16
 8008960:	3301      	adds	r3, #1
 8008962:	f43f ad45 	beq.w	80083f0 <_strtod_l+0x490>
 8008966:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008b68 <_strtod_l+0xc08>
 800896a:	f04f 3aff 	mov.w	sl, #4294967295
 800896e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008970:	4620      	mov	r0, r4
 8008972:	f001 fbe7 	bl	800a144 <_Bfree>
 8008976:	9905      	ldr	r1, [sp, #20]
 8008978:	4620      	mov	r0, r4
 800897a:	f001 fbe3 	bl	800a144 <_Bfree>
 800897e:	4631      	mov	r1, r6
 8008980:	4620      	mov	r0, r4
 8008982:	f001 fbdf 	bl	800a144 <_Bfree>
 8008986:	4629      	mov	r1, r5
 8008988:	4620      	mov	r0, r4
 800898a:	f001 fbdb 	bl	800a144 <_Bfree>
 800898e:	e61a      	b.n	80085c6 <_strtod_l+0x666>
 8008990:	f1ba 0f00 	cmp.w	sl, #0
 8008994:	d11b      	bne.n	80089ce <_strtod_l+0xa6e>
 8008996:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800899a:	b9f3      	cbnz	r3, 80089da <_strtod_l+0xa7a>
 800899c:	4b6c      	ldr	r3, [pc, #432]	; (8008b50 <_strtod_l+0xbf0>)
 800899e:	2200      	movs	r2, #0
 80089a0:	4640      	mov	r0, r8
 80089a2:	4649      	mov	r1, r9
 80089a4:	f7f8 f89a 	bl	8000adc <__aeabi_dcmplt>
 80089a8:	b9d0      	cbnz	r0, 80089e0 <_strtod_l+0xa80>
 80089aa:	4640      	mov	r0, r8
 80089ac:	4649      	mov	r1, r9
 80089ae:	4b6c      	ldr	r3, [pc, #432]	; (8008b60 <_strtod_l+0xc00>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	f7f7 fe21 	bl	80005f8 <__aeabi_dmul>
 80089b6:	4680      	mov	r8, r0
 80089b8:	4689      	mov	r9, r1
 80089ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80089be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80089c2:	9315      	str	r3, [sp, #84]	; 0x54
 80089c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80089c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80089cc:	e79d      	b.n	800890a <_strtod_l+0x9aa>
 80089ce:	f1ba 0f01 	cmp.w	sl, #1
 80089d2:	d102      	bne.n	80089da <_strtod_l+0xa7a>
 80089d4:	2f00      	cmp	r7, #0
 80089d6:	f43f ad83 	beq.w	80084e0 <_strtod_l+0x580>
 80089da:	4b62      	ldr	r3, [pc, #392]	; (8008b64 <_strtod_l+0xc04>)
 80089dc:	2200      	movs	r2, #0
 80089de:	e78e      	b.n	80088fe <_strtod_l+0x99e>
 80089e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008b60 <_strtod_l+0xc00>
 80089e4:	f04f 0800 	mov.w	r8, #0
 80089e8:	e7e7      	b.n	80089ba <_strtod_l+0xa5a>
 80089ea:	4b5d      	ldr	r3, [pc, #372]	; (8008b60 <_strtod_l+0xc00>)
 80089ec:	4640      	mov	r0, r8
 80089ee:	4649      	mov	r1, r9
 80089f0:	2200      	movs	r2, #0
 80089f2:	f7f7 fe01 	bl	80005f8 <__aeabi_dmul>
 80089f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089f8:	4680      	mov	r8, r0
 80089fa:	4689      	mov	r9, r1
 80089fc:	b933      	cbnz	r3, 8008a0c <_strtod_l+0xaac>
 80089fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a02:	900e      	str	r0, [sp, #56]	; 0x38
 8008a04:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008a0a:	e7dd      	b.n	80089c8 <_strtod_l+0xa68>
 8008a0c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008a10:	e7f9      	b.n	8008a06 <_strtod_l+0xaa6>
 8008a12:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008a16:	9b04      	ldr	r3, [sp, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1a8      	bne.n	800896e <_strtod_l+0xa0e>
 8008a1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a22:	0d1b      	lsrs	r3, r3, #20
 8008a24:	051b      	lsls	r3, r3, #20
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d1a1      	bne.n	800896e <_strtod_l+0xa0e>
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	4649      	mov	r1, r9
 8008a2e:	f7f8 f943 	bl	8000cb8 <__aeabi_d2lz>
 8008a32:	f7f7 fdb3 	bl	800059c <__aeabi_l2d>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4640      	mov	r0, r8
 8008a3c:	4649      	mov	r1, r9
 8008a3e:	f7f7 fc23 	bl	8000288 <__aeabi_dsub>
 8008a42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a48:	ea43 030a 	orr.w	r3, r3, sl
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	4680      	mov	r8, r0
 8008a50:	4689      	mov	r9, r1
 8008a52:	d055      	beq.n	8008b00 <_strtod_l+0xba0>
 8008a54:	a336      	add	r3, pc, #216	; (adr r3, 8008b30 <_strtod_l+0xbd0>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f7f8 f83f 	bl	8000adc <__aeabi_dcmplt>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	f47f acd0 	bne.w	8008404 <_strtod_l+0x4a4>
 8008a64:	a334      	add	r3, pc, #208	; (adr r3, 8008b38 <_strtod_l+0xbd8>)
 8008a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	4649      	mov	r1, r9
 8008a6e:	f7f8 f853 	bl	8000b18 <__aeabi_dcmpgt>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	f43f af7b 	beq.w	800896e <_strtod_l+0xa0e>
 8008a78:	e4c4      	b.n	8008404 <_strtod_l+0x4a4>
 8008a7a:	9b04      	ldr	r3, [sp, #16]
 8008a7c:	b333      	cbz	r3, 8008acc <_strtod_l+0xb6c>
 8008a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a80:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008a84:	d822      	bhi.n	8008acc <_strtod_l+0xb6c>
 8008a86:	a32e      	add	r3, pc, #184	; (adr r3, 8008b40 <_strtod_l+0xbe0>)
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4649      	mov	r1, r9
 8008a90:	f7f8 f82e 	bl	8000af0 <__aeabi_dcmple>
 8008a94:	b1a0      	cbz	r0, 8008ac0 <_strtod_l+0xb60>
 8008a96:	4649      	mov	r1, r9
 8008a98:	4640      	mov	r0, r8
 8008a9a:	f7f8 f885 	bl	8000ba8 <__aeabi_d2uiz>
 8008a9e:	2801      	cmp	r0, #1
 8008aa0:	bf38      	it	cc
 8008aa2:	2001      	movcc	r0, #1
 8008aa4:	f7f7 fd2e 	bl	8000504 <__aeabi_ui2d>
 8008aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aaa:	4680      	mov	r8, r0
 8008aac:	4689      	mov	r9, r1
 8008aae:	bb23      	cbnz	r3, 8008afa <_strtod_l+0xb9a>
 8008ab0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ab4:	9010      	str	r0, [sp, #64]	; 0x40
 8008ab6:	9311      	str	r3, [sp, #68]	; 0x44
 8008ab8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008abc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ac4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008ac8:	1a9b      	subs	r3, r3, r2
 8008aca:	9309      	str	r3, [sp, #36]	; 0x24
 8008acc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ad0:	eeb0 0a48 	vmov.f32	s0, s16
 8008ad4:	eef0 0a68 	vmov.f32	s1, s17
 8008ad8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008adc:	f001 fe64 	bl	800a7a8 <__ulp>
 8008ae0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ae4:	ec53 2b10 	vmov	r2, r3, d0
 8008ae8:	f7f7 fd86 	bl	80005f8 <__aeabi_dmul>
 8008aec:	ec53 2b18 	vmov	r2, r3, d8
 8008af0:	f7f7 fbcc 	bl	800028c <__adddf3>
 8008af4:	4682      	mov	sl, r0
 8008af6:	468b      	mov	fp, r1
 8008af8:	e78d      	b.n	8008a16 <_strtod_l+0xab6>
 8008afa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008afe:	e7db      	b.n	8008ab8 <_strtod_l+0xb58>
 8008b00:	a311      	add	r3, pc, #68	; (adr r3, 8008b48 <_strtod_l+0xbe8>)
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	f7f7 ffe9 	bl	8000adc <__aeabi_dcmplt>
 8008b0a:	e7b2      	b.n	8008a72 <_strtod_l+0xb12>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	f7ff ba6b 	b.w	8007ff0 <_strtod_l+0x90>
 8008b1a:	2a65      	cmp	r2, #101	; 0x65
 8008b1c:	f43f ab5f 	beq.w	80081de <_strtod_l+0x27e>
 8008b20:	2a45      	cmp	r2, #69	; 0x45
 8008b22:	f43f ab5c 	beq.w	80081de <_strtod_l+0x27e>
 8008b26:	2301      	movs	r3, #1
 8008b28:	f7ff bb94 	b.w	8008254 <_strtod_l+0x2f4>
 8008b2c:	f3af 8000 	nop.w
 8008b30:	94a03595 	.word	0x94a03595
 8008b34:	3fdfffff 	.word	0x3fdfffff
 8008b38:	35afe535 	.word	0x35afe535
 8008b3c:	3fe00000 	.word	0x3fe00000
 8008b40:	ffc00000 	.word	0xffc00000
 8008b44:	41dfffff 	.word	0x41dfffff
 8008b48:	94a03595 	.word	0x94a03595
 8008b4c:	3fcfffff 	.word	0x3fcfffff
 8008b50:	3ff00000 	.word	0x3ff00000
 8008b54:	7ff00000 	.word	0x7ff00000
 8008b58:	7fe00000 	.word	0x7fe00000
 8008b5c:	7c9fffff 	.word	0x7c9fffff
 8008b60:	3fe00000 	.word	0x3fe00000
 8008b64:	bff00000 	.word	0xbff00000
 8008b68:	7fefffff 	.word	0x7fefffff

08008b6c <_strtod_r>:
 8008b6c:	4b01      	ldr	r3, [pc, #4]	; (8008b74 <_strtod_r+0x8>)
 8008b6e:	f7ff b9f7 	b.w	8007f60 <_strtod_l>
 8008b72:	bf00      	nop
 8008b74:	20000090 	.word	0x20000090

08008b78 <strtod>:
 8008b78:	460a      	mov	r2, r1
 8008b7a:	4601      	mov	r1, r0
 8008b7c:	4802      	ldr	r0, [pc, #8]	; (8008b88 <strtod+0x10>)
 8008b7e:	4b03      	ldr	r3, [pc, #12]	; (8008b8c <strtod+0x14>)
 8008b80:	6800      	ldr	r0, [r0, #0]
 8008b82:	f7ff b9ed 	b.w	8007f60 <_strtod_l>
 8008b86:	bf00      	nop
 8008b88:	20000028 	.word	0x20000028
 8008b8c:	20000090 	.word	0x20000090

08008b90 <_strtol_l.constprop.0>:
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b96:	d001      	beq.n	8008b9c <_strtol_l.constprop.0+0xc>
 8008b98:	2b24      	cmp	r3, #36	; 0x24
 8008b9a:	d906      	bls.n	8008baa <_strtol_l.constprop.0+0x1a>
 8008b9c:	f7fe faf0 	bl	8007180 <__errno>
 8008ba0:	2316      	movs	r3, #22
 8008ba2:	6003      	str	r3, [r0, #0]
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008baa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008c90 <_strtol_l.constprop.0+0x100>
 8008bae:	460d      	mov	r5, r1
 8008bb0:	462e      	mov	r6, r5
 8008bb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bb6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008bba:	f017 0708 	ands.w	r7, r7, #8
 8008bbe:	d1f7      	bne.n	8008bb0 <_strtol_l.constprop.0+0x20>
 8008bc0:	2c2d      	cmp	r4, #45	; 0x2d
 8008bc2:	d132      	bne.n	8008c2a <_strtol_l.constprop.0+0x9a>
 8008bc4:	782c      	ldrb	r4, [r5, #0]
 8008bc6:	2701      	movs	r7, #1
 8008bc8:	1cb5      	adds	r5, r6, #2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d05b      	beq.n	8008c86 <_strtol_l.constprop.0+0xf6>
 8008bce:	2b10      	cmp	r3, #16
 8008bd0:	d109      	bne.n	8008be6 <_strtol_l.constprop.0+0x56>
 8008bd2:	2c30      	cmp	r4, #48	; 0x30
 8008bd4:	d107      	bne.n	8008be6 <_strtol_l.constprop.0+0x56>
 8008bd6:	782c      	ldrb	r4, [r5, #0]
 8008bd8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008bdc:	2c58      	cmp	r4, #88	; 0x58
 8008bde:	d14d      	bne.n	8008c7c <_strtol_l.constprop.0+0xec>
 8008be0:	786c      	ldrb	r4, [r5, #1]
 8008be2:	2310      	movs	r3, #16
 8008be4:	3502      	adds	r5, #2
 8008be6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008bea:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bee:	f04f 0c00 	mov.w	ip, #0
 8008bf2:	fbb8 f9f3 	udiv	r9, r8, r3
 8008bf6:	4666      	mov	r6, ip
 8008bf8:	fb03 8a19 	mls	sl, r3, r9, r8
 8008bfc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008c00:	f1be 0f09 	cmp.w	lr, #9
 8008c04:	d816      	bhi.n	8008c34 <_strtol_l.constprop.0+0xa4>
 8008c06:	4674      	mov	r4, lr
 8008c08:	42a3      	cmp	r3, r4
 8008c0a:	dd24      	ble.n	8008c56 <_strtol_l.constprop.0+0xc6>
 8008c0c:	f1bc 0f00 	cmp.w	ip, #0
 8008c10:	db1e      	blt.n	8008c50 <_strtol_l.constprop.0+0xc0>
 8008c12:	45b1      	cmp	r9, r6
 8008c14:	d31c      	bcc.n	8008c50 <_strtol_l.constprop.0+0xc0>
 8008c16:	d101      	bne.n	8008c1c <_strtol_l.constprop.0+0x8c>
 8008c18:	45a2      	cmp	sl, r4
 8008c1a:	db19      	blt.n	8008c50 <_strtol_l.constprop.0+0xc0>
 8008c1c:	fb06 4603 	mla	r6, r6, r3, r4
 8008c20:	f04f 0c01 	mov.w	ip, #1
 8008c24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c28:	e7e8      	b.n	8008bfc <_strtol_l.constprop.0+0x6c>
 8008c2a:	2c2b      	cmp	r4, #43	; 0x2b
 8008c2c:	bf04      	itt	eq
 8008c2e:	782c      	ldrbeq	r4, [r5, #0]
 8008c30:	1cb5      	addeq	r5, r6, #2
 8008c32:	e7ca      	b.n	8008bca <_strtol_l.constprop.0+0x3a>
 8008c34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008c38:	f1be 0f19 	cmp.w	lr, #25
 8008c3c:	d801      	bhi.n	8008c42 <_strtol_l.constprop.0+0xb2>
 8008c3e:	3c37      	subs	r4, #55	; 0x37
 8008c40:	e7e2      	b.n	8008c08 <_strtol_l.constprop.0+0x78>
 8008c42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008c46:	f1be 0f19 	cmp.w	lr, #25
 8008c4a:	d804      	bhi.n	8008c56 <_strtol_l.constprop.0+0xc6>
 8008c4c:	3c57      	subs	r4, #87	; 0x57
 8008c4e:	e7db      	b.n	8008c08 <_strtol_l.constprop.0+0x78>
 8008c50:	f04f 3cff 	mov.w	ip, #4294967295
 8008c54:	e7e6      	b.n	8008c24 <_strtol_l.constprop.0+0x94>
 8008c56:	f1bc 0f00 	cmp.w	ip, #0
 8008c5a:	da05      	bge.n	8008c68 <_strtol_l.constprop.0+0xd8>
 8008c5c:	2322      	movs	r3, #34	; 0x22
 8008c5e:	6003      	str	r3, [r0, #0]
 8008c60:	4646      	mov	r6, r8
 8008c62:	b942      	cbnz	r2, 8008c76 <_strtol_l.constprop.0+0xe6>
 8008c64:	4630      	mov	r0, r6
 8008c66:	e79e      	b.n	8008ba6 <_strtol_l.constprop.0+0x16>
 8008c68:	b107      	cbz	r7, 8008c6c <_strtol_l.constprop.0+0xdc>
 8008c6a:	4276      	negs	r6, r6
 8008c6c:	2a00      	cmp	r2, #0
 8008c6e:	d0f9      	beq.n	8008c64 <_strtol_l.constprop.0+0xd4>
 8008c70:	f1bc 0f00 	cmp.w	ip, #0
 8008c74:	d000      	beq.n	8008c78 <_strtol_l.constprop.0+0xe8>
 8008c76:	1e69      	subs	r1, r5, #1
 8008c78:	6011      	str	r1, [r2, #0]
 8008c7a:	e7f3      	b.n	8008c64 <_strtol_l.constprop.0+0xd4>
 8008c7c:	2430      	movs	r4, #48	; 0x30
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1b1      	bne.n	8008be6 <_strtol_l.constprop.0+0x56>
 8008c82:	2308      	movs	r3, #8
 8008c84:	e7af      	b.n	8008be6 <_strtol_l.constprop.0+0x56>
 8008c86:	2c30      	cmp	r4, #48	; 0x30
 8008c88:	d0a5      	beq.n	8008bd6 <_strtol_l.constprop.0+0x46>
 8008c8a:	230a      	movs	r3, #10
 8008c8c:	e7ab      	b.n	8008be6 <_strtol_l.constprop.0+0x56>
 8008c8e:	bf00      	nop
 8008c90:	0800bde9 	.word	0x0800bde9

08008c94 <_strtol_r>:
 8008c94:	f7ff bf7c 	b.w	8008b90 <_strtol_l.constprop.0>

08008c98 <quorem>:
 8008c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	6903      	ldr	r3, [r0, #16]
 8008c9e:	690c      	ldr	r4, [r1, #16]
 8008ca0:	42a3      	cmp	r3, r4
 8008ca2:	4607      	mov	r7, r0
 8008ca4:	f2c0 8081 	blt.w	8008daa <quorem+0x112>
 8008ca8:	3c01      	subs	r4, #1
 8008caa:	f101 0814 	add.w	r8, r1, #20
 8008cae:	f100 0514 	add.w	r5, r0, #20
 8008cb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cb6:	9301      	str	r3, [sp, #4]
 8008cb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008cc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ccc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cd0:	d331      	bcc.n	8008d36 <quorem+0x9e>
 8008cd2:	f04f 0e00 	mov.w	lr, #0
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	46ac      	mov	ip, r5
 8008cda:	46f2      	mov	sl, lr
 8008cdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ce0:	b293      	uxth	r3, r2
 8008ce2:	fb06 e303 	mla	r3, r6, r3, lr
 8008ce6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	ebaa 0303 	sub.w	r3, sl, r3
 8008cf0:	f8dc a000 	ldr.w	sl, [ip]
 8008cf4:	0c12      	lsrs	r2, r2, #16
 8008cf6:	fa13 f38a 	uxtah	r3, r3, sl
 8008cfa:	fb06 e202 	mla	r2, r6, r2, lr
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	9b00      	ldr	r3, [sp, #0]
 8008d02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d06:	b292      	uxth	r2, r2
 8008d08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d10:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d14:	4581      	cmp	r9, r0
 8008d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d1a:	f84c 3b04 	str.w	r3, [ip], #4
 8008d1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d22:	d2db      	bcs.n	8008cdc <quorem+0x44>
 8008d24:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d28:	b92b      	cbnz	r3, 8008d36 <quorem+0x9e>
 8008d2a:	9b01      	ldr	r3, [sp, #4]
 8008d2c:	3b04      	subs	r3, #4
 8008d2e:	429d      	cmp	r5, r3
 8008d30:	461a      	mov	r2, r3
 8008d32:	d32e      	bcc.n	8008d92 <quorem+0xfa>
 8008d34:	613c      	str	r4, [r7, #16]
 8008d36:	4638      	mov	r0, r7
 8008d38:	f001 fc90 	bl	800a65c <__mcmp>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	db24      	blt.n	8008d8a <quorem+0xf2>
 8008d40:	3601      	adds	r6, #1
 8008d42:	4628      	mov	r0, r5
 8008d44:	f04f 0c00 	mov.w	ip, #0
 8008d48:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d4c:	f8d0 e000 	ldr.w	lr, [r0]
 8008d50:	b293      	uxth	r3, r2
 8008d52:	ebac 0303 	sub.w	r3, ip, r3
 8008d56:	0c12      	lsrs	r2, r2, #16
 8008d58:	fa13 f38e 	uxtah	r3, r3, lr
 8008d5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d6a:	45c1      	cmp	r9, r8
 8008d6c:	f840 3b04 	str.w	r3, [r0], #4
 8008d70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d74:	d2e8      	bcs.n	8008d48 <quorem+0xb0>
 8008d76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d7e:	b922      	cbnz	r2, 8008d8a <quorem+0xf2>
 8008d80:	3b04      	subs	r3, #4
 8008d82:	429d      	cmp	r5, r3
 8008d84:	461a      	mov	r2, r3
 8008d86:	d30a      	bcc.n	8008d9e <quorem+0x106>
 8008d88:	613c      	str	r4, [r7, #16]
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	b003      	add	sp, #12
 8008d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d92:	6812      	ldr	r2, [r2, #0]
 8008d94:	3b04      	subs	r3, #4
 8008d96:	2a00      	cmp	r2, #0
 8008d98:	d1cc      	bne.n	8008d34 <quorem+0x9c>
 8008d9a:	3c01      	subs	r4, #1
 8008d9c:	e7c7      	b.n	8008d2e <quorem+0x96>
 8008d9e:	6812      	ldr	r2, [r2, #0]
 8008da0:	3b04      	subs	r3, #4
 8008da2:	2a00      	cmp	r2, #0
 8008da4:	d1f0      	bne.n	8008d88 <quorem+0xf0>
 8008da6:	3c01      	subs	r4, #1
 8008da8:	e7eb      	b.n	8008d82 <quorem+0xea>
 8008daa:	2000      	movs	r0, #0
 8008dac:	e7ee      	b.n	8008d8c <quorem+0xf4>
	...

08008db0 <_dtoa_r>:
 8008db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db4:	ed2d 8b04 	vpush	{d8-d9}
 8008db8:	ec57 6b10 	vmov	r6, r7, d0
 8008dbc:	b093      	sub	sp, #76	; 0x4c
 8008dbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008dc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008dc4:	9106      	str	r1, [sp, #24]
 8008dc6:	ee10 aa10 	vmov	sl, s0
 8008dca:	4604      	mov	r4, r0
 8008dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dce:	930c      	str	r3, [sp, #48]	; 0x30
 8008dd0:	46bb      	mov	fp, r7
 8008dd2:	b975      	cbnz	r5, 8008df2 <_dtoa_r+0x42>
 8008dd4:	2010      	movs	r0, #16
 8008dd6:	f001 f94d 	bl	800a074 <malloc>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	6260      	str	r0, [r4, #36]	; 0x24
 8008dde:	b920      	cbnz	r0, 8008dea <_dtoa_r+0x3a>
 8008de0:	4ba7      	ldr	r3, [pc, #668]	; (8009080 <_dtoa_r+0x2d0>)
 8008de2:	21ea      	movs	r1, #234	; 0xea
 8008de4:	48a7      	ldr	r0, [pc, #668]	; (8009084 <_dtoa_r+0x2d4>)
 8008de6:	f002 f8bd 	bl	800af64 <__assert_func>
 8008dea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008dee:	6005      	str	r5, [r0, #0]
 8008df0:	60c5      	str	r5, [r0, #12]
 8008df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008df4:	6819      	ldr	r1, [r3, #0]
 8008df6:	b151      	cbz	r1, 8008e0e <_dtoa_r+0x5e>
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	604a      	str	r2, [r1, #4]
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	4093      	lsls	r3, r2
 8008e00:	608b      	str	r3, [r1, #8]
 8008e02:	4620      	mov	r0, r4
 8008e04:	f001 f99e 	bl	800a144 <_Bfree>
 8008e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	1e3b      	subs	r3, r7, #0
 8008e10:	bfaa      	itet	ge
 8008e12:	2300      	movge	r3, #0
 8008e14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008e18:	f8c8 3000 	strge.w	r3, [r8]
 8008e1c:	4b9a      	ldr	r3, [pc, #616]	; (8009088 <_dtoa_r+0x2d8>)
 8008e1e:	bfbc      	itt	lt
 8008e20:	2201      	movlt	r2, #1
 8008e22:	f8c8 2000 	strlt.w	r2, [r8]
 8008e26:	ea33 030b 	bics.w	r3, r3, fp
 8008e2a:	d11b      	bne.n	8008e64 <_dtoa_r+0xb4>
 8008e2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e38:	4333      	orrs	r3, r6
 8008e3a:	f000 8592 	beq.w	8009962 <_dtoa_r+0xbb2>
 8008e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e40:	b963      	cbnz	r3, 8008e5c <_dtoa_r+0xac>
 8008e42:	4b92      	ldr	r3, [pc, #584]	; (800908c <_dtoa_r+0x2dc>)
 8008e44:	e022      	b.n	8008e8c <_dtoa_r+0xdc>
 8008e46:	4b92      	ldr	r3, [pc, #584]	; (8009090 <_dtoa_r+0x2e0>)
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e4e:	6013      	str	r3, [r2, #0]
 8008e50:	9801      	ldr	r0, [sp, #4]
 8008e52:	b013      	add	sp, #76	; 0x4c
 8008e54:	ecbd 8b04 	vpop	{d8-d9}
 8008e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5c:	4b8b      	ldr	r3, [pc, #556]	; (800908c <_dtoa_r+0x2dc>)
 8008e5e:	9301      	str	r3, [sp, #4]
 8008e60:	3303      	adds	r3, #3
 8008e62:	e7f3      	b.n	8008e4c <_dtoa_r+0x9c>
 8008e64:	2200      	movs	r2, #0
 8008e66:	2300      	movs	r3, #0
 8008e68:	4650      	mov	r0, sl
 8008e6a:	4659      	mov	r1, fp
 8008e6c:	f7f7 fe2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e70:	ec4b ab19 	vmov	d9, sl, fp
 8008e74:	4680      	mov	r8, r0
 8008e76:	b158      	cbz	r0, 8008e90 <_dtoa_r+0xe0>
 8008e78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	6013      	str	r3, [r2, #0]
 8008e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 856b 	beq.w	800995c <_dtoa_r+0xbac>
 8008e86:	4883      	ldr	r0, [pc, #524]	; (8009094 <_dtoa_r+0x2e4>)
 8008e88:	6018      	str	r0, [r3, #0]
 8008e8a:	1e43      	subs	r3, r0, #1
 8008e8c:	9301      	str	r3, [sp, #4]
 8008e8e:	e7df      	b.n	8008e50 <_dtoa_r+0xa0>
 8008e90:	ec4b ab10 	vmov	d0, sl, fp
 8008e94:	aa10      	add	r2, sp, #64	; 0x40
 8008e96:	a911      	add	r1, sp, #68	; 0x44
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f001 fd01 	bl	800a8a0 <__d2b>
 8008e9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008ea2:	ee08 0a10 	vmov	s16, r0
 8008ea6:	2d00      	cmp	r5, #0
 8008ea8:	f000 8084 	beq.w	8008fb4 <_dtoa_r+0x204>
 8008eac:	ee19 3a90 	vmov	r3, s19
 8008eb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008eb8:	4656      	mov	r6, sl
 8008eba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008ebe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ec2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008ec6:	4b74      	ldr	r3, [pc, #464]	; (8009098 <_dtoa_r+0x2e8>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	4630      	mov	r0, r6
 8008ecc:	4639      	mov	r1, r7
 8008ece:	f7f7 f9db 	bl	8000288 <__aeabi_dsub>
 8008ed2:	a365      	add	r3, pc, #404	; (adr r3, 8009068 <_dtoa_r+0x2b8>)
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	f7f7 fb8e 	bl	80005f8 <__aeabi_dmul>
 8008edc:	a364      	add	r3, pc, #400	; (adr r3, 8009070 <_dtoa_r+0x2c0>)
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	f7f7 f9d3 	bl	800028c <__adddf3>
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	4628      	mov	r0, r5
 8008eea:	460f      	mov	r7, r1
 8008eec:	f7f7 fb1a 	bl	8000524 <__aeabi_i2d>
 8008ef0:	a361      	add	r3, pc, #388	; (adr r3, 8009078 <_dtoa_r+0x2c8>)
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	f7f7 fb7f 	bl	80005f8 <__aeabi_dmul>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4630      	mov	r0, r6
 8008f00:	4639      	mov	r1, r7
 8008f02:	f7f7 f9c3 	bl	800028c <__adddf3>
 8008f06:	4606      	mov	r6, r0
 8008f08:	460f      	mov	r7, r1
 8008f0a:	f7f7 fe25 	bl	8000b58 <__aeabi_d2iz>
 8008f0e:	2200      	movs	r2, #0
 8008f10:	9000      	str	r0, [sp, #0]
 8008f12:	2300      	movs	r3, #0
 8008f14:	4630      	mov	r0, r6
 8008f16:	4639      	mov	r1, r7
 8008f18:	f7f7 fde0 	bl	8000adc <__aeabi_dcmplt>
 8008f1c:	b150      	cbz	r0, 8008f34 <_dtoa_r+0x184>
 8008f1e:	9800      	ldr	r0, [sp, #0]
 8008f20:	f7f7 fb00 	bl	8000524 <__aeabi_i2d>
 8008f24:	4632      	mov	r2, r6
 8008f26:	463b      	mov	r3, r7
 8008f28:	f7f7 fdce 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f2c:	b910      	cbnz	r0, 8008f34 <_dtoa_r+0x184>
 8008f2e:	9b00      	ldr	r3, [sp, #0]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	9b00      	ldr	r3, [sp, #0]
 8008f36:	2b16      	cmp	r3, #22
 8008f38:	d85a      	bhi.n	8008ff0 <_dtoa_r+0x240>
 8008f3a:	9a00      	ldr	r2, [sp, #0]
 8008f3c:	4b57      	ldr	r3, [pc, #348]	; (800909c <_dtoa_r+0x2ec>)
 8008f3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f46:	ec51 0b19 	vmov	r0, r1, d9
 8008f4a:	f7f7 fdc7 	bl	8000adc <__aeabi_dcmplt>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d050      	beq.n	8008ff4 <_dtoa_r+0x244>
 8008f52:	9b00      	ldr	r3, [sp, #0]
 8008f54:	3b01      	subs	r3, #1
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	2300      	movs	r3, #0
 8008f5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f5e:	1b5d      	subs	r5, r3, r5
 8008f60:	1e6b      	subs	r3, r5, #1
 8008f62:	9305      	str	r3, [sp, #20]
 8008f64:	bf45      	ittet	mi
 8008f66:	f1c5 0301 	rsbmi	r3, r5, #1
 8008f6a:	9304      	strmi	r3, [sp, #16]
 8008f6c:	2300      	movpl	r3, #0
 8008f6e:	2300      	movmi	r3, #0
 8008f70:	bf4c      	ite	mi
 8008f72:	9305      	strmi	r3, [sp, #20]
 8008f74:	9304      	strpl	r3, [sp, #16]
 8008f76:	9b00      	ldr	r3, [sp, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	db3d      	blt.n	8008ff8 <_dtoa_r+0x248>
 8008f7c:	9b05      	ldr	r3, [sp, #20]
 8008f7e:	9a00      	ldr	r2, [sp, #0]
 8008f80:	920a      	str	r2, [sp, #40]	; 0x28
 8008f82:	4413      	add	r3, r2
 8008f84:	9305      	str	r3, [sp, #20]
 8008f86:	2300      	movs	r3, #0
 8008f88:	9307      	str	r3, [sp, #28]
 8008f8a:	9b06      	ldr	r3, [sp, #24]
 8008f8c:	2b09      	cmp	r3, #9
 8008f8e:	f200 8089 	bhi.w	80090a4 <_dtoa_r+0x2f4>
 8008f92:	2b05      	cmp	r3, #5
 8008f94:	bfc4      	itt	gt
 8008f96:	3b04      	subgt	r3, #4
 8008f98:	9306      	strgt	r3, [sp, #24]
 8008f9a:	9b06      	ldr	r3, [sp, #24]
 8008f9c:	f1a3 0302 	sub.w	r3, r3, #2
 8008fa0:	bfcc      	ite	gt
 8008fa2:	2500      	movgt	r5, #0
 8008fa4:	2501      	movle	r5, #1
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	f200 8087 	bhi.w	80090ba <_dtoa_r+0x30a>
 8008fac:	e8df f003 	tbb	[pc, r3]
 8008fb0:	59383a2d 	.word	0x59383a2d
 8008fb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008fb8:	441d      	add	r5, r3
 8008fba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fbe:	2b20      	cmp	r3, #32
 8008fc0:	bfc1      	itttt	gt
 8008fc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008fca:	fa0b f303 	lslgt.w	r3, fp, r3
 8008fce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008fd2:	bfda      	itte	le
 8008fd4:	f1c3 0320 	rsble	r3, r3, #32
 8008fd8:	fa06 f003 	lslle.w	r0, r6, r3
 8008fdc:	4318      	orrgt	r0, r3
 8008fde:	f7f7 fa91 	bl	8000504 <__aeabi_ui2d>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008fea:	3d01      	subs	r5, #1
 8008fec:	930e      	str	r3, [sp, #56]	; 0x38
 8008fee:	e76a      	b.n	8008ec6 <_dtoa_r+0x116>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e7b2      	b.n	8008f5a <_dtoa_r+0x1aa>
 8008ff4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ff6:	e7b1      	b.n	8008f5c <_dtoa_r+0x1ac>
 8008ff8:	9b04      	ldr	r3, [sp, #16]
 8008ffa:	9a00      	ldr	r2, [sp, #0]
 8008ffc:	1a9b      	subs	r3, r3, r2
 8008ffe:	9304      	str	r3, [sp, #16]
 8009000:	4253      	negs	r3, r2
 8009002:	9307      	str	r3, [sp, #28]
 8009004:	2300      	movs	r3, #0
 8009006:	930a      	str	r3, [sp, #40]	; 0x28
 8009008:	e7bf      	b.n	8008f8a <_dtoa_r+0x1da>
 800900a:	2300      	movs	r3, #0
 800900c:	9308      	str	r3, [sp, #32]
 800900e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009010:	2b00      	cmp	r3, #0
 8009012:	dc55      	bgt.n	80090c0 <_dtoa_r+0x310>
 8009014:	2301      	movs	r3, #1
 8009016:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800901a:	461a      	mov	r2, r3
 800901c:	9209      	str	r2, [sp, #36]	; 0x24
 800901e:	e00c      	b.n	800903a <_dtoa_r+0x28a>
 8009020:	2301      	movs	r3, #1
 8009022:	e7f3      	b.n	800900c <_dtoa_r+0x25c>
 8009024:	2300      	movs	r3, #0
 8009026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009028:	9308      	str	r3, [sp, #32]
 800902a:	9b00      	ldr	r3, [sp, #0]
 800902c:	4413      	add	r3, r2
 800902e:	9302      	str	r3, [sp, #8]
 8009030:	3301      	adds	r3, #1
 8009032:	2b01      	cmp	r3, #1
 8009034:	9303      	str	r3, [sp, #12]
 8009036:	bfb8      	it	lt
 8009038:	2301      	movlt	r3, #1
 800903a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800903c:	2200      	movs	r2, #0
 800903e:	6042      	str	r2, [r0, #4]
 8009040:	2204      	movs	r2, #4
 8009042:	f102 0614 	add.w	r6, r2, #20
 8009046:	429e      	cmp	r6, r3
 8009048:	6841      	ldr	r1, [r0, #4]
 800904a:	d93d      	bls.n	80090c8 <_dtoa_r+0x318>
 800904c:	4620      	mov	r0, r4
 800904e:	f001 f839 	bl	800a0c4 <_Balloc>
 8009052:	9001      	str	r0, [sp, #4]
 8009054:	2800      	cmp	r0, #0
 8009056:	d13b      	bne.n	80090d0 <_dtoa_r+0x320>
 8009058:	4b11      	ldr	r3, [pc, #68]	; (80090a0 <_dtoa_r+0x2f0>)
 800905a:	4602      	mov	r2, r0
 800905c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009060:	e6c0      	b.n	8008de4 <_dtoa_r+0x34>
 8009062:	2301      	movs	r3, #1
 8009064:	e7df      	b.n	8009026 <_dtoa_r+0x276>
 8009066:	bf00      	nop
 8009068:	636f4361 	.word	0x636f4361
 800906c:	3fd287a7 	.word	0x3fd287a7
 8009070:	8b60c8b3 	.word	0x8b60c8b3
 8009074:	3fc68a28 	.word	0x3fc68a28
 8009078:	509f79fb 	.word	0x509f79fb
 800907c:	3fd34413 	.word	0x3fd34413
 8009080:	0800bef6 	.word	0x0800bef6
 8009084:	0800bf0d 	.word	0x0800bf0d
 8009088:	7ff00000 	.word	0x7ff00000
 800908c:	0800bef2 	.word	0x0800bef2
 8009090:	0800bee9 	.word	0x0800bee9
 8009094:	0800bd6d 	.word	0x0800bd6d
 8009098:	3ff80000 	.word	0x3ff80000
 800909c:	0800c078 	.word	0x0800c078
 80090a0:	0800bf68 	.word	0x0800bf68
 80090a4:	2501      	movs	r5, #1
 80090a6:	2300      	movs	r3, #0
 80090a8:	9306      	str	r3, [sp, #24]
 80090aa:	9508      	str	r5, [sp, #32]
 80090ac:	f04f 33ff 	mov.w	r3, #4294967295
 80090b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090b4:	2200      	movs	r2, #0
 80090b6:	2312      	movs	r3, #18
 80090b8:	e7b0      	b.n	800901c <_dtoa_r+0x26c>
 80090ba:	2301      	movs	r3, #1
 80090bc:	9308      	str	r3, [sp, #32]
 80090be:	e7f5      	b.n	80090ac <_dtoa_r+0x2fc>
 80090c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090c6:	e7b8      	b.n	800903a <_dtoa_r+0x28a>
 80090c8:	3101      	adds	r1, #1
 80090ca:	6041      	str	r1, [r0, #4]
 80090cc:	0052      	lsls	r2, r2, #1
 80090ce:	e7b8      	b.n	8009042 <_dtoa_r+0x292>
 80090d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090d2:	9a01      	ldr	r2, [sp, #4]
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	9b03      	ldr	r3, [sp, #12]
 80090d8:	2b0e      	cmp	r3, #14
 80090da:	f200 809d 	bhi.w	8009218 <_dtoa_r+0x468>
 80090de:	2d00      	cmp	r5, #0
 80090e0:	f000 809a 	beq.w	8009218 <_dtoa_r+0x468>
 80090e4:	9b00      	ldr	r3, [sp, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	dd32      	ble.n	8009150 <_dtoa_r+0x3a0>
 80090ea:	4ab7      	ldr	r2, [pc, #732]	; (80093c8 <_dtoa_r+0x618>)
 80090ec:	f003 030f 	and.w	r3, r3, #15
 80090f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80090f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090f8:	9b00      	ldr	r3, [sp, #0]
 80090fa:	05d8      	lsls	r0, r3, #23
 80090fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009100:	d516      	bpl.n	8009130 <_dtoa_r+0x380>
 8009102:	4bb2      	ldr	r3, [pc, #712]	; (80093cc <_dtoa_r+0x61c>)
 8009104:	ec51 0b19 	vmov	r0, r1, d9
 8009108:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800910c:	f7f7 fb9e 	bl	800084c <__aeabi_ddiv>
 8009110:	f007 070f 	and.w	r7, r7, #15
 8009114:	4682      	mov	sl, r0
 8009116:	468b      	mov	fp, r1
 8009118:	2503      	movs	r5, #3
 800911a:	4eac      	ldr	r6, [pc, #688]	; (80093cc <_dtoa_r+0x61c>)
 800911c:	b957      	cbnz	r7, 8009134 <_dtoa_r+0x384>
 800911e:	4642      	mov	r2, r8
 8009120:	464b      	mov	r3, r9
 8009122:	4650      	mov	r0, sl
 8009124:	4659      	mov	r1, fp
 8009126:	f7f7 fb91 	bl	800084c <__aeabi_ddiv>
 800912a:	4682      	mov	sl, r0
 800912c:	468b      	mov	fp, r1
 800912e:	e028      	b.n	8009182 <_dtoa_r+0x3d2>
 8009130:	2502      	movs	r5, #2
 8009132:	e7f2      	b.n	800911a <_dtoa_r+0x36a>
 8009134:	07f9      	lsls	r1, r7, #31
 8009136:	d508      	bpl.n	800914a <_dtoa_r+0x39a>
 8009138:	4640      	mov	r0, r8
 800913a:	4649      	mov	r1, r9
 800913c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009140:	f7f7 fa5a 	bl	80005f8 <__aeabi_dmul>
 8009144:	3501      	adds	r5, #1
 8009146:	4680      	mov	r8, r0
 8009148:	4689      	mov	r9, r1
 800914a:	107f      	asrs	r7, r7, #1
 800914c:	3608      	adds	r6, #8
 800914e:	e7e5      	b.n	800911c <_dtoa_r+0x36c>
 8009150:	f000 809b 	beq.w	800928a <_dtoa_r+0x4da>
 8009154:	9b00      	ldr	r3, [sp, #0]
 8009156:	4f9d      	ldr	r7, [pc, #628]	; (80093cc <_dtoa_r+0x61c>)
 8009158:	425e      	negs	r6, r3
 800915a:	4b9b      	ldr	r3, [pc, #620]	; (80093c8 <_dtoa_r+0x618>)
 800915c:	f006 020f 	and.w	r2, r6, #15
 8009160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	ec51 0b19 	vmov	r0, r1, d9
 800916c:	f7f7 fa44 	bl	80005f8 <__aeabi_dmul>
 8009170:	1136      	asrs	r6, r6, #4
 8009172:	4682      	mov	sl, r0
 8009174:	468b      	mov	fp, r1
 8009176:	2300      	movs	r3, #0
 8009178:	2502      	movs	r5, #2
 800917a:	2e00      	cmp	r6, #0
 800917c:	d17a      	bne.n	8009274 <_dtoa_r+0x4c4>
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1d3      	bne.n	800912a <_dtoa_r+0x37a>
 8009182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 8082 	beq.w	800928e <_dtoa_r+0x4de>
 800918a:	4b91      	ldr	r3, [pc, #580]	; (80093d0 <_dtoa_r+0x620>)
 800918c:	2200      	movs	r2, #0
 800918e:	4650      	mov	r0, sl
 8009190:	4659      	mov	r1, fp
 8009192:	f7f7 fca3 	bl	8000adc <__aeabi_dcmplt>
 8009196:	2800      	cmp	r0, #0
 8009198:	d079      	beq.n	800928e <_dtoa_r+0x4de>
 800919a:	9b03      	ldr	r3, [sp, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d076      	beq.n	800928e <_dtoa_r+0x4de>
 80091a0:	9b02      	ldr	r3, [sp, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	dd36      	ble.n	8009214 <_dtoa_r+0x464>
 80091a6:	9b00      	ldr	r3, [sp, #0]
 80091a8:	4650      	mov	r0, sl
 80091aa:	4659      	mov	r1, fp
 80091ac:	1e5f      	subs	r7, r3, #1
 80091ae:	2200      	movs	r2, #0
 80091b0:	4b88      	ldr	r3, [pc, #544]	; (80093d4 <_dtoa_r+0x624>)
 80091b2:	f7f7 fa21 	bl	80005f8 <__aeabi_dmul>
 80091b6:	9e02      	ldr	r6, [sp, #8]
 80091b8:	4682      	mov	sl, r0
 80091ba:	468b      	mov	fp, r1
 80091bc:	3501      	adds	r5, #1
 80091be:	4628      	mov	r0, r5
 80091c0:	f7f7 f9b0 	bl	8000524 <__aeabi_i2d>
 80091c4:	4652      	mov	r2, sl
 80091c6:	465b      	mov	r3, fp
 80091c8:	f7f7 fa16 	bl	80005f8 <__aeabi_dmul>
 80091cc:	4b82      	ldr	r3, [pc, #520]	; (80093d8 <_dtoa_r+0x628>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	f7f7 f85c 	bl	800028c <__adddf3>
 80091d4:	46d0      	mov	r8, sl
 80091d6:	46d9      	mov	r9, fp
 80091d8:	4682      	mov	sl, r0
 80091da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80091de:	2e00      	cmp	r6, #0
 80091e0:	d158      	bne.n	8009294 <_dtoa_r+0x4e4>
 80091e2:	4b7e      	ldr	r3, [pc, #504]	; (80093dc <_dtoa_r+0x62c>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	4640      	mov	r0, r8
 80091e8:	4649      	mov	r1, r9
 80091ea:	f7f7 f84d 	bl	8000288 <__aeabi_dsub>
 80091ee:	4652      	mov	r2, sl
 80091f0:	465b      	mov	r3, fp
 80091f2:	4680      	mov	r8, r0
 80091f4:	4689      	mov	r9, r1
 80091f6:	f7f7 fc8f 	bl	8000b18 <__aeabi_dcmpgt>
 80091fa:	2800      	cmp	r0, #0
 80091fc:	f040 8295 	bne.w	800972a <_dtoa_r+0x97a>
 8009200:	4652      	mov	r2, sl
 8009202:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009206:	4640      	mov	r0, r8
 8009208:	4649      	mov	r1, r9
 800920a:	f7f7 fc67 	bl	8000adc <__aeabi_dcmplt>
 800920e:	2800      	cmp	r0, #0
 8009210:	f040 8289 	bne.w	8009726 <_dtoa_r+0x976>
 8009214:	ec5b ab19 	vmov	sl, fp, d9
 8009218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800921a:	2b00      	cmp	r3, #0
 800921c:	f2c0 8148 	blt.w	80094b0 <_dtoa_r+0x700>
 8009220:	9a00      	ldr	r2, [sp, #0]
 8009222:	2a0e      	cmp	r2, #14
 8009224:	f300 8144 	bgt.w	80094b0 <_dtoa_r+0x700>
 8009228:	4b67      	ldr	r3, [pc, #412]	; (80093c8 <_dtoa_r+0x618>)
 800922a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800922e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009234:	2b00      	cmp	r3, #0
 8009236:	f280 80d5 	bge.w	80093e4 <_dtoa_r+0x634>
 800923a:	9b03      	ldr	r3, [sp, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	f300 80d1 	bgt.w	80093e4 <_dtoa_r+0x634>
 8009242:	f040 826f 	bne.w	8009724 <_dtoa_r+0x974>
 8009246:	4b65      	ldr	r3, [pc, #404]	; (80093dc <_dtoa_r+0x62c>)
 8009248:	2200      	movs	r2, #0
 800924a:	4640      	mov	r0, r8
 800924c:	4649      	mov	r1, r9
 800924e:	f7f7 f9d3 	bl	80005f8 <__aeabi_dmul>
 8009252:	4652      	mov	r2, sl
 8009254:	465b      	mov	r3, fp
 8009256:	f7f7 fc55 	bl	8000b04 <__aeabi_dcmpge>
 800925a:	9e03      	ldr	r6, [sp, #12]
 800925c:	4637      	mov	r7, r6
 800925e:	2800      	cmp	r0, #0
 8009260:	f040 8245 	bne.w	80096ee <_dtoa_r+0x93e>
 8009264:	9d01      	ldr	r5, [sp, #4]
 8009266:	2331      	movs	r3, #49	; 0x31
 8009268:	f805 3b01 	strb.w	r3, [r5], #1
 800926c:	9b00      	ldr	r3, [sp, #0]
 800926e:	3301      	adds	r3, #1
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	e240      	b.n	80096f6 <_dtoa_r+0x946>
 8009274:	07f2      	lsls	r2, r6, #31
 8009276:	d505      	bpl.n	8009284 <_dtoa_r+0x4d4>
 8009278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800927c:	f7f7 f9bc 	bl	80005f8 <__aeabi_dmul>
 8009280:	3501      	adds	r5, #1
 8009282:	2301      	movs	r3, #1
 8009284:	1076      	asrs	r6, r6, #1
 8009286:	3708      	adds	r7, #8
 8009288:	e777      	b.n	800917a <_dtoa_r+0x3ca>
 800928a:	2502      	movs	r5, #2
 800928c:	e779      	b.n	8009182 <_dtoa_r+0x3d2>
 800928e:	9f00      	ldr	r7, [sp, #0]
 8009290:	9e03      	ldr	r6, [sp, #12]
 8009292:	e794      	b.n	80091be <_dtoa_r+0x40e>
 8009294:	9901      	ldr	r1, [sp, #4]
 8009296:	4b4c      	ldr	r3, [pc, #304]	; (80093c8 <_dtoa_r+0x618>)
 8009298:	4431      	add	r1, r6
 800929a:	910d      	str	r1, [sp, #52]	; 0x34
 800929c:	9908      	ldr	r1, [sp, #32]
 800929e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092a6:	2900      	cmp	r1, #0
 80092a8:	d043      	beq.n	8009332 <_dtoa_r+0x582>
 80092aa:	494d      	ldr	r1, [pc, #308]	; (80093e0 <_dtoa_r+0x630>)
 80092ac:	2000      	movs	r0, #0
 80092ae:	f7f7 facd 	bl	800084c <__aeabi_ddiv>
 80092b2:	4652      	mov	r2, sl
 80092b4:	465b      	mov	r3, fp
 80092b6:	f7f6 ffe7 	bl	8000288 <__aeabi_dsub>
 80092ba:	9d01      	ldr	r5, [sp, #4]
 80092bc:	4682      	mov	sl, r0
 80092be:	468b      	mov	fp, r1
 80092c0:	4649      	mov	r1, r9
 80092c2:	4640      	mov	r0, r8
 80092c4:	f7f7 fc48 	bl	8000b58 <__aeabi_d2iz>
 80092c8:	4606      	mov	r6, r0
 80092ca:	f7f7 f92b 	bl	8000524 <__aeabi_i2d>
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	4640      	mov	r0, r8
 80092d4:	4649      	mov	r1, r9
 80092d6:	f7f6 ffd7 	bl	8000288 <__aeabi_dsub>
 80092da:	3630      	adds	r6, #48	; 0x30
 80092dc:	f805 6b01 	strb.w	r6, [r5], #1
 80092e0:	4652      	mov	r2, sl
 80092e2:	465b      	mov	r3, fp
 80092e4:	4680      	mov	r8, r0
 80092e6:	4689      	mov	r9, r1
 80092e8:	f7f7 fbf8 	bl	8000adc <__aeabi_dcmplt>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d163      	bne.n	80093b8 <_dtoa_r+0x608>
 80092f0:	4642      	mov	r2, r8
 80092f2:	464b      	mov	r3, r9
 80092f4:	4936      	ldr	r1, [pc, #216]	; (80093d0 <_dtoa_r+0x620>)
 80092f6:	2000      	movs	r0, #0
 80092f8:	f7f6 ffc6 	bl	8000288 <__aeabi_dsub>
 80092fc:	4652      	mov	r2, sl
 80092fe:	465b      	mov	r3, fp
 8009300:	f7f7 fbec 	bl	8000adc <__aeabi_dcmplt>
 8009304:	2800      	cmp	r0, #0
 8009306:	f040 80b5 	bne.w	8009474 <_dtoa_r+0x6c4>
 800930a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800930c:	429d      	cmp	r5, r3
 800930e:	d081      	beq.n	8009214 <_dtoa_r+0x464>
 8009310:	4b30      	ldr	r3, [pc, #192]	; (80093d4 <_dtoa_r+0x624>)
 8009312:	2200      	movs	r2, #0
 8009314:	4650      	mov	r0, sl
 8009316:	4659      	mov	r1, fp
 8009318:	f7f7 f96e 	bl	80005f8 <__aeabi_dmul>
 800931c:	4b2d      	ldr	r3, [pc, #180]	; (80093d4 <_dtoa_r+0x624>)
 800931e:	4682      	mov	sl, r0
 8009320:	468b      	mov	fp, r1
 8009322:	4640      	mov	r0, r8
 8009324:	4649      	mov	r1, r9
 8009326:	2200      	movs	r2, #0
 8009328:	f7f7 f966 	bl	80005f8 <__aeabi_dmul>
 800932c:	4680      	mov	r8, r0
 800932e:	4689      	mov	r9, r1
 8009330:	e7c6      	b.n	80092c0 <_dtoa_r+0x510>
 8009332:	4650      	mov	r0, sl
 8009334:	4659      	mov	r1, fp
 8009336:	f7f7 f95f 	bl	80005f8 <__aeabi_dmul>
 800933a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800933c:	9d01      	ldr	r5, [sp, #4]
 800933e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009340:	4682      	mov	sl, r0
 8009342:	468b      	mov	fp, r1
 8009344:	4649      	mov	r1, r9
 8009346:	4640      	mov	r0, r8
 8009348:	f7f7 fc06 	bl	8000b58 <__aeabi_d2iz>
 800934c:	4606      	mov	r6, r0
 800934e:	f7f7 f8e9 	bl	8000524 <__aeabi_i2d>
 8009352:	3630      	adds	r6, #48	; 0x30
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	4640      	mov	r0, r8
 800935a:	4649      	mov	r1, r9
 800935c:	f7f6 ff94 	bl	8000288 <__aeabi_dsub>
 8009360:	f805 6b01 	strb.w	r6, [r5], #1
 8009364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009366:	429d      	cmp	r5, r3
 8009368:	4680      	mov	r8, r0
 800936a:	4689      	mov	r9, r1
 800936c:	f04f 0200 	mov.w	r2, #0
 8009370:	d124      	bne.n	80093bc <_dtoa_r+0x60c>
 8009372:	4b1b      	ldr	r3, [pc, #108]	; (80093e0 <_dtoa_r+0x630>)
 8009374:	4650      	mov	r0, sl
 8009376:	4659      	mov	r1, fp
 8009378:	f7f6 ff88 	bl	800028c <__adddf3>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4640      	mov	r0, r8
 8009382:	4649      	mov	r1, r9
 8009384:	f7f7 fbc8 	bl	8000b18 <__aeabi_dcmpgt>
 8009388:	2800      	cmp	r0, #0
 800938a:	d173      	bne.n	8009474 <_dtoa_r+0x6c4>
 800938c:	4652      	mov	r2, sl
 800938e:	465b      	mov	r3, fp
 8009390:	4913      	ldr	r1, [pc, #76]	; (80093e0 <_dtoa_r+0x630>)
 8009392:	2000      	movs	r0, #0
 8009394:	f7f6 ff78 	bl	8000288 <__aeabi_dsub>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4640      	mov	r0, r8
 800939e:	4649      	mov	r1, r9
 80093a0:	f7f7 fb9c 	bl	8000adc <__aeabi_dcmplt>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	f43f af35 	beq.w	8009214 <_dtoa_r+0x464>
 80093aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80093ac:	1e6b      	subs	r3, r5, #1
 80093ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80093b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093b4:	2b30      	cmp	r3, #48	; 0x30
 80093b6:	d0f8      	beq.n	80093aa <_dtoa_r+0x5fa>
 80093b8:	9700      	str	r7, [sp, #0]
 80093ba:	e049      	b.n	8009450 <_dtoa_r+0x6a0>
 80093bc:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <_dtoa_r+0x624>)
 80093be:	f7f7 f91b 	bl	80005f8 <__aeabi_dmul>
 80093c2:	4680      	mov	r8, r0
 80093c4:	4689      	mov	r9, r1
 80093c6:	e7bd      	b.n	8009344 <_dtoa_r+0x594>
 80093c8:	0800c078 	.word	0x0800c078
 80093cc:	0800c050 	.word	0x0800c050
 80093d0:	3ff00000 	.word	0x3ff00000
 80093d4:	40240000 	.word	0x40240000
 80093d8:	401c0000 	.word	0x401c0000
 80093dc:	40140000 	.word	0x40140000
 80093e0:	3fe00000 	.word	0x3fe00000
 80093e4:	9d01      	ldr	r5, [sp, #4]
 80093e6:	4656      	mov	r6, sl
 80093e8:	465f      	mov	r7, fp
 80093ea:	4642      	mov	r2, r8
 80093ec:	464b      	mov	r3, r9
 80093ee:	4630      	mov	r0, r6
 80093f0:	4639      	mov	r1, r7
 80093f2:	f7f7 fa2b 	bl	800084c <__aeabi_ddiv>
 80093f6:	f7f7 fbaf 	bl	8000b58 <__aeabi_d2iz>
 80093fa:	4682      	mov	sl, r0
 80093fc:	f7f7 f892 	bl	8000524 <__aeabi_i2d>
 8009400:	4642      	mov	r2, r8
 8009402:	464b      	mov	r3, r9
 8009404:	f7f7 f8f8 	bl	80005f8 <__aeabi_dmul>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	4630      	mov	r0, r6
 800940e:	4639      	mov	r1, r7
 8009410:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009414:	f7f6 ff38 	bl	8000288 <__aeabi_dsub>
 8009418:	f805 6b01 	strb.w	r6, [r5], #1
 800941c:	9e01      	ldr	r6, [sp, #4]
 800941e:	9f03      	ldr	r7, [sp, #12]
 8009420:	1bae      	subs	r6, r5, r6
 8009422:	42b7      	cmp	r7, r6
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	d135      	bne.n	8009496 <_dtoa_r+0x6e6>
 800942a:	f7f6 ff2f 	bl	800028c <__adddf3>
 800942e:	4642      	mov	r2, r8
 8009430:	464b      	mov	r3, r9
 8009432:	4606      	mov	r6, r0
 8009434:	460f      	mov	r7, r1
 8009436:	f7f7 fb6f 	bl	8000b18 <__aeabi_dcmpgt>
 800943a:	b9d0      	cbnz	r0, 8009472 <_dtoa_r+0x6c2>
 800943c:	4642      	mov	r2, r8
 800943e:	464b      	mov	r3, r9
 8009440:	4630      	mov	r0, r6
 8009442:	4639      	mov	r1, r7
 8009444:	f7f7 fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8009448:	b110      	cbz	r0, 8009450 <_dtoa_r+0x6a0>
 800944a:	f01a 0f01 	tst.w	sl, #1
 800944e:	d110      	bne.n	8009472 <_dtoa_r+0x6c2>
 8009450:	4620      	mov	r0, r4
 8009452:	ee18 1a10 	vmov	r1, s16
 8009456:	f000 fe75 	bl	800a144 <_Bfree>
 800945a:	2300      	movs	r3, #0
 800945c:	9800      	ldr	r0, [sp, #0]
 800945e:	702b      	strb	r3, [r5, #0]
 8009460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009462:	3001      	adds	r0, #1
 8009464:	6018      	str	r0, [r3, #0]
 8009466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009468:	2b00      	cmp	r3, #0
 800946a:	f43f acf1 	beq.w	8008e50 <_dtoa_r+0xa0>
 800946e:	601d      	str	r5, [r3, #0]
 8009470:	e4ee      	b.n	8008e50 <_dtoa_r+0xa0>
 8009472:	9f00      	ldr	r7, [sp, #0]
 8009474:	462b      	mov	r3, r5
 8009476:	461d      	mov	r5, r3
 8009478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800947c:	2a39      	cmp	r2, #57	; 0x39
 800947e:	d106      	bne.n	800948e <_dtoa_r+0x6de>
 8009480:	9a01      	ldr	r2, [sp, #4]
 8009482:	429a      	cmp	r2, r3
 8009484:	d1f7      	bne.n	8009476 <_dtoa_r+0x6c6>
 8009486:	9901      	ldr	r1, [sp, #4]
 8009488:	2230      	movs	r2, #48	; 0x30
 800948a:	3701      	adds	r7, #1
 800948c:	700a      	strb	r2, [r1, #0]
 800948e:	781a      	ldrb	r2, [r3, #0]
 8009490:	3201      	adds	r2, #1
 8009492:	701a      	strb	r2, [r3, #0]
 8009494:	e790      	b.n	80093b8 <_dtoa_r+0x608>
 8009496:	4ba6      	ldr	r3, [pc, #664]	; (8009730 <_dtoa_r+0x980>)
 8009498:	2200      	movs	r2, #0
 800949a:	f7f7 f8ad 	bl	80005f8 <__aeabi_dmul>
 800949e:	2200      	movs	r2, #0
 80094a0:	2300      	movs	r3, #0
 80094a2:	4606      	mov	r6, r0
 80094a4:	460f      	mov	r7, r1
 80094a6:	f7f7 fb0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d09d      	beq.n	80093ea <_dtoa_r+0x63a>
 80094ae:	e7cf      	b.n	8009450 <_dtoa_r+0x6a0>
 80094b0:	9a08      	ldr	r2, [sp, #32]
 80094b2:	2a00      	cmp	r2, #0
 80094b4:	f000 80d7 	beq.w	8009666 <_dtoa_r+0x8b6>
 80094b8:	9a06      	ldr	r2, [sp, #24]
 80094ba:	2a01      	cmp	r2, #1
 80094bc:	f300 80ba 	bgt.w	8009634 <_dtoa_r+0x884>
 80094c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094c2:	2a00      	cmp	r2, #0
 80094c4:	f000 80b2 	beq.w	800962c <_dtoa_r+0x87c>
 80094c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80094cc:	9e07      	ldr	r6, [sp, #28]
 80094ce:	9d04      	ldr	r5, [sp, #16]
 80094d0:	9a04      	ldr	r2, [sp, #16]
 80094d2:	441a      	add	r2, r3
 80094d4:	9204      	str	r2, [sp, #16]
 80094d6:	9a05      	ldr	r2, [sp, #20]
 80094d8:	2101      	movs	r1, #1
 80094da:	441a      	add	r2, r3
 80094dc:	4620      	mov	r0, r4
 80094de:	9205      	str	r2, [sp, #20]
 80094e0:	f000 ff32 	bl	800a348 <__i2b>
 80094e4:	4607      	mov	r7, r0
 80094e6:	2d00      	cmp	r5, #0
 80094e8:	dd0c      	ble.n	8009504 <_dtoa_r+0x754>
 80094ea:	9b05      	ldr	r3, [sp, #20]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	dd09      	ble.n	8009504 <_dtoa_r+0x754>
 80094f0:	42ab      	cmp	r3, r5
 80094f2:	9a04      	ldr	r2, [sp, #16]
 80094f4:	bfa8      	it	ge
 80094f6:	462b      	movge	r3, r5
 80094f8:	1ad2      	subs	r2, r2, r3
 80094fa:	9204      	str	r2, [sp, #16]
 80094fc:	9a05      	ldr	r2, [sp, #20]
 80094fe:	1aed      	subs	r5, r5, r3
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	9305      	str	r3, [sp, #20]
 8009504:	9b07      	ldr	r3, [sp, #28]
 8009506:	b31b      	cbz	r3, 8009550 <_dtoa_r+0x7a0>
 8009508:	9b08      	ldr	r3, [sp, #32]
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 80af 	beq.w	800966e <_dtoa_r+0x8be>
 8009510:	2e00      	cmp	r6, #0
 8009512:	dd13      	ble.n	800953c <_dtoa_r+0x78c>
 8009514:	4639      	mov	r1, r7
 8009516:	4632      	mov	r2, r6
 8009518:	4620      	mov	r0, r4
 800951a:	f000 ffd5 	bl	800a4c8 <__pow5mult>
 800951e:	ee18 2a10 	vmov	r2, s16
 8009522:	4601      	mov	r1, r0
 8009524:	4607      	mov	r7, r0
 8009526:	4620      	mov	r0, r4
 8009528:	f000 ff24 	bl	800a374 <__multiply>
 800952c:	ee18 1a10 	vmov	r1, s16
 8009530:	4680      	mov	r8, r0
 8009532:	4620      	mov	r0, r4
 8009534:	f000 fe06 	bl	800a144 <_Bfree>
 8009538:	ee08 8a10 	vmov	s16, r8
 800953c:	9b07      	ldr	r3, [sp, #28]
 800953e:	1b9a      	subs	r2, r3, r6
 8009540:	d006      	beq.n	8009550 <_dtoa_r+0x7a0>
 8009542:	ee18 1a10 	vmov	r1, s16
 8009546:	4620      	mov	r0, r4
 8009548:	f000 ffbe 	bl	800a4c8 <__pow5mult>
 800954c:	ee08 0a10 	vmov	s16, r0
 8009550:	2101      	movs	r1, #1
 8009552:	4620      	mov	r0, r4
 8009554:	f000 fef8 	bl	800a348 <__i2b>
 8009558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800955a:	2b00      	cmp	r3, #0
 800955c:	4606      	mov	r6, r0
 800955e:	f340 8088 	ble.w	8009672 <_dtoa_r+0x8c2>
 8009562:	461a      	mov	r2, r3
 8009564:	4601      	mov	r1, r0
 8009566:	4620      	mov	r0, r4
 8009568:	f000 ffae 	bl	800a4c8 <__pow5mult>
 800956c:	9b06      	ldr	r3, [sp, #24]
 800956e:	2b01      	cmp	r3, #1
 8009570:	4606      	mov	r6, r0
 8009572:	f340 8081 	ble.w	8009678 <_dtoa_r+0x8c8>
 8009576:	f04f 0800 	mov.w	r8, #0
 800957a:	6933      	ldr	r3, [r6, #16]
 800957c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009580:	6918      	ldr	r0, [r3, #16]
 8009582:	f000 fe91 	bl	800a2a8 <__hi0bits>
 8009586:	f1c0 0020 	rsb	r0, r0, #32
 800958a:	9b05      	ldr	r3, [sp, #20]
 800958c:	4418      	add	r0, r3
 800958e:	f010 001f 	ands.w	r0, r0, #31
 8009592:	f000 8092 	beq.w	80096ba <_dtoa_r+0x90a>
 8009596:	f1c0 0320 	rsb	r3, r0, #32
 800959a:	2b04      	cmp	r3, #4
 800959c:	f340 808a 	ble.w	80096b4 <_dtoa_r+0x904>
 80095a0:	f1c0 001c 	rsb	r0, r0, #28
 80095a4:	9b04      	ldr	r3, [sp, #16]
 80095a6:	4403      	add	r3, r0
 80095a8:	9304      	str	r3, [sp, #16]
 80095aa:	9b05      	ldr	r3, [sp, #20]
 80095ac:	4403      	add	r3, r0
 80095ae:	4405      	add	r5, r0
 80095b0:	9305      	str	r3, [sp, #20]
 80095b2:	9b04      	ldr	r3, [sp, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	dd07      	ble.n	80095c8 <_dtoa_r+0x818>
 80095b8:	ee18 1a10 	vmov	r1, s16
 80095bc:	461a      	mov	r2, r3
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 ffdc 	bl	800a57c <__lshift>
 80095c4:	ee08 0a10 	vmov	s16, r0
 80095c8:	9b05      	ldr	r3, [sp, #20]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	dd05      	ble.n	80095da <_dtoa_r+0x82a>
 80095ce:	4631      	mov	r1, r6
 80095d0:	461a      	mov	r2, r3
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 ffd2 	bl	800a57c <__lshift>
 80095d8:	4606      	mov	r6, r0
 80095da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d06e      	beq.n	80096be <_dtoa_r+0x90e>
 80095e0:	ee18 0a10 	vmov	r0, s16
 80095e4:	4631      	mov	r1, r6
 80095e6:	f001 f839 	bl	800a65c <__mcmp>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	da67      	bge.n	80096be <_dtoa_r+0x90e>
 80095ee:	9b00      	ldr	r3, [sp, #0]
 80095f0:	3b01      	subs	r3, #1
 80095f2:	ee18 1a10 	vmov	r1, s16
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	220a      	movs	r2, #10
 80095fa:	2300      	movs	r3, #0
 80095fc:	4620      	mov	r0, r4
 80095fe:	f000 fdc3 	bl	800a188 <__multadd>
 8009602:	9b08      	ldr	r3, [sp, #32]
 8009604:	ee08 0a10 	vmov	s16, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 81b1 	beq.w	8009970 <_dtoa_r+0xbc0>
 800960e:	2300      	movs	r3, #0
 8009610:	4639      	mov	r1, r7
 8009612:	220a      	movs	r2, #10
 8009614:	4620      	mov	r0, r4
 8009616:	f000 fdb7 	bl	800a188 <__multadd>
 800961a:	9b02      	ldr	r3, [sp, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	4607      	mov	r7, r0
 8009620:	f300 808e 	bgt.w	8009740 <_dtoa_r+0x990>
 8009624:	9b06      	ldr	r3, [sp, #24]
 8009626:	2b02      	cmp	r3, #2
 8009628:	dc51      	bgt.n	80096ce <_dtoa_r+0x91e>
 800962a:	e089      	b.n	8009740 <_dtoa_r+0x990>
 800962c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800962e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009632:	e74b      	b.n	80094cc <_dtoa_r+0x71c>
 8009634:	9b03      	ldr	r3, [sp, #12]
 8009636:	1e5e      	subs	r6, r3, #1
 8009638:	9b07      	ldr	r3, [sp, #28]
 800963a:	42b3      	cmp	r3, r6
 800963c:	bfbf      	itttt	lt
 800963e:	9b07      	ldrlt	r3, [sp, #28]
 8009640:	9607      	strlt	r6, [sp, #28]
 8009642:	1af2      	sublt	r2, r6, r3
 8009644:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009646:	bfb6      	itet	lt
 8009648:	189b      	addlt	r3, r3, r2
 800964a:	1b9e      	subge	r6, r3, r6
 800964c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800964e:	9b03      	ldr	r3, [sp, #12]
 8009650:	bfb8      	it	lt
 8009652:	2600      	movlt	r6, #0
 8009654:	2b00      	cmp	r3, #0
 8009656:	bfb7      	itett	lt
 8009658:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800965c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009660:	1a9d      	sublt	r5, r3, r2
 8009662:	2300      	movlt	r3, #0
 8009664:	e734      	b.n	80094d0 <_dtoa_r+0x720>
 8009666:	9e07      	ldr	r6, [sp, #28]
 8009668:	9d04      	ldr	r5, [sp, #16]
 800966a:	9f08      	ldr	r7, [sp, #32]
 800966c:	e73b      	b.n	80094e6 <_dtoa_r+0x736>
 800966e:	9a07      	ldr	r2, [sp, #28]
 8009670:	e767      	b.n	8009542 <_dtoa_r+0x792>
 8009672:	9b06      	ldr	r3, [sp, #24]
 8009674:	2b01      	cmp	r3, #1
 8009676:	dc18      	bgt.n	80096aa <_dtoa_r+0x8fa>
 8009678:	f1ba 0f00 	cmp.w	sl, #0
 800967c:	d115      	bne.n	80096aa <_dtoa_r+0x8fa>
 800967e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009682:	b993      	cbnz	r3, 80096aa <_dtoa_r+0x8fa>
 8009684:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009688:	0d1b      	lsrs	r3, r3, #20
 800968a:	051b      	lsls	r3, r3, #20
 800968c:	b183      	cbz	r3, 80096b0 <_dtoa_r+0x900>
 800968e:	9b04      	ldr	r3, [sp, #16]
 8009690:	3301      	adds	r3, #1
 8009692:	9304      	str	r3, [sp, #16]
 8009694:	9b05      	ldr	r3, [sp, #20]
 8009696:	3301      	adds	r3, #1
 8009698:	9305      	str	r3, [sp, #20]
 800969a:	f04f 0801 	mov.w	r8, #1
 800969e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f47f af6a 	bne.w	800957a <_dtoa_r+0x7ca>
 80096a6:	2001      	movs	r0, #1
 80096a8:	e76f      	b.n	800958a <_dtoa_r+0x7da>
 80096aa:	f04f 0800 	mov.w	r8, #0
 80096ae:	e7f6      	b.n	800969e <_dtoa_r+0x8ee>
 80096b0:	4698      	mov	r8, r3
 80096b2:	e7f4      	b.n	800969e <_dtoa_r+0x8ee>
 80096b4:	f43f af7d 	beq.w	80095b2 <_dtoa_r+0x802>
 80096b8:	4618      	mov	r0, r3
 80096ba:	301c      	adds	r0, #28
 80096bc:	e772      	b.n	80095a4 <_dtoa_r+0x7f4>
 80096be:	9b03      	ldr	r3, [sp, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dc37      	bgt.n	8009734 <_dtoa_r+0x984>
 80096c4:	9b06      	ldr	r3, [sp, #24]
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	dd34      	ble.n	8009734 <_dtoa_r+0x984>
 80096ca:	9b03      	ldr	r3, [sp, #12]
 80096cc:	9302      	str	r3, [sp, #8]
 80096ce:	9b02      	ldr	r3, [sp, #8]
 80096d0:	b96b      	cbnz	r3, 80096ee <_dtoa_r+0x93e>
 80096d2:	4631      	mov	r1, r6
 80096d4:	2205      	movs	r2, #5
 80096d6:	4620      	mov	r0, r4
 80096d8:	f000 fd56 	bl	800a188 <__multadd>
 80096dc:	4601      	mov	r1, r0
 80096de:	4606      	mov	r6, r0
 80096e0:	ee18 0a10 	vmov	r0, s16
 80096e4:	f000 ffba 	bl	800a65c <__mcmp>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	f73f adbb 	bgt.w	8009264 <_dtoa_r+0x4b4>
 80096ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f0:	9d01      	ldr	r5, [sp, #4]
 80096f2:	43db      	mvns	r3, r3
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	f04f 0800 	mov.w	r8, #0
 80096fa:	4631      	mov	r1, r6
 80096fc:	4620      	mov	r0, r4
 80096fe:	f000 fd21 	bl	800a144 <_Bfree>
 8009702:	2f00      	cmp	r7, #0
 8009704:	f43f aea4 	beq.w	8009450 <_dtoa_r+0x6a0>
 8009708:	f1b8 0f00 	cmp.w	r8, #0
 800970c:	d005      	beq.n	800971a <_dtoa_r+0x96a>
 800970e:	45b8      	cmp	r8, r7
 8009710:	d003      	beq.n	800971a <_dtoa_r+0x96a>
 8009712:	4641      	mov	r1, r8
 8009714:	4620      	mov	r0, r4
 8009716:	f000 fd15 	bl	800a144 <_Bfree>
 800971a:	4639      	mov	r1, r7
 800971c:	4620      	mov	r0, r4
 800971e:	f000 fd11 	bl	800a144 <_Bfree>
 8009722:	e695      	b.n	8009450 <_dtoa_r+0x6a0>
 8009724:	2600      	movs	r6, #0
 8009726:	4637      	mov	r7, r6
 8009728:	e7e1      	b.n	80096ee <_dtoa_r+0x93e>
 800972a:	9700      	str	r7, [sp, #0]
 800972c:	4637      	mov	r7, r6
 800972e:	e599      	b.n	8009264 <_dtoa_r+0x4b4>
 8009730:	40240000 	.word	0x40240000
 8009734:	9b08      	ldr	r3, [sp, #32]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 80ca 	beq.w	80098d0 <_dtoa_r+0xb20>
 800973c:	9b03      	ldr	r3, [sp, #12]
 800973e:	9302      	str	r3, [sp, #8]
 8009740:	2d00      	cmp	r5, #0
 8009742:	dd05      	ble.n	8009750 <_dtoa_r+0x9a0>
 8009744:	4639      	mov	r1, r7
 8009746:	462a      	mov	r2, r5
 8009748:	4620      	mov	r0, r4
 800974a:	f000 ff17 	bl	800a57c <__lshift>
 800974e:	4607      	mov	r7, r0
 8009750:	f1b8 0f00 	cmp.w	r8, #0
 8009754:	d05b      	beq.n	800980e <_dtoa_r+0xa5e>
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	4620      	mov	r0, r4
 800975a:	f000 fcb3 	bl	800a0c4 <_Balloc>
 800975e:	4605      	mov	r5, r0
 8009760:	b928      	cbnz	r0, 800976e <_dtoa_r+0x9be>
 8009762:	4b87      	ldr	r3, [pc, #540]	; (8009980 <_dtoa_r+0xbd0>)
 8009764:	4602      	mov	r2, r0
 8009766:	f240 21ea 	movw	r1, #746	; 0x2ea
 800976a:	f7ff bb3b 	b.w	8008de4 <_dtoa_r+0x34>
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	3202      	adds	r2, #2
 8009772:	0092      	lsls	r2, r2, #2
 8009774:	f107 010c 	add.w	r1, r7, #12
 8009778:	300c      	adds	r0, #12
 800977a:	f000 fc95 	bl	800a0a8 <memcpy>
 800977e:	2201      	movs	r2, #1
 8009780:	4629      	mov	r1, r5
 8009782:	4620      	mov	r0, r4
 8009784:	f000 fefa 	bl	800a57c <__lshift>
 8009788:	9b01      	ldr	r3, [sp, #4]
 800978a:	f103 0901 	add.w	r9, r3, #1
 800978e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009792:	4413      	add	r3, r2
 8009794:	9305      	str	r3, [sp, #20]
 8009796:	f00a 0301 	and.w	r3, sl, #1
 800979a:	46b8      	mov	r8, r7
 800979c:	9304      	str	r3, [sp, #16]
 800979e:	4607      	mov	r7, r0
 80097a0:	4631      	mov	r1, r6
 80097a2:	ee18 0a10 	vmov	r0, s16
 80097a6:	f7ff fa77 	bl	8008c98 <quorem>
 80097aa:	4641      	mov	r1, r8
 80097ac:	9002      	str	r0, [sp, #8]
 80097ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80097b2:	ee18 0a10 	vmov	r0, s16
 80097b6:	f000 ff51 	bl	800a65c <__mcmp>
 80097ba:	463a      	mov	r2, r7
 80097bc:	9003      	str	r0, [sp, #12]
 80097be:	4631      	mov	r1, r6
 80097c0:	4620      	mov	r0, r4
 80097c2:	f000 ff67 	bl	800a694 <__mdiff>
 80097c6:	68c2      	ldr	r2, [r0, #12]
 80097c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80097cc:	4605      	mov	r5, r0
 80097ce:	bb02      	cbnz	r2, 8009812 <_dtoa_r+0xa62>
 80097d0:	4601      	mov	r1, r0
 80097d2:	ee18 0a10 	vmov	r0, s16
 80097d6:	f000 ff41 	bl	800a65c <__mcmp>
 80097da:	4602      	mov	r2, r0
 80097dc:	4629      	mov	r1, r5
 80097de:	4620      	mov	r0, r4
 80097e0:	9207      	str	r2, [sp, #28]
 80097e2:	f000 fcaf 	bl	800a144 <_Bfree>
 80097e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80097ea:	ea43 0102 	orr.w	r1, r3, r2
 80097ee:	9b04      	ldr	r3, [sp, #16]
 80097f0:	430b      	orrs	r3, r1
 80097f2:	464d      	mov	r5, r9
 80097f4:	d10f      	bne.n	8009816 <_dtoa_r+0xa66>
 80097f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80097fa:	d02a      	beq.n	8009852 <_dtoa_r+0xaa2>
 80097fc:	9b03      	ldr	r3, [sp, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dd02      	ble.n	8009808 <_dtoa_r+0xa58>
 8009802:	9b02      	ldr	r3, [sp, #8]
 8009804:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009808:	f88b a000 	strb.w	sl, [fp]
 800980c:	e775      	b.n	80096fa <_dtoa_r+0x94a>
 800980e:	4638      	mov	r0, r7
 8009810:	e7ba      	b.n	8009788 <_dtoa_r+0x9d8>
 8009812:	2201      	movs	r2, #1
 8009814:	e7e2      	b.n	80097dc <_dtoa_r+0xa2c>
 8009816:	9b03      	ldr	r3, [sp, #12]
 8009818:	2b00      	cmp	r3, #0
 800981a:	db04      	blt.n	8009826 <_dtoa_r+0xa76>
 800981c:	9906      	ldr	r1, [sp, #24]
 800981e:	430b      	orrs	r3, r1
 8009820:	9904      	ldr	r1, [sp, #16]
 8009822:	430b      	orrs	r3, r1
 8009824:	d122      	bne.n	800986c <_dtoa_r+0xabc>
 8009826:	2a00      	cmp	r2, #0
 8009828:	ddee      	ble.n	8009808 <_dtoa_r+0xa58>
 800982a:	ee18 1a10 	vmov	r1, s16
 800982e:	2201      	movs	r2, #1
 8009830:	4620      	mov	r0, r4
 8009832:	f000 fea3 	bl	800a57c <__lshift>
 8009836:	4631      	mov	r1, r6
 8009838:	ee08 0a10 	vmov	s16, r0
 800983c:	f000 ff0e 	bl	800a65c <__mcmp>
 8009840:	2800      	cmp	r0, #0
 8009842:	dc03      	bgt.n	800984c <_dtoa_r+0xa9c>
 8009844:	d1e0      	bne.n	8009808 <_dtoa_r+0xa58>
 8009846:	f01a 0f01 	tst.w	sl, #1
 800984a:	d0dd      	beq.n	8009808 <_dtoa_r+0xa58>
 800984c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009850:	d1d7      	bne.n	8009802 <_dtoa_r+0xa52>
 8009852:	2339      	movs	r3, #57	; 0x39
 8009854:	f88b 3000 	strb.w	r3, [fp]
 8009858:	462b      	mov	r3, r5
 800985a:	461d      	mov	r5, r3
 800985c:	3b01      	subs	r3, #1
 800985e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009862:	2a39      	cmp	r2, #57	; 0x39
 8009864:	d071      	beq.n	800994a <_dtoa_r+0xb9a>
 8009866:	3201      	adds	r2, #1
 8009868:	701a      	strb	r2, [r3, #0]
 800986a:	e746      	b.n	80096fa <_dtoa_r+0x94a>
 800986c:	2a00      	cmp	r2, #0
 800986e:	dd07      	ble.n	8009880 <_dtoa_r+0xad0>
 8009870:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009874:	d0ed      	beq.n	8009852 <_dtoa_r+0xaa2>
 8009876:	f10a 0301 	add.w	r3, sl, #1
 800987a:	f88b 3000 	strb.w	r3, [fp]
 800987e:	e73c      	b.n	80096fa <_dtoa_r+0x94a>
 8009880:	9b05      	ldr	r3, [sp, #20]
 8009882:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009886:	4599      	cmp	r9, r3
 8009888:	d047      	beq.n	800991a <_dtoa_r+0xb6a>
 800988a:	ee18 1a10 	vmov	r1, s16
 800988e:	2300      	movs	r3, #0
 8009890:	220a      	movs	r2, #10
 8009892:	4620      	mov	r0, r4
 8009894:	f000 fc78 	bl	800a188 <__multadd>
 8009898:	45b8      	cmp	r8, r7
 800989a:	ee08 0a10 	vmov	s16, r0
 800989e:	f04f 0300 	mov.w	r3, #0
 80098a2:	f04f 020a 	mov.w	r2, #10
 80098a6:	4641      	mov	r1, r8
 80098a8:	4620      	mov	r0, r4
 80098aa:	d106      	bne.n	80098ba <_dtoa_r+0xb0a>
 80098ac:	f000 fc6c 	bl	800a188 <__multadd>
 80098b0:	4680      	mov	r8, r0
 80098b2:	4607      	mov	r7, r0
 80098b4:	f109 0901 	add.w	r9, r9, #1
 80098b8:	e772      	b.n	80097a0 <_dtoa_r+0x9f0>
 80098ba:	f000 fc65 	bl	800a188 <__multadd>
 80098be:	4639      	mov	r1, r7
 80098c0:	4680      	mov	r8, r0
 80098c2:	2300      	movs	r3, #0
 80098c4:	220a      	movs	r2, #10
 80098c6:	4620      	mov	r0, r4
 80098c8:	f000 fc5e 	bl	800a188 <__multadd>
 80098cc:	4607      	mov	r7, r0
 80098ce:	e7f1      	b.n	80098b4 <_dtoa_r+0xb04>
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	9302      	str	r3, [sp, #8]
 80098d4:	9d01      	ldr	r5, [sp, #4]
 80098d6:	ee18 0a10 	vmov	r0, s16
 80098da:	4631      	mov	r1, r6
 80098dc:	f7ff f9dc 	bl	8008c98 <quorem>
 80098e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80098e4:	9b01      	ldr	r3, [sp, #4]
 80098e6:	f805 ab01 	strb.w	sl, [r5], #1
 80098ea:	1aea      	subs	r2, r5, r3
 80098ec:	9b02      	ldr	r3, [sp, #8]
 80098ee:	4293      	cmp	r3, r2
 80098f0:	dd09      	ble.n	8009906 <_dtoa_r+0xb56>
 80098f2:	ee18 1a10 	vmov	r1, s16
 80098f6:	2300      	movs	r3, #0
 80098f8:	220a      	movs	r2, #10
 80098fa:	4620      	mov	r0, r4
 80098fc:	f000 fc44 	bl	800a188 <__multadd>
 8009900:	ee08 0a10 	vmov	s16, r0
 8009904:	e7e7      	b.n	80098d6 <_dtoa_r+0xb26>
 8009906:	9b02      	ldr	r3, [sp, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	bfc8      	it	gt
 800990c:	461d      	movgt	r5, r3
 800990e:	9b01      	ldr	r3, [sp, #4]
 8009910:	bfd8      	it	le
 8009912:	2501      	movle	r5, #1
 8009914:	441d      	add	r5, r3
 8009916:	f04f 0800 	mov.w	r8, #0
 800991a:	ee18 1a10 	vmov	r1, s16
 800991e:	2201      	movs	r2, #1
 8009920:	4620      	mov	r0, r4
 8009922:	f000 fe2b 	bl	800a57c <__lshift>
 8009926:	4631      	mov	r1, r6
 8009928:	ee08 0a10 	vmov	s16, r0
 800992c:	f000 fe96 	bl	800a65c <__mcmp>
 8009930:	2800      	cmp	r0, #0
 8009932:	dc91      	bgt.n	8009858 <_dtoa_r+0xaa8>
 8009934:	d102      	bne.n	800993c <_dtoa_r+0xb8c>
 8009936:	f01a 0f01 	tst.w	sl, #1
 800993a:	d18d      	bne.n	8009858 <_dtoa_r+0xaa8>
 800993c:	462b      	mov	r3, r5
 800993e:	461d      	mov	r5, r3
 8009940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009944:	2a30      	cmp	r2, #48	; 0x30
 8009946:	d0fa      	beq.n	800993e <_dtoa_r+0xb8e>
 8009948:	e6d7      	b.n	80096fa <_dtoa_r+0x94a>
 800994a:	9a01      	ldr	r2, [sp, #4]
 800994c:	429a      	cmp	r2, r3
 800994e:	d184      	bne.n	800985a <_dtoa_r+0xaaa>
 8009950:	9b00      	ldr	r3, [sp, #0]
 8009952:	3301      	adds	r3, #1
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	2331      	movs	r3, #49	; 0x31
 8009958:	7013      	strb	r3, [r2, #0]
 800995a:	e6ce      	b.n	80096fa <_dtoa_r+0x94a>
 800995c:	4b09      	ldr	r3, [pc, #36]	; (8009984 <_dtoa_r+0xbd4>)
 800995e:	f7ff ba95 	b.w	8008e8c <_dtoa_r+0xdc>
 8009962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009964:	2b00      	cmp	r3, #0
 8009966:	f47f aa6e 	bne.w	8008e46 <_dtoa_r+0x96>
 800996a:	4b07      	ldr	r3, [pc, #28]	; (8009988 <_dtoa_r+0xbd8>)
 800996c:	f7ff ba8e 	b.w	8008e8c <_dtoa_r+0xdc>
 8009970:	9b02      	ldr	r3, [sp, #8]
 8009972:	2b00      	cmp	r3, #0
 8009974:	dcae      	bgt.n	80098d4 <_dtoa_r+0xb24>
 8009976:	9b06      	ldr	r3, [sp, #24]
 8009978:	2b02      	cmp	r3, #2
 800997a:	f73f aea8 	bgt.w	80096ce <_dtoa_r+0x91e>
 800997e:	e7a9      	b.n	80098d4 <_dtoa_r+0xb24>
 8009980:	0800bf68 	.word	0x0800bf68
 8009984:	0800bd6c 	.word	0x0800bd6c
 8009988:	0800bee9 	.word	0x0800bee9

0800998c <rshift>:
 800998c:	6903      	ldr	r3, [r0, #16]
 800998e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009992:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009996:	ea4f 1261 	mov.w	r2, r1, asr #5
 800999a:	f100 0414 	add.w	r4, r0, #20
 800999e:	dd45      	ble.n	8009a2c <rshift+0xa0>
 80099a0:	f011 011f 	ands.w	r1, r1, #31
 80099a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80099a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80099ac:	d10c      	bne.n	80099c8 <rshift+0x3c>
 80099ae:	f100 0710 	add.w	r7, r0, #16
 80099b2:	4629      	mov	r1, r5
 80099b4:	42b1      	cmp	r1, r6
 80099b6:	d334      	bcc.n	8009a22 <rshift+0x96>
 80099b8:	1a9b      	subs	r3, r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	1eea      	subs	r2, r5, #3
 80099be:	4296      	cmp	r6, r2
 80099c0:	bf38      	it	cc
 80099c2:	2300      	movcc	r3, #0
 80099c4:	4423      	add	r3, r4
 80099c6:	e015      	b.n	80099f4 <rshift+0x68>
 80099c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80099cc:	f1c1 0820 	rsb	r8, r1, #32
 80099d0:	40cf      	lsrs	r7, r1
 80099d2:	f105 0e04 	add.w	lr, r5, #4
 80099d6:	46a1      	mov	r9, r4
 80099d8:	4576      	cmp	r6, lr
 80099da:	46f4      	mov	ip, lr
 80099dc:	d815      	bhi.n	8009a0a <rshift+0x7e>
 80099de:	1a9a      	subs	r2, r3, r2
 80099e0:	0092      	lsls	r2, r2, #2
 80099e2:	3a04      	subs	r2, #4
 80099e4:	3501      	adds	r5, #1
 80099e6:	42ae      	cmp	r6, r5
 80099e8:	bf38      	it	cc
 80099ea:	2200      	movcc	r2, #0
 80099ec:	18a3      	adds	r3, r4, r2
 80099ee:	50a7      	str	r7, [r4, r2]
 80099f0:	b107      	cbz	r7, 80099f4 <rshift+0x68>
 80099f2:	3304      	adds	r3, #4
 80099f4:	1b1a      	subs	r2, r3, r4
 80099f6:	42a3      	cmp	r3, r4
 80099f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80099fc:	bf08      	it	eq
 80099fe:	2300      	moveq	r3, #0
 8009a00:	6102      	str	r2, [r0, #16]
 8009a02:	bf08      	it	eq
 8009a04:	6143      	streq	r3, [r0, #20]
 8009a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a0a:	f8dc c000 	ldr.w	ip, [ip]
 8009a0e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a12:	ea4c 0707 	orr.w	r7, ip, r7
 8009a16:	f849 7b04 	str.w	r7, [r9], #4
 8009a1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a1e:	40cf      	lsrs	r7, r1
 8009a20:	e7da      	b.n	80099d8 <rshift+0x4c>
 8009a22:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a26:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a2a:	e7c3      	b.n	80099b4 <rshift+0x28>
 8009a2c:	4623      	mov	r3, r4
 8009a2e:	e7e1      	b.n	80099f4 <rshift+0x68>

08009a30 <__hexdig_fun>:
 8009a30:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009a34:	2b09      	cmp	r3, #9
 8009a36:	d802      	bhi.n	8009a3e <__hexdig_fun+0xe>
 8009a38:	3820      	subs	r0, #32
 8009a3a:	b2c0      	uxtb	r0, r0
 8009a3c:	4770      	bx	lr
 8009a3e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009a42:	2b05      	cmp	r3, #5
 8009a44:	d801      	bhi.n	8009a4a <__hexdig_fun+0x1a>
 8009a46:	3847      	subs	r0, #71	; 0x47
 8009a48:	e7f7      	b.n	8009a3a <__hexdig_fun+0xa>
 8009a4a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009a4e:	2b05      	cmp	r3, #5
 8009a50:	d801      	bhi.n	8009a56 <__hexdig_fun+0x26>
 8009a52:	3827      	subs	r0, #39	; 0x27
 8009a54:	e7f1      	b.n	8009a3a <__hexdig_fun+0xa>
 8009a56:	2000      	movs	r0, #0
 8009a58:	4770      	bx	lr
	...

08009a5c <__gethex>:
 8009a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a60:	ed2d 8b02 	vpush	{d8}
 8009a64:	b089      	sub	sp, #36	; 0x24
 8009a66:	ee08 0a10 	vmov	s16, r0
 8009a6a:	9304      	str	r3, [sp, #16]
 8009a6c:	4bb4      	ldr	r3, [pc, #720]	; (8009d40 <__gethex+0x2e4>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	9301      	str	r3, [sp, #4]
 8009a72:	4618      	mov	r0, r3
 8009a74:	468b      	mov	fp, r1
 8009a76:	4690      	mov	r8, r2
 8009a78:	f7f6 fbaa 	bl	80001d0 <strlen>
 8009a7c:	9b01      	ldr	r3, [sp, #4]
 8009a7e:	f8db 2000 	ldr.w	r2, [fp]
 8009a82:	4403      	add	r3, r0
 8009a84:	4682      	mov	sl, r0
 8009a86:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009a8a:	9305      	str	r3, [sp, #20]
 8009a8c:	1c93      	adds	r3, r2, #2
 8009a8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009a92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009a96:	32fe      	adds	r2, #254	; 0xfe
 8009a98:	18d1      	adds	r1, r2, r3
 8009a9a:	461f      	mov	r7, r3
 8009a9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009aa0:	9100      	str	r1, [sp, #0]
 8009aa2:	2830      	cmp	r0, #48	; 0x30
 8009aa4:	d0f8      	beq.n	8009a98 <__gethex+0x3c>
 8009aa6:	f7ff ffc3 	bl	8009a30 <__hexdig_fun>
 8009aaa:	4604      	mov	r4, r0
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d13a      	bne.n	8009b26 <__gethex+0xca>
 8009ab0:	9901      	ldr	r1, [sp, #4]
 8009ab2:	4652      	mov	r2, sl
 8009ab4:	4638      	mov	r0, r7
 8009ab6:	f001 fa33 	bl	800af20 <strncmp>
 8009aba:	4605      	mov	r5, r0
 8009abc:	2800      	cmp	r0, #0
 8009abe:	d168      	bne.n	8009b92 <__gethex+0x136>
 8009ac0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009ac4:	eb07 060a 	add.w	r6, r7, sl
 8009ac8:	f7ff ffb2 	bl	8009a30 <__hexdig_fun>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d062      	beq.n	8009b96 <__gethex+0x13a>
 8009ad0:	4633      	mov	r3, r6
 8009ad2:	7818      	ldrb	r0, [r3, #0]
 8009ad4:	2830      	cmp	r0, #48	; 0x30
 8009ad6:	461f      	mov	r7, r3
 8009ad8:	f103 0301 	add.w	r3, r3, #1
 8009adc:	d0f9      	beq.n	8009ad2 <__gethex+0x76>
 8009ade:	f7ff ffa7 	bl	8009a30 <__hexdig_fun>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	fab0 f480 	clz	r4, r0
 8009ae8:	0964      	lsrs	r4, r4, #5
 8009aea:	4635      	mov	r5, r6
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	463a      	mov	r2, r7
 8009af0:	4616      	mov	r6, r2
 8009af2:	3201      	adds	r2, #1
 8009af4:	7830      	ldrb	r0, [r6, #0]
 8009af6:	f7ff ff9b 	bl	8009a30 <__hexdig_fun>
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d1f8      	bne.n	8009af0 <__gethex+0x94>
 8009afe:	9901      	ldr	r1, [sp, #4]
 8009b00:	4652      	mov	r2, sl
 8009b02:	4630      	mov	r0, r6
 8009b04:	f001 fa0c 	bl	800af20 <strncmp>
 8009b08:	b980      	cbnz	r0, 8009b2c <__gethex+0xd0>
 8009b0a:	b94d      	cbnz	r5, 8009b20 <__gethex+0xc4>
 8009b0c:	eb06 050a 	add.w	r5, r6, sl
 8009b10:	462a      	mov	r2, r5
 8009b12:	4616      	mov	r6, r2
 8009b14:	3201      	adds	r2, #1
 8009b16:	7830      	ldrb	r0, [r6, #0]
 8009b18:	f7ff ff8a 	bl	8009a30 <__hexdig_fun>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d1f8      	bne.n	8009b12 <__gethex+0xb6>
 8009b20:	1bad      	subs	r5, r5, r6
 8009b22:	00ad      	lsls	r5, r5, #2
 8009b24:	e004      	b.n	8009b30 <__gethex+0xd4>
 8009b26:	2400      	movs	r4, #0
 8009b28:	4625      	mov	r5, r4
 8009b2a:	e7e0      	b.n	8009aee <__gethex+0x92>
 8009b2c:	2d00      	cmp	r5, #0
 8009b2e:	d1f7      	bne.n	8009b20 <__gethex+0xc4>
 8009b30:	7833      	ldrb	r3, [r6, #0]
 8009b32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b36:	2b50      	cmp	r3, #80	; 0x50
 8009b38:	d13b      	bne.n	8009bb2 <__gethex+0x156>
 8009b3a:	7873      	ldrb	r3, [r6, #1]
 8009b3c:	2b2b      	cmp	r3, #43	; 0x2b
 8009b3e:	d02c      	beq.n	8009b9a <__gethex+0x13e>
 8009b40:	2b2d      	cmp	r3, #45	; 0x2d
 8009b42:	d02e      	beq.n	8009ba2 <__gethex+0x146>
 8009b44:	1c71      	adds	r1, r6, #1
 8009b46:	f04f 0900 	mov.w	r9, #0
 8009b4a:	7808      	ldrb	r0, [r1, #0]
 8009b4c:	f7ff ff70 	bl	8009a30 <__hexdig_fun>
 8009b50:	1e43      	subs	r3, r0, #1
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	2b18      	cmp	r3, #24
 8009b56:	d82c      	bhi.n	8009bb2 <__gethex+0x156>
 8009b58:	f1a0 0210 	sub.w	r2, r0, #16
 8009b5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b60:	f7ff ff66 	bl	8009a30 <__hexdig_fun>
 8009b64:	1e43      	subs	r3, r0, #1
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	2b18      	cmp	r3, #24
 8009b6a:	d91d      	bls.n	8009ba8 <__gethex+0x14c>
 8009b6c:	f1b9 0f00 	cmp.w	r9, #0
 8009b70:	d000      	beq.n	8009b74 <__gethex+0x118>
 8009b72:	4252      	negs	r2, r2
 8009b74:	4415      	add	r5, r2
 8009b76:	f8cb 1000 	str.w	r1, [fp]
 8009b7a:	b1e4      	cbz	r4, 8009bb6 <__gethex+0x15a>
 8009b7c:	9b00      	ldr	r3, [sp, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	bf14      	ite	ne
 8009b82:	2700      	movne	r7, #0
 8009b84:	2706      	moveq	r7, #6
 8009b86:	4638      	mov	r0, r7
 8009b88:	b009      	add	sp, #36	; 0x24
 8009b8a:	ecbd 8b02 	vpop	{d8}
 8009b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b92:	463e      	mov	r6, r7
 8009b94:	4625      	mov	r5, r4
 8009b96:	2401      	movs	r4, #1
 8009b98:	e7ca      	b.n	8009b30 <__gethex+0xd4>
 8009b9a:	f04f 0900 	mov.w	r9, #0
 8009b9e:	1cb1      	adds	r1, r6, #2
 8009ba0:	e7d3      	b.n	8009b4a <__gethex+0xee>
 8009ba2:	f04f 0901 	mov.w	r9, #1
 8009ba6:	e7fa      	b.n	8009b9e <__gethex+0x142>
 8009ba8:	230a      	movs	r3, #10
 8009baa:	fb03 0202 	mla	r2, r3, r2, r0
 8009bae:	3a10      	subs	r2, #16
 8009bb0:	e7d4      	b.n	8009b5c <__gethex+0x100>
 8009bb2:	4631      	mov	r1, r6
 8009bb4:	e7df      	b.n	8009b76 <__gethex+0x11a>
 8009bb6:	1bf3      	subs	r3, r6, r7
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	4621      	mov	r1, r4
 8009bbc:	2b07      	cmp	r3, #7
 8009bbe:	dc0b      	bgt.n	8009bd8 <__gethex+0x17c>
 8009bc0:	ee18 0a10 	vmov	r0, s16
 8009bc4:	f000 fa7e 	bl	800a0c4 <_Balloc>
 8009bc8:	4604      	mov	r4, r0
 8009bca:	b940      	cbnz	r0, 8009bde <__gethex+0x182>
 8009bcc:	4b5d      	ldr	r3, [pc, #372]	; (8009d44 <__gethex+0x2e8>)
 8009bce:	4602      	mov	r2, r0
 8009bd0:	21de      	movs	r1, #222	; 0xde
 8009bd2:	485d      	ldr	r0, [pc, #372]	; (8009d48 <__gethex+0x2ec>)
 8009bd4:	f001 f9c6 	bl	800af64 <__assert_func>
 8009bd8:	3101      	adds	r1, #1
 8009bda:	105b      	asrs	r3, r3, #1
 8009bdc:	e7ee      	b.n	8009bbc <__gethex+0x160>
 8009bde:	f100 0914 	add.w	r9, r0, #20
 8009be2:	f04f 0b00 	mov.w	fp, #0
 8009be6:	f1ca 0301 	rsb	r3, sl, #1
 8009bea:	f8cd 9008 	str.w	r9, [sp, #8]
 8009bee:	f8cd b000 	str.w	fp, [sp]
 8009bf2:	9306      	str	r3, [sp, #24]
 8009bf4:	42b7      	cmp	r7, r6
 8009bf6:	d340      	bcc.n	8009c7a <__gethex+0x21e>
 8009bf8:	9802      	ldr	r0, [sp, #8]
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	f840 3b04 	str.w	r3, [r0], #4
 8009c00:	eba0 0009 	sub.w	r0, r0, r9
 8009c04:	1080      	asrs	r0, r0, #2
 8009c06:	0146      	lsls	r6, r0, #5
 8009c08:	6120      	str	r0, [r4, #16]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 fb4c 	bl	800a2a8 <__hi0bits>
 8009c10:	1a30      	subs	r0, r6, r0
 8009c12:	f8d8 6000 	ldr.w	r6, [r8]
 8009c16:	42b0      	cmp	r0, r6
 8009c18:	dd63      	ble.n	8009ce2 <__gethex+0x286>
 8009c1a:	1b87      	subs	r7, r0, r6
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f000 fef0 	bl	800aa04 <__any_on>
 8009c24:	4682      	mov	sl, r0
 8009c26:	b1a8      	cbz	r0, 8009c54 <__gethex+0x1f8>
 8009c28:	1e7b      	subs	r3, r7, #1
 8009c2a:	1159      	asrs	r1, r3, #5
 8009c2c:	f003 021f 	and.w	r2, r3, #31
 8009c30:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009c34:	f04f 0a01 	mov.w	sl, #1
 8009c38:	fa0a f202 	lsl.w	r2, sl, r2
 8009c3c:	420a      	tst	r2, r1
 8009c3e:	d009      	beq.n	8009c54 <__gethex+0x1f8>
 8009c40:	4553      	cmp	r3, sl
 8009c42:	dd05      	ble.n	8009c50 <__gethex+0x1f4>
 8009c44:	1eb9      	subs	r1, r7, #2
 8009c46:	4620      	mov	r0, r4
 8009c48:	f000 fedc 	bl	800aa04 <__any_on>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d145      	bne.n	8009cdc <__gethex+0x280>
 8009c50:	f04f 0a02 	mov.w	sl, #2
 8009c54:	4639      	mov	r1, r7
 8009c56:	4620      	mov	r0, r4
 8009c58:	f7ff fe98 	bl	800998c <rshift>
 8009c5c:	443d      	add	r5, r7
 8009c5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c62:	42ab      	cmp	r3, r5
 8009c64:	da4c      	bge.n	8009d00 <__gethex+0x2a4>
 8009c66:	ee18 0a10 	vmov	r0, s16
 8009c6a:	4621      	mov	r1, r4
 8009c6c:	f000 fa6a 	bl	800a144 <_Bfree>
 8009c70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c72:	2300      	movs	r3, #0
 8009c74:	6013      	str	r3, [r2, #0]
 8009c76:	27a3      	movs	r7, #163	; 0xa3
 8009c78:	e785      	b.n	8009b86 <__gethex+0x12a>
 8009c7a:	1e73      	subs	r3, r6, #1
 8009c7c:	9a05      	ldr	r2, [sp, #20]
 8009c7e:	9303      	str	r3, [sp, #12]
 8009c80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d019      	beq.n	8009cbc <__gethex+0x260>
 8009c88:	f1bb 0f20 	cmp.w	fp, #32
 8009c8c:	d107      	bne.n	8009c9e <__gethex+0x242>
 8009c8e:	9b02      	ldr	r3, [sp, #8]
 8009c90:	9a00      	ldr	r2, [sp, #0]
 8009c92:	f843 2b04 	str.w	r2, [r3], #4
 8009c96:	9302      	str	r3, [sp, #8]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	469b      	mov	fp, r3
 8009c9e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009ca2:	f7ff fec5 	bl	8009a30 <__hexdig_fun>
 8009ca6:	9b00      	ldr	r3, [sp, #0]
 8009ca8:	f000 000f 	and.w	r0, r0, #15
 8009cac:	fa00 f00b 	lsl.w	r0, r0, fp
 8009cb0:	4303      	orrs	r3, r0
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	f10b 0b04 	add.w	fp, fp, #4
 8009cb8:	9b03      	ldr	r3, [sp, #12]
 8009cba:	e00d      	b.n	8009cd8 <__gethex+0x27c>
 8009cbc:	9b03      	ldr	r3, [sp, #12]
 8009cbe:	9a06      	ldr	r2, [sp, #24]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	42bb      	cmp	r3, r7
 8009cc4:	d3e0      	bcc.n	8009c88 <__gethex+0x22c>
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	9901      	ldr	r1, [sp, #4]
 8009cca:	9307      	str	r3, [sp, #28]
 8009ccc:	4652      	mov	r2, sl
 8009cce:	f001 f927 	bl	800af20 <strncmp>
 8009cd2:	9b07      	ldr	r3, [sp, #28]
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d1d7      	bne.n	8009c88 <__gethex+0x22c>
 8009cd8:	461e      	mov	r6, r3
 8009cda:	e78b      	b.n	8009bf4 <__gethex+0x198>
 8009cdc:	f04f 0a03 	mov.w	sl, #3
 8009ce0:	e7b8      	b.n	8009c54 <__gethex+0x1f8>
 8009ce2:	da0a      	bge.n	8009cfa <__gethex+0x29e>
 8009ce4:	1a37      	subs	r7, r6, r0
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	ee18 0a10 	vmov	r0, s16
 8009cec:	463a      	mov	r2, r7
 8009cee:	f000 fc45 	bl	800a57c <__lshift>
 8009cf2:	1bed      	subs	r5, r5, r7
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	f100 0914 	add.w	r9, r0, #20
 8009cfa:	f04f 0a00 	mov.w	sl, #0
 8009cfe:	e7ae      	b.n	8009c5e <__gethex+0x202>
 8009d00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d04:	42a8      	cmp	r0, r5
 8009d06:	dd72      	ble.n	8009dee <__gethex+0x392>
 8009d08:	1b45      	subs	r5, r0, r5
 8009d0a:	42ae      	cmp	r6, r5
 8009d0c:	dc36      	bgt.n	8009d7c <__gethex+0x320>
 8009d0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d02a      	beq.n	8009d6c <__gethex+0x310>
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d02c      	beq.n	8009d74 <__gethex+0x318>
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d11c      	bne.n	8009d58 <__gethex+0x2fc>
 8009d1e:	42ae      	cmp	r6, r5
 8009d20:	d11a      	bne.n	8009d58 <__gethex+0x2fc>
 8009d22:	2e01      	cmp	r6, #1
 8009d24:	d112      	bne.n	8009d4c <__gethex+0x2f0>
 8009d26:	9a04      	ldr	r2, [sp, #16]
 8009d28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d2c:	6013      	str	r3, [r2, #0]
 8009d2e:	2301      	movs	r3, #1
 8009d30:	6123      	str	r3, [r4, #16]
 8009d32:	f8c9 3000 	str.w	r3, [r9]
 8009d36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d38:	2762      	movs	r7, #98	; 0x62
 8009d3a:	601c      	str	r4, [r3, #0]
 8009d3c:	e723      	b.n	8009b86 <__gethex+0x12a>
 8009d3e:	bf00      	nop
 8009d40:	0800bfe0 	.word	0x0800bfe0
 8009d44:	0800bf68 	.word	0x0800bf68
 8009d48:	0800bf79 	.word	0x0800bf79
 8009d4c:	1e71      	subs	r1, r6, #1
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f000 fe58 	bl	800aa04 <__any_on>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d1e6      	bne.n	8009d26 <__gethex+0x2ca>
 8009d58:	ee18 0a10 	vmov	r0, s16
 8009d5c:	4621      	mov	r1, r4
 8009d5e:	f000 f9f1 	bl	800a144 <_Bfree>
 8009d62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d64:	2300      	movs	r3, #0
 8009d66:	6013      	str	r3, [r2, #0]
 8009d68:	2750      	movs	r7, #80	; 0x50
 8009d6a:	e70c      	b.n	8009b86 <__gethex+0x12a>
 8009d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1f2      	bne.n	8009d58 <__gethex+0x2fc>
 8009d72:	e7d8      	b.n	8009d26 <__gethex+0x2ca>
 8009d74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1d5      	bne.n	8009d26 <__gethex+0x2ca>
 8009d7a:	e7ed      	b.n	8009d58 <__gethex+0x2fc>
 8009d7c:	1e6f      	subs	r7, r5, #1
 8009d7e:	f1ba 0f00 	cmp.w	sl, #0
 8009d82:	d131      	bne.n	8009de8 <__gethex+0x38c>
 8009d84:	b127      	cbz	r7, 8009d90 <__gethex+0x334>
 8009d86:	4639      	mov	r1, r7
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 fe3b 	bl	800aa04 <__any_on>
 8009d8e:	4682      	mov	sl, r0
 8009d90:	117b      	asrs	r3, r7, #5
 8009d92:	2101      	movs	r1, #1
 8009d94:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009d98:	f007 071f 	and.w	r7, r7, #31
 8009d9c:	fa01 f707 	lsl.w	r7, r1, r7
 8009da0:	421f      	tst	r7, r3
 8009da2:	4629      	mov	r1, r5
 8009da4:	4620      	mov	r0, r4
 8009da6:	bf18      	it	ne
 8009da8:	f04a 0a02 	orrne.w	sl, sl, #2
 8009dac:	1b76      	subs	r6, r6, r5
 8009dae:	f7ff fded 	bl	800998c <rshift>
 8009db2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009db6:	2702      	movs	r7, #2
 8009db8:	f1ba 0f00 	cmp.w	sl, #0
 8009dbc:	d048      	beq.n	8009e50 <__gethex+0x3f4>
 8009dbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d015      	beq.n	8009df2 <__gethex+0x396>
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d017      	beq.n	8009dfa <__gethex+0x39e>
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d109      	bne.n	8009de2 <__gethex+0x386>
 8009dce:	f01a 0f02 	tst.w	sl, #2
 8009dd2:	d006      	beq.n	8009de2 <__gethex+0x386>
 8009dd4:	f8d9 0000 	ldr.w	r0, [r9]
 8009dd8:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ddc:	f01a 0f01 	tst.w	sl, #1
 8009de0:	d10e      	bne.n	8009e00 <__gethex+0x3a4>
 8009de2:	f047 0710 	orr.w	r7, r7, #16
 8009de6:	e033      	b.n	8009e50 <__gethex+0x3f4>
 8009de8:	f04f 0a01 	mov.w	sl, #1
 8009dec:	e7d0      	b.n	8009d90 <__gethex+0x334>
 8009dee:	2701      	movs	r7, #1
 8009df0:	e7e2      	b.n	8009db8 <__gethex+0x35c>
 8009df2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009df4:	f1c3 0301 	rsb	r3, r3, #1
 8009df8:	9315      	str	r3, [sp, #84]	; 0x54
 8009dfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d0f0      	beq.n	8009de2 <__gethex+0x386>
 8009e00:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e04:	f104 0314 	add.w	r3, r4, #20
 8009e08:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e0c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e10:	f04f 0c00 	mov.w	ip, #0
 8009e14:	4618      	mov	r0, r3
 8009e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e1a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e1e:	d01c      	beq.n	8009e5a <__gethex+0x3fe>
 8009e20:	3201      	adds	r2, #1
 8009e22:	6002      	str	r2, [r0, #0]
 8009e24:	2f02      	cmp	r7, #2
 8009e26:	f104 0314 	add.w	r3, r4, #20
 8009e2a:	d13f      	bne.n	8009eac <__gethex+0x450>
 8009e2c:	f8d8 2000 	ldr.w	r2, [r8]
 8009e30:	3a01      	subs	r2, #1
 8009e32:	42b2      	cmp	r2, r6
 8009e34:	d10a      	bne.n	8009e4c <__gethex+0x3f0>
 8009e36:	1171      	asrs	r1, r6, #5
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e3e:	f006 061f 	and.w	r6, r6, #31
 8009e42:	fa02 f606 	lsl.w	r6, r2, r6
 8009e46:	421e      	tst	r6, r3
 8009e48:	bf18      	it	ne
 8009e4a:	4617      	movne	r7, r2
 8009e4c:	f047 0720 	orr.w	r7, r7, #32
 8009e50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e52:	601c      	str	r4, [r3, #0]
 8009e54:	9b04      	ldr	r3, [sp, #16]
 8009e56:	601d      	str	r5, [r3, #0]
 8009e58:	e695      	b.n	8009b86 <__gethex+0x12a>
 8009e5a:	4299      	cmp	r1, r3
 8009e5c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e60:	d8d8      	bhi.n	8009e14 <__gethex+0x3b8>
 8009e62:	68a3      	ldr	r3, [r4, #8]
 8009e64:	459b      	cmp	fp, r3
 8009e66:	db19      	blt.n	8009e9c <__gethex+0x440>
 8009e68:	6861      	ldr	r1, [r4, #4]
 8009e6a:	ee18 0a10 	vmov	r0, s16
 8009e6e:	3101      	adds	r1, #1
 8009e70:	f000 f928 	bl	800a0c4 <_Balloc>
 8009e74:	4681      	mov	r9, r0
 8009e76:	b918      	cbnz	r0, 8009e80 <__gethex+0x424>
 8009e78:	4b1a      	ldr	r3, [pc, #104]	; (8009ee4 <__gethex+0x488>)
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	2184      	movs	r1, #132	; 0x84
 8009e7e:	e6a8      	b.n	8009bd2 <__gethex+0x176>
 8009e80:	6922      	ldr	r2, [r4, #16]
 8009e82:	3202      	adds	r2, #2
 8009e84:	f104 010c 	add.w	r1, r4, #12
 8009e88:	0092      	lsls	r2, r2, #2
 8009e8a:	300c      	adds	r0, #12
 8009e8c:	f000 f90c 	bl	800a0a8 <memcpy>
 8009e90:	4621      	mov	r1, r4
 8009e92:	ee18 0a10 	vmov	r0, s16
 8009e96:	f000 f955 	bl	800a144 <_Bfree>
 8009e9a:	464c      	mov	r4, r9
 8009e9c:	6923      	ldr	r3, [r4, #16]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ea4:	6122      	str	r2, [r4, #16]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	615a      	str	r2, [r3, #20]
 8009eaa:	e7bb      	b.n	8009e24 <__gethex+0x3c8>
 8009eac:	6922      	ldr	r2, [r4, #16]
 8009eae:	455a      	cmp	r2, fp
 8009eb0:	dd0b      	ble.n	8009eca <__gethex+0x46e>
 8009eb2:	2101      	movs	r1, #1
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f7ff fd69 	bl	800998c <rshift>
 8009eba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ebe:	3501      	adds	r5, #1
 8009ec0:	42ab      	cmp	r3, r5
 8009ec2:	f6ff aed0 	blt.w	8009c66 <__gethex+0x20a>
 8009ec6:	2701      	movs	r7, #1
 8009ec8:	e7c0      	b.n	8009e4c <__gethex+0x3f0>
 8009eca:	f016 061f 	ands.w	r6, r6, #31
 8009ece:	d0fa      	beq.n	8009ec6 <__gethex+0x46a>
 8009ed0:	4453      	add	r3, sl
 8009ed2:	f1c6 0620 	rsb	r6, r6, #32
 8009ed6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009eda:	f000 f9e5 	bl	800a2a8 <__hi0bits>
 8009ede:	42b0      	cmp	r0, r6
 8009ee0:	dbe7      	blt.n	8009eb2 <__gethex+0x456>
 8009ee2:	e7f0      	b.n	8009ec6 <__gethex+0x46a>
 8009ee4:	0800bf68 	.word	0x0800bf68

08009ee8 <L_shift>:
 8009ee8:	f1c2 0208 	rsb	r2, r2, #8
 8009eec:	0092      	lsls	r2, r2, #2
 8009eee:	b570      	push	{r4, r5, r6, lr}
 8009ef0:	f1c2 0620 	rsb	r6, r2, #32
 8009ef4:	6843      	ldr	r3, [r0, #4]
 8009ef6:	6804      	ldr	r4, [r0, #0]
 8009ef8:	fa03 f506 	lsl.w	r5, r3, r6
 8009efc:	432c      	orrs	r4, r5
 8009efe:	40d3      	lsrs	r3, r2
 8009f00:	6004      	str	r4, [r0, #0]
 8009f02:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f06:	4288      	cmp	r0, r1
 8009f08:	d3f4      	bcc.n	8009ef4 <L_shift+0xc>
 8009f0a:	bd70      	pop	{r4, r5, r6, pc}

08009f0c <__match>:
 8009f0c:	b530      	push	{r4, r5, lr}
 8009f0e:	6803      	ldr	r3, [r0, #0]
 8009f10:	3301      	adds	r3, #1
 8009f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f16:	b914      	cbnz	r4, 8009f1e <__match+0x12>
 8009f18:	6003      	str	r3, [r0, #0]
 8009f1a:	2001      	movs	r0, #1
 8009f1c:	bd30      	pop	{r4, r5, pc}
 8009f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009f26:	2d19      	cmp	r5, #25
 8009f28:	bf98      	it	ls
 8009f2a:	3220      	addls	r2, #32
 8009f2c:	42a2      	cmp	r2, r4
 8009f2e:	d0f0      	beq.n	8009f12 <__match+0x6>
 8009f30:	2000      	movs	r0, #0
 8009f32:	e7f3      	b.n	8009f1c <__match+0x10>

08009f34 <__hexnan>:
 8009f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f38:	680b      	ldr	r3, [r1, #0]
 8009f3a:	115e      	asrs	r6, r3, #5
 8009f3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f40:	f013 031f 	ands.w	r3, r3, #31
 8009f44:	b087      	sub	sp, #28
 8009f46:	bf18      	it	ne
 8009f48:	3604      	addne	r6, #4
 8009f4a:	2500      	movs	r5, #0
 8009f4c:	1f37      	subs	r7, r6, #4
 8009f4e:	4690      	mov	r8, r2
 8009f50:	6802      	ldr	r2, [r0, #0]
 8009f52:	9301      	str	r3, [sp, #4]
 8009f54:	4682      	mov	sl, r0
 8009f56:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f5a:	46b9      	mov	r9, r7
 8009f5c:	463c      	mov	r4, r7
 8009f5e:	9502      	str	r5, [sp, #8]
 8009f60:	46ab      	mov	fp, r5
 8009f62:	7851      	ldrb	r1, [r2, #1]
 8009f64:	1c53      	adds	r3, r2, #1
 8009f66:	9303      	str	r3, [sp, #12]
 8009f68:	b341      	cbz	r1, 8009fbc <__hexnan+0x88>
 8009f6a:	4608      	mov	r0, r1
 8009f6c:	9205      	str	r2, [sp, #20]
 8009f6e:	9104      	str	r1, [sp, #16]
 8009f70:	f7ff fd5e 	bl	8009a30 <__hexdig_fun>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d14f      	bne.n	800a018 <__hexnan+0xe4>
 8009f78:	9904      	ldr	r1, [sp, #16]
 8009f7a:	9a05      	ldr	r2, [sp, #20]
 8009f7c:	2920      	cmp	r1, #32
 8009f7e:	d818      	bhi.n	8009fb2 <__hexnan+0x7e>
 8009f80:	9b02      	ldr	r3, [sp, #8]
 8009f82:	459b      	cmp	fp, r3
 8009f84:	dd13      	ble.n	8009fae <__hexnan+0x7a>
 8009f86:	454c      	cmp	r4, r9
 8009f88:	d206      	bcs.n	8009f98 <__hexnan+0x64>
 8009f8a:	2d07      	cmp	r5, #7
 8009f8c:	dc04      	bgt.n	8009f98 <__hexnan+0x64>
 8009f8e:	462a      	mov	r2, r5
 8009f90:	4649      	mov	r1, r9
 8009f92:	4620      	mov	r0, r4
 8009f94:	f7ff ffa8 	bl	8009ee8 <L_shift>
 8009f98:	4544      	cmp	r4, r8
 8009f9a:	d950      	bls.n	800a03e <__hexnan+0x10a>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f1a4 0904 	sub.w	r9, r4, #4
 8009fa2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fa6:	f8cd b008 	str.w	fp, [sp, #8]
 8009faa:	464c      	mov	r4, r9
 8009fac:	461d      	mov	r5, r3
 8009fae:	9a03      	ldr	r2, [sp, #12]
 8009fb0:	e7d7      	b.n	8009f62 <__hexnan+0x2e>
 8009fb2:	2929      	cmp	r1, #41	; 0x29
 8009fb4:	d156      	bne.n	800a064 <__hexnan+0x130>
 8009fb6:	3202      	adds	r2, #2
 8009fb8:	f8ca 2000 	str.w	r2, [sl]
 8009fbc:	f1bb 0f00 	cmp.w	fp, #0
 8009fc0:	d050      	beq.n	800a064 <__hexnan+0x130>
 8009fc2:	454c      	cmp	r4, r9
 8009fc4:	d206      	bcs.n	8009fd4 <__hexnan+0xa0>
 8009fc6:	2d07      	cmp	r5, #7
 8009fc8:	dc04      	bgt.n	8009fd4 <__hexnan+0xa0>
 8009fca:	462a      	mov	r2, r5
 8009fcc:	4649      	mov	r1, r9
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f7ff ff8a 	bl	8009ee8 <L_shift>
 8009fd4:	4544      	cmp	r4, r8
 8009fd6:	d934      	bls.n	800a042 <__hexnan+0x10e>
 8009fd8:	f1a8 0204 	sub.w	r2, r8, #4
 8009fdc:	4623      	mov	r3, r4
 8009fde:	f853 1b04 	ldr.w	r1, [r3], #4
 8009fe2:	f842 1f04 	str.w	r1, [r2, #4]!
 8009fe6:	429f      	cmp	r7, r3
 8009fe8:	d2f9      	bcs.n	8009fde <__hexnan+0xaa>
 8009fea:	1b3b      	subs	r3, r7, r4
 8009fec:	f023 0303 	bic.w	r3, r3, #3
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	3401      	adds	r4, #1
 8009ff4:	3e03      	subs	r6, #3
 8009ff6:	42b4      	cmp	r4, r6
 8009ff8:	bf88      	it	hi
 8009ffa:	2304      	movhi	r3, #4
 8009ffc:	4443      	add	r3, r8
 8009ffe:	2200      	movs	r2, #0
 800a000:	f843 2b04 	str.w	r2, [r3], #4
 800a004:	429f      	cmp	r7, r3
 800a006:	d2fb      	bcs.n	800a000 <__hexnan+0xcc>
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	b91b      	cbnz	r3, 800a014 <__hexnan+0xe0>
 800a00c:	4547      	cmp	r7, r8
 800a00e:	d127      	bne.n	800a060 <__hexnan+0x12c>
 800a010:	2301      	movs	r3, #1
 800a012:	603b      	str	r3, [r7, #0]
 800a014:	2005      	movs	r0, #5
 800a016:	e026      	b.n	800a066 <__hexnan+0x132>
 800a018:	3501      	adds	r5, #1
 800a01a:	2d08      	cmp	r5, #8
 800a01c:	f10b 0b01 	add.w	fp, fp, #1
 800a020:	dd06      	ble.n	800a030 <__hexnan+0xfc>
 800a022:	4544      	cmp	r4, r8
 800a024:	d9c3      	bls.n	8009fae <__hexnan+0x7a>
 800a026:	2300      	movs	r3, #0
 800a028:	f844 3c04 	str.w	r3, [r4, #-4]
 800a02c:	2501      	movs	r5, #1
 800a02e:	3c04      	subs	r4, #4
 800a030:	6822      	ldr	r2, [r4, #0]
 800a032:	f000 000f 	and.w	r0, r0, #15
 800a036:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a03a:	6022      	str	r2, [r4, #0]
 800a03c:	e7b7      	b.n	8009fae <__hexnan+0x7a>
 800a03e:	2508      	movs	r5, #8
 800a040:	e7b5      	b.n	8009fae <__hexnan+0x7a>
 800a042:	9b01      	ldr	r3, [sp, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d0df      	beq.n	800a008 <__hexnan+0xd4>
 800a048:	f04f 32ff 	mov.w	r2, #4294967295
 800a04c:	f1c3 0320 	rsb	r3, r3, #32
 800a050:	fa22 f303 	lsr.w	r3, r2, r3
 800a054:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a058:	401a      	ands	r2, r3
 800a05a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a05e:	e7d3      	b.n	800a008 <__hexnan+0xd4>
 800a060:	3f04      	subs	r7, #4
 800a062:	e7d1      	b.n	800a008 <__hexnan+0xd4>
 800a064:	2004      	movs	r0, #4
 800a066:	b007      	add	sp, #28
 800a068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a06c <_localeconv_r>:
 800a06c:	4800      	ldr	r0, [pc, #0]	; (800a070 <_localeconv_r+0x4>)
 800a06e:	4770      	bx	lr
 800a070:	20000180 	.word	0x20000180

0800a074 <malloc>:
 800a074:	4b02      	ldr	r3, [pc, #8]	; (800a080 <malloc+0xc>)
 800a076:	4601      	mov	r1, r0
 800a078:	6818      	ldr	r0, [r3, #0]
 800a07a:	f000 bd67 	b.w	800ab4c <_malloc_r>
 800a07e:	bf00      	nop
 800a080:	20000028 	.word	0x20000028

0800a084 <__ascii_mbtowc>:
 800a084:	b082      	sub	sp, #8
 800a086:	b901      	cbnz	r1, 800a08a <__ascii_mbtowc+0x6>
 800a088:	a901      	add	r1, sp, #4
 800a08a:	b142      	cbz	r2, 800a09e <__ascii_mbtowc+0x1a>
 800a08c:	b14b      	cbz	r3, 800a0a2 <__ascii_mbtowc+0x1e>
 800a08e:	7813      	ldrb	r3, [r2, #0]
 800a090:	600b      	str	r3, [r1, #0]
 800a092:	7812      	ldrb	r2, [r2, #0]
 800a094:	1e10      	subs	r0, r2, #0
 800a096:	bf18      	it	ne
 800a098:	2001      	movne	r0, #1
 800a09a:	b002      	add	sp, #8
 800a09c:	4770      	bx	lr
 800a09e:	4610      	mov	r0, r2
 800a0a0:	e7fb      	b.n	800a09a <__ascii_mbtowc+0x16>
 800a0a2:	f06f 0001 	mvn.w	r0, #1
 800a0a6:	e7f8      	b.n	800a09a <__ascii_mbtowc+0x16>

0800a0a8 <memcpy>:
 800a0a8:	440a      	add	r2, r1
 800a0aa:	4291      	cmp	r1, r2
 800a0ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0b0:	d100      	bne.n	800a0b4 <memcpy+0xc>
 800a0b2:	4770      	bx	lr
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0be:	4291      	cmp	r1, r2
 800a0c0:	d1f9      	bne.n	800a0b6 <memcpy+0xe>
 800a0c2:	bd10      	pop	{r4, pc}

0800a0c4 <_Balloc>:
 800a0c4:	b570      	push	{r4, r5, r6, lr}
 800a0c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	460d      	mov	r5, r1
 800a0cc:	b976      	cbnz	r6, 800a0ec <_Balloc+0x28>
 800a0ce:	2010      	movs	r0, #16
 800a0d0:	f7ff ffd0 	bl	800a074 <malloc>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	6260      	str	r0, [r4, #36]	; 0x24
 800a0d8:	b920      	cbnz	r0, 800a0e4 <_Balloc+0x20>
 800a0da:	4b18      	ldr	r3, [pc, #96]	; (800a13c <_Balloc+0x78>)
 800a0dc:	4818      	ldr	r0, [pc, #96]	; (800a140 <_Balloc+0x7c>)
 800a0de:	2166      	movs	r1, #102	; 0x66
 800a0e0:	f000 ff40 	bl	800af64 <__assert_func>
 800a0e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0e8:	6006      	str	r6, [r0, #0]
 800a0ea:	60c6      	str	r6, [r0, #12]
 800a0ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a0ee:	68f3      	ldr	r3, [r6, #12]
 800a0f0:	b183      	cbz	r3, 800a114 <_Balloc+0x50>
 800a0f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0fa:	b9b8      	cbnz	r0, 800a12c <_Balloc+0x68>
 800a0fc:	2101      	movs	r1, #1
 800a0fe:	fa01 f605 	lsl.w	r6, r1, r5
 800a102:	1d72      	adds	r2, r6, #5
 800a104:	0092      	lsls	r2, r2, #2
 800a106:	4620      	mov	r0, r4
 800a108:	f000 fc9d 	bl	800aa46 <_calloc_r>
 800a10c:	b160      	cbz	r0, 800a128 <_Balloc+0x64>
 800a10e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a112:	e00e      	b.n	800a132 <_Balloc+0x6e>
 800a114:	2221      	movs	r2, #33	; 0x21
 800a116:	2104      	movs	r1, #4
 800a118:	4620      	mov	r0, r4
 800a11a:	f000 fc94 	bl	800aa46 <_calloc_r>
 800a11e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a120:	60f0      	str	r0, [r6, #12]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1e4      	bne.n	800a0f2 <_Balloc+0x2e>
 800a128:	2000      	movs	r0, #0
 800a12a:	bd70      	pop	{r4, r5, r6, pc}
 800a12c:	6802      	ldr	r2, [r0, #0]
 800a12e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a132:	2300      	movs	r3, #0
 800a134:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a138:	e7f7      	b.n	800a12a <_Balloc+0x66>
 800a13a:	bf00      	nop
 800a13c:	0800bef6 	.word	0x0800bef6
 800a140:	0800bff4 	.word	0x0800bff4

0800a144 <_Bfree>:
 800a144:	b570      	push	{r4, r5, r6, lr}
 800a146:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a148:	4605      	mov	r5, r0
 800a14a:	460c      	mov	r4, r1
 800a14c:	b976      	cbnz	r6, 800a16c <_Bfree+0x28>
 800a14e:	2010      	movs	r0, #16
 800a150:	f7ff ff90 	bl	800a074 <malloc>
 800a154:	4602      	mov	r2, r0
 800a156:	6268      	str	r0, [r5, #36]	; 0x24
 800a158:	b920      	cbnz	r0, 800a164 <_Bfree+0x20>
 800a15a:	4b09      	ldr	r3, [pc, #36]	; (800a180 <_Bfree+0x3c>)
 800a15c:	4809      	ldr	r0, [pc, #36]	; (800a184 <_Bfree+0x40>)
 800a15e:	218a      	movs	r1, #138	; 0x8a
 800a160:	f000 ff00 	bl	800af64 <__assert_func>
 800a164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a168:	6006      	str	r6, [r0, #0]
 800a16a:	60c6      	str	r6, [r0, #12]
 800a16c:	b13c      	cbz	r4, 800a17e <_Bfree+0x3a>
 800a16e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a170:	6862      	ldr	r2, [r4, #4]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a178:	6021      	str	r1, [r4, #0]
 800a17a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a17e:	bd70      	pop	{r4, r5, r6, pc}
 800a180:	0800bef6 	.word	0x0800bef6
 800a184:	0800bff4 	.word	0x0800bff4

0800a188 <__multadd>:
 800a188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a18c:	690d      	ldr	r5, [r1, #16]
 800a18e:	4607      	mov	r7, r0
 800a190:	460c      	mov	r4, r1
 800a192:	461e      	mov	r6, r3
 800a194:	f101 0c14 	add.w	ip, r1, #20
 800a198:	2000      	movs	r0, #0
 800a19a:	f8dc 3000 	ldr.w	r3, [ip]
 800a19e:	b299      	uxth	r1, r3
 800a1a0:	fb02 6101 	mla	r1, r2, r1, r6
 800a1a4:	0c1e      	lsrs	r6, r3, #16
 800a1a6:	0c0b      	lsrs	r3, r1, #16
 800a1a8:	fb02 3306 	mla	r3, r2, r6, r3
 800a1ac:	b289      	uxth	r1, r1
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1b4:	4285      	cmp	r5, r0
 800a1b6:	f84c 1b04 	str.w	r1, [ip], #4
 800a1ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1be:	dcec      	bgt.n	800a19a <__multadd+0x12>
 800a1c0:	b30e      	cbz	r6, 800a206 <__multadd+0x7e>
 800a1c2:	68a3      	ldr	r3, [r4, #8]
 800a1c4:	42ab      	cmp	r3, r5
 800a1c6:	dc19      	bgt.n	800a1fc <__multadd+0x74>
 800a1c8:	6861      	ldr	r1, [r4, #4]
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	3101      	adds	r1, #1
 800a1ce:	f7ff ff79 	bl	800a0c4 <_Balloc>
 800a1d2:	4680      	mov	r8, r0
 800a1d4:	b928      	cbnz	r0, 800a1e2 <__multadd+0x5a>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <__multadd+0x84>)
 800a1da:	480d      	ldr	r0, [pc, #52]	; (800a210 <__multadd+0x88>)
 800a1dc:	21b5      	movs	r1, #181	; 0xb5
 800a1de:	f000 fec1 	bl	800af64 <__assert_func>
 800a1e2:	6922      	ldr	r2, [r4, #16]
 800a1e4:	3202      	adds	r2, #2
 800a1e6:	f104 010c 	add.w	r1, r4, #12
 800a1ea:	0092      	lsls	r2, r2, #2
 800a1ec:	300c      	adds	r0, #12
 800a1ee:	f7ff ff5b 	bl	800a0a8 <memcpy>
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	f7ff ffa5 	bl	800a144 <_Bfree>
 800a1fa:	4644      	mov	r4, r8
 800a1fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a200:	3501      	adds	r5, #1
 800a202:	615e      	str	r6, [r3, #20]
 800a204:	6125      	str	r5, [r4, #16]
 800a206:	4620      	mov	r0, r4
 800a208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a20c:	0800bf68 	.word	0x0800bf68
 800a210:	0800bff4 	.word	0x0800bff4

0800a214 <__s2b>:
 800a214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a218:	460c      	mov	r4, r1
 800a21a:	4615      	mov	r5, r2
 800a21c:	461f      	mov	r7, r3
 800a21e:	2209      	movs	r2, #9
 800a220:	3308      	adds	r3, #8
 800a222:	4606      	mov	r6, r0
 800a224:	fb93 f3f2 	sdiv	r3, r3, r2
 800a228:	2100      	movs	r1, #0
 800a22a:	2201      	movs	r2, #1
 800a22c:	429a      	cmp	r2, r3
 800a22e:	db09      	blt.n	800a244 <__s2b+0x30>
 800a230:	4630      	mov	r0, r6
 800a232:	f7ff ff47 	bl	800a0c4 <_Balloc>
 800a236:	b940      	cbnz	r0, 800a24a <__s2b+0x36>
 800a238:	4602      	mov	r2, r0
 800a23a:	4b19      	ldr	r3, [pc, #100]	; (800a2a0 <__s2b+0x8c>)
 800a23c:	4819      	ldr	r0, [pc, #100]	; (800a2a4 <__s2b+0x90>)
 800a23e:	21ce      	movs	r1, #206	; 0xce
 800a240:	f000 fe90 	bl	800af64 <__assert_func>
 800a244:	0052      	lsls	r2, r2, #1
 800a246:	3101      	adds	r1, #1
 800a248:	e7f0      	b.n	800a22c <__s2b+0x18>
 800a24a:	9b08      	ldr	r3, [sp, #32]
 800a24c:	6143      	str	r3, [r0, #20]
 800a24e:	2d09      	cmp	r5, #9
 800a250:	f04f 0301 	mov.w	r3, #1
 800a254:	6103      	str	r3, [r0, #16]
 800a256:	dd16      	ble.n	800a286 <__s2b+0x72>
 800a258:	f104 0909 	add.w	r9, r4, #9
 800a25c:	46c8      	mov	r8, r9
 800a25e:	442c      	add	r4, r5
 800a260:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a264:	4601      	mov	r1, r0
 800a266:	3b30      	subs	r3, #48	; 0x30
 800a268:	220a      	movs	r2, #10
 800a26a:	4630      	mov	r0, r6
 800a26c:	f7ff ff8c 	bl	800a188 <__multadd>
 800a270:	45a0      	cmp	r8, r4
 800a272:	d1f5      	bne.n	800a260 <__s2b+0x4c>
 800a274:	f1a5 0408 	sub.w	r4, r5, #8
 800a278:	444c      	add	r4, r9
 800a27a:	1b2d      	subs	r5, r5, r4
 800a27c:	1963      	adds	r3, r4, r5
 800a27e:	42bb      	cmp	r3, r7
 800a280:	db04      	blt.n	800a28c <__s2b+0x78>
 800a282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a286:	340a      	adds	r4, #10
 800a288:	2509      	movs	r5, #9
 800a28a:	e7f6      	b.n	800a27a <__s2b+0x66>
 800a28c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a290:	4601      	mov	r1, r0
 800a292:	3b30      	subs	r3, #48	; 0x30
 800a294:	220a      	movs	r2, #10
 800a296:	4630      	mov	r0, r6
 800a298:	f7ff ff76 	bl	800a188 <__multadd>
 800a29c:	e7ee      	b.n	800a27c <__s2b+0x68>
 800a29e:	bf00      	nop
 800a2a0:	0800bf68 	.word	0x0800bf68
 800a2a4:	0800bff4 	.word	0x0800bff4

0800a2a8 <__hi0bits>:
 800a2a8:	0c03      	lsrs	r3, r0, #16
 800a2aa:	041b      	lsls	r3, r3, #16
 800a2ac:	b9d3      	cbnz	r3, 800a2e4 <__hi0bits+0x3c>
 800a2ae:	0400      	lsls	r0, r0, #16
 800a2b0:	2310      	movs	r3, #16
 800a2b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2b6:	bf04      	itt	eq
 800a2b8:	0200      	lsleq	r0, r0, #8
 800a2ba:	3308      	addeq	r3, #8
 800a2bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a2c0:	bf04      	itt	eq
 800a2c2:	0100      	lsleq	r0, r0, #4
 800a2c4:	3304      	addeq	r3, #4
 800a2c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a2ca:	bf04      	itt	eq
 800a2cc:	0080      	lsleq	r0, r0, #2
 800a2ce:	3302      	addeq	r3, #2
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	db05      	blt.n	800a2e0 <__hi0bits+0x38>
 800a2d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a2d8:	f103 0301 	add.w	r3, r3, #1
 800a2dc:	bf08      	it	eq
 800a2de:	2320      	moveq	r3, #32
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	4770      	bx	lr
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	e7e4      	b.n	800a2b2 <__hi0bits+0xa>

0800a2e8 <__lo0bits>:
 800a2e8:	6803      	ldr	r3, [r0, #0]
 800a2ea:	f013 0207 	ands.w	r2, r3, #7
 800a2ee:	4601      	mov	r1, r0
 800a2f0:	d00b      	beq.n	800a30a <__lo0bits+0x22>
 800a2f2:	07da      	lsls	r2, r3, #31
 800a2f4:	d423      	bmi.n	800a33e <__lo0bits+0x56>
 800a2f6:	0798      	lsls	r0, r3, #30
 800a2f8:	bf49      	itett	mi
 800a2fa:	085b      	lsrmi	r3, r3, #1
 800a2fc:	089b      	lsrpl	r3, r3, #2
 800a2fe:	2001      	movmi	r0, #1
 800a300:	600b      	strmi	r3, [r1, #0]
 800a302:	bf5c      	itt	pl
 800a304:	600b      	strpl	r3, [r1, #0]
 800a306:	2002      	movpl	r0, #2
 800a308:	4770      	bx	lr
 800a30a:	b298      	uxth	r0, r3
 800a30c:	b9a8      	cbnz	r0, 800a33a <__lo0bits+0x52>
 800a30e:	0c1b      	lsrs	r3, r3, #16
 800a310:	2010      	movs	r0, #16
 800a312:	b2da      	uxtb	r2, r3
 800a314:	b90a      	cbnz	r2, 800a31a <__lo0bits+0x32>
 800a316:	3008      	adds	r0, #8
 800a318:	0a1b      	lsrs	r3, r3, #8
 800a31a:	071a      	lsls	r2, r3, #28
 800a31c:	bf04      	itt	eq
 800a31e:	091b      	lsreq	r3, r3, #4
 800a320:	3004      	addeq	r0, #4
 800a322:	079a      	lsls	r2, r3, #30
 800a324:	bf04      	itt	eq
 800a326:	089b      	lsreq	r3, r3, #2
 800a328:	3002      	addeq	r0, #2
 800a32a:	07da      	lsls	r2, r3, #31
 800a32c:	d403      	bmi.n	800a336 <__lo0bits+0x4e>
 800a32e:	085b      	lsrs	r3, r3, #1
 800a330:	f100 0001 	add.w	r0, r0, #1
 800a334:	d005      	beq.n	800a342 <__lo0bits+0x5a>
 800a336:	600b      	str	r3, [r1, #0]
 800a338:	4770      	bx	lr
 800a33a:	4610      	mov	r0, r2
 800a33c:	e7e9      	b.n	800a312 <__lo0bits+0x2a>
 800a33e:	2000      	movs	r0, #0
 800a340:	4770      	bx	lr
 800a342:	2020      	movs	r0, #32
 800a344:	4770      	bx	lr
	...

0800a348 <__i2b>:
 800a348:	b510      	push	{r4, lr}
 800a34a:	460c      	mov	r4, r1
 800a34c:	2101      	movs	r1, #1
 800a34e:	f7ff feb9 	bl	800a0c4 <_Balloc>
 800a352:	4602      	mov	r2, r0
 800a354:	b928      	cbnz	r0, 800a362 <__i2b+0x1a>
 800a356:	4b05      	ldr	r3, [pc, #20]	; (800a36c <__i2b+0x24>)
 800a358:	4805      	ldr	r0, [pc, #20]	; (800a370 <__i2b+0x28>)
 800a35a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a35e:	f000 fe01 	bl	800af64 <__assert_func>
 800a362:	2301      	movs	r3, #1
 800a364:	6144      	str	r4, [r0, #20]
 800a366:	6103      	str	r3, [r0, #16]
 800a368:	bd10      	pop	{r4, pc}
 800a36a:	bf00      	nop
 800a36c:	0800bf68 	.word	0x0800bf68
 800a370:	0800bff4 	.word	0x0800bff4

0800a374 <__multiply>:
 800a374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a378:	4691      	mov	r9, r2
 800a37a:	690a      	ldr	r2, [r1, #16]
 800a37c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a380:	429a      	cmp	r2, r3
 800a382:	bfb8      	it	lt
 800a384:	460b      	movlt	r3, r1
 800a386:	460c      	mov	r4, r1
 800a388:	bfbc      	itt	lt
 800a38a:	464c      	movlt	r4, r9
 800a38c:	4699      	movlt	r9, r3
 800a38e:	6927      	ldr	r7, [r4, #16]
 800a390:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a394:	68a3      	ldr	r3, [r4, #8]
 800a396:	6861      	ldr	r1, [r4, #4]
 800a398:	eb07 060a 	add.w	r6, r7, sl
 800a39c:	42b3      	cmp	r3, r6
 800a39e:	b085      	sub	sp, #20
 800a3a0:	bfb8      	it	lt
 800a3a2:	3101      	addlt	r1, #1
 800a3a4:	f7ff fe8e 	bl	800a0c4 <_Balloc>
 800a3a8:	b930      	cbnz	r0, 800a3b8 <__multiply+0x44>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	4b44      	ldr	r3, [pc, #272]	; (800a4c0 <__multiply+0x14c>)
 800a3ae:	4845      	ldr	r0, [pc, #276]	; (800a4c4 <__multiply+0x150>)
 800a3b0:	f240 115d 	movw	r1, #349	; 0x15d
 800a3b4:	f000 fdd6 	bl	800af64 <__assert_func>
 800a3b8:	f100 0514 	add.w	r5, r0, #20
 800a3bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3c0:	462b      	mov	r3, r5
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	4543      	cmp	r3, r8
 800a3c6:	d321      	bcc.n	800a40c <__multiply+0x98>
 800a3c8:	f104 0314 	add.w	r3, r4, #20
 800a3cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a3d0:	f109 0314 	add.w	r3, r9, #20
 800a3d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a3d8:	9202      	str	r2, [sp, #8]
 800a3da:	1b3a      	subs	r2, r7, r4
 800a3dc:	3a15      	subs	r2, #21
 800a3de:	f022 0203 	bic.w	r2, r2, #3
 800a3e2:	3204      	adds	r2, #4
 800a3e4:	f104 0115 	add.w	r1, r4, #21
 800a3e8:	428f      	cmp	r7, r1
 800a3ea:	bf38      	it	cc
 800a3ec:	2204      	movcc	r2, #4
 800a3ee:	9201      	str	r2, [sp, #4]
 800a3f0:	9a02      	ldr	r2, [sp, #8]
 800a3f2:	9303      	str	r3, [sp, #12]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d80c      	bhi.n	800a412 <__multiply+0x9e>
 800a3f8:	2e00      	cmp	r6, #0
 800a3fa:	dd03      	ble.n	800a404 <__multiply+0x90>
 800a3fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a400:	2b00      	cmp	r3, #0
 800a402:	d05a      	beq.n	800a4ba <__multiply+0x146>
 800a404:	6106      	str	r6, [r0, #16]
 800a406:	b005      	add	sp, #20
 800a408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40c:	f843 2b04 	str.w	r2, [r3], #4
 800a410:	e7d8      	b.n	800a3c4 <__multiply+0x50>
 800a412:	f8b3 a000 	ldrh.w	sl, [r3]
 800a416:	f1ba 0f00 	cmp.w	sl, #0
 800a41a:	d024      	beq.n	800a466 <__multiply+0xf2>
 800a41c:	f104 0e14 	add.w	lr, r4, #20
 800a420:	46a9      	mov	r9, r5
 800a422:	f04f 0c00 	mov.w	ip, #0
 800a426:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a42a:	f8d9 1000 	ldr.w	r1, [r9]
 800a42e:	fa1f fb82 	uxth.w	fp, r2
 800a432:	b289      	uxth	r1, r1
 800a434:	fb0a 110b 	mla	r1, sl, fp, r1
 800a438:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a43c:	f8d9 2000 	ldr.w	r2, [r9]
 800a440:	4461      	add	r1, ip
 800a442:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a446:	fb0a c20b 	mla	r2, sl, fp, ip
 800a44a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a44e:	b289      	uxth	r1, r1
 800a450:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a454:	4577      	cmp	r7, lr
 800a456:	f849 1b04 	str.w	r1, [r9], #4
 800a45a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a45e:	d8e2      	bhi.n	800a426 <__multiply+0xb2>
 800a460:	9a01      	ldr	r2, [sp, #4]
 800a462:	f845 c002 	str.w	ip, [r5, r2]
 800a466:	9a03      	ldr	r2, [sp, #12]
 800a468:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a46c:	3304      	adds	r3, #4
 800a46e:	f1b9 0f00 	cmp.w	r9, #0
 800a472:	d020      	beq.n	800a4b6 <__multiply+0x142>
 800a474:	6829      	ldr	r1, [r5, #0]
 800a476:	f104 0c14 	add.w	ip, r4, #20
 800a47a:	46ae      	mov	lr, r5
 800a47c:	f04f 0a00 	mov.w	sl, #0
 800a480:	f8bc b000 	ldrh.w	fp, [ip]
 800a484:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a488:	fb09 220b 	mla	r2, r9, fp, r2
 800a48c:	4492      	add	sl, r2
 800a48e:	b289      	uxth	r1, r1
 800a490:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a494:	f84e 1b04 	str.w	r1, [lr], #4
 800a498:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a49c:	f8be 1000 	ldrh.w	r1, [lr]
 800a4a0:	0c12      	lsrs	r2, r2, #16
 800a4a2:	fb09 1102 	mla	r1, r9, r2, r1
 800a4a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a4aa:	4567      	cmp	r7, ip
 800a4ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4b0:	d8e6      	bhi.n	800a480 <__multiply+0x10c>
 800a4b2:	9a01      	ldr	r2, [sp, #4]
 800a4b4:	50a9      	str	r1, [r5, r2]
 800a4b6:	3504      	adds	r5, #4
 800a4b8:	e79a      	b.n	800a3f0 <__multiply+0x7c>
 800a4ba:	3e01      	subs	r6, #1
 800a4bc:	e79c      	b.n	800a3f8 <__multiply+0x84>
 800a4be:	bf00      	nop
 800a4c0:	0800bf68 	.word	0x0800bf68
 800a4c4:	0800bff4 	.word	0x0800bff4

0800a4c8 <__pow5mult>:
 800a4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4cc:	4615      	mov	r5, r2
 800a4ce:	f012 0203 	ands.w	r2, r2, #3
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	460f      	mov	r7, r1
 800a4d6:	d007      	beq.n	800a4e8 <__pow5mult+0x20>
 800a4d8:	4c25      	ldr	r4, [pc, #148]	; (800a570 <__pow5mult+0xa8>)
 800a4da:	3a01      	subs	r2, #1
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4e2:	f7ff fe51 	bl	800a188 <__multadd>
 800a4e6:	4607      	mov	r7, r0
 800a4e8:	10ad      	asrs	r5, r5, #2
 800a4ea:	d03d      	beq.n	800a568 <__pow5mult+0xa0>
 800a4ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a4ee:	b97c      	cbnz	r4, 800a510 <__pow5mult+0x48>
 800a4f0:	2010      	movs	r0, #16
 800a4f2:	f7ff fdbf 	bl	800a074 <malloc>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	6270      	str	r0, [r6, #36]	; 0x24
 800a4fa:	b928      	cbnz	r0, 800a508 <__pow5mult+0x40>
 800a4fc:	4b1d      	ldr	r3, [pc, #116]	; (800a574 <__pow5mult+0xac>)
 800a4fe:	481e      	ldr	r0, [pc, #120]	; (800a578 <__pow5mult+0xb0>)
 800a500:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a504:	f000 fd2e 	bl	800af64 <__assert_func>
 800a508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a50c:	6004      	str	r4, [r0, #0]
 800a50e:	60c4      	str	r4, [r0, #12]
 800a510:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a518:	b94c      	cbnz	r4, 800a52e <__pow5mult+0x66>
 800a51a:	f240 2171 	movw	r1, #625	; 0x271
 800a51e:	4630      	mov	r0, r6
 800a520:	f7ff ff12 	bl	800a348 <__i2b>
 800a524:	2300      	movs	r3, #0
 800a526:	f8c8 0008 	str.w	r0, [r8, #8]
 800a52a:	4604      	mov	r4, r0
 800a52c:	6003      	str	r3, [r0, #0]
 800a52e:	f04f 0900 	mov.w	r9, #0
 800a532:	07eb      	lsls	r3, r5, #31
 800a534:	d50a      	bpl.n	800a54c <__pow5mult+0x84>
 800a536:	4639      	mov	r1, r7
 800a538:	4622      	mov	r2, r4
 800a53a:	4630      	mov	r0, r6
 800a53c:	f7ff ff1a 	bl	800a374 <__multiply>
 800a540:	4639      	mov	r1, r7
 800a542:	4680      	mov	r8, r0
 800a544:	4630      	mov	r0, r6
 800a546:	f7ff fdfd 	bl	800a144 <_Bfree>
 800a54a:	4647      	mov	r7, r8
 800a54c:	106d      	asrs	r5, r5, #1
 800a54e:	d00b      	beq.n	800a568 <__pow5mult+0xa0>
 800a550:	6820      	ldr	r0, [r4, #0]
 800a552:	b938      	cbnz	r0, 800a564 <__pow5mult+0x9c>
 800a554:	4622      	mov	r2, r4
 800a556:	4621      	mov	r1, r4
 800a558:	4630      	mov	r0, r6
 800a55a:	f7ff ff0b 	bl	800a374 <__multiply>
 800a55e:	6020      	str	r0, [r4, #0]
 800a560:	f8c0 9000 	str.w	r9, [r0]
 800a564:	4604      	mov	r4, r0
 800a566:	e7e4      	b.n	800a532 <__pow5mult+0x6a>
 800a568:	4638      	mov	r0, r7
 800a56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a56e:	bf00      	nop
 800a570:	0800c140 	.word	0x0800c140
 800a574:	0800bef6 	.word	0x0800bef6
 800a578:	0800bff4 	.word	0x0800bff4

0800a57c <__lshift>:
 800a57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a580:	460c      	mov	r4, r1
 800a582:	6849      	ldr	r1, [r1, #4]
 800a584:	6923      	ldr	r3, [r4, #16]
 800a586:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a58a:	68a3      	ldr	r3, [r4, #8]
 800a58c:	4607      	mov	r7, r0
 800a58e:	4691      	mov	r9, r2
 800a590:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a594:	f108 0601 	add.w	r6, r8, #1
 800a598:	42b3      	cmp	r3, r6
 800a59a:	db0b      	blt.n	800a5b4 <__lshift+0x38>
 800a59c:	4638      	mov	r0, r7
 800a59e:	f7ff fd91 	bl	800a0c4 <_Balloc>
 800a5a2:	4605      	mov	r5, r0
 800a5a4:	b948      	cbnz	r0, 800a5ba <__lshift+0x3e>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	4b2a      	ldr	r3, [pc, #168]	; (800a654 <__lshift+0xd8>)
 800a5aa:	482b      	ldr	r0, [pc, #172]	; (800a658 <__lshift+0xdc>)
 800a5ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a5b0:	f000 fcd8 	bl	800af64 <__assert_func>
 800a5b4:	3101      	adds	r1, #1
 800a5b6:	005b      	lsls	r3, r3, #1
 800a5b8:	e7ee      	b.n	800a598 <__lshift+0x1c>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f100 0114 	add.w	r1, r0, #20
 800a5c0:	f100 0210 	add.w	r2, r0, #16
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	4553      	cmp	r3, sl
 800a5c8:	db37      	blt.n	800a63a <__lshift+0xbe>
 800a5ca:	6920      	ldr	r0, [r4, #16]
 800a5cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5d0:	f104 0314 	add.w	r3, r4, #20
 800a5d4:	f019 091f 	ands.w	r9, r9, #31
 800a5d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5e0:	d02f      	beq.n	800a642 <__lshift+0xc6>
 800a5e2:	f1c9 0e20 	rsb	lr, r9, #32
 800a5e6:	468a      	mov	sl, r1
 800a5e8:	f04f 0c00 	mov.w	ip, #0
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	fa02 f209 	lsl.w	r2, r2, r9
 800a5f2:	ea42 020c 	orr.w	r2, r2, ip
 800a5f6:	f84a 2b04 	str.w	r2, [sl], #4
 800a5fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5fe:	4298      	cmp	r0, r3
 800a600:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a604:	d8f2      	bhi.n	800a5ec <__lshift+0x70>
 800a606:	1b03      	subs	r3, r0, r4
 800a608:	3b15      	subs	r3, #21
 800a60a:	f023 0303 	bic.w	r3, r3, #3
 800a60e:	3304      	adds	r3, #4
 800a610:	f104 0215 	add.w	r2, r4, #21
 800a614:	4290      	cmp	r0, r2
 800a616:	bf38      	it	cc
 800a618:	2304      	movcc	r3, #4
 800a61a:	f841 c003 	str.w	ip, [r1, r3]
 800a61e:	f1bc 0f00 	cmp.w	ip, #0
 800a622:	d001      	beq.n	800a628 <__lshift+0xac>
 800a624:	f108 0602 	add.w	r6, r8, #2
 800a628:	3e01      	subs	r6, #1
 800a62a:	4638      	mov	r0, r7
 800a62c:	612e      	str	r6, [r5, #16]
 800a62e:	4621      	mov	r1, r4
 800a630:	f7ff fd88 	bl	800a144 <_Bfree>
 800a634:	4628      	mov	r0, r5
 800a636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a63e:	3301      	adds	r3, #1
 800a640:	e7c1      	b.n	800a5c6 <__lshift+0x4a>
 800a642:	3904      	subs	r1, #4
 800a644:	f853 2b04 	ldr.w	r2, [r3], #4
 800a648:	f841 2f04 	str.w	r2, [r1, #4]!
 800a64c:	4298      	cmp	r0, r3
 800a64e:	d8f9      	bhi.n	800a644 <__lshift+0xc8>
 800a650:	e7ea      	b.n	800a628 <__lshift+0xac>
 800a652:	bf00      	nop
 800a654:	0800bf68 	.word	0x0800bf68
 800a658:	0800bff4 	.word	0x0800bff4

0800a65c <__mcmp>:
 800a65c:	b530      	push	{r4, r5, lr}
 800a65e:	6902      	ldr	r2, [r0, #16]
 800a660:	690c      	ldr	r4, [r1, #16]
 800a662:	1b12      	subs	r2, r2, r4
 800a664:	d10e      	bne.n	800a684 <__mcmp+0x28>
 800a666:	f100 0314 	add.w	r3, r0, #20
 800a66a:	3114      	adds	r1, #20
 800a66c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a670:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a674:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a678:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a67c:	42a5      	cmp	r5, r4
 800a67e:	d003      	beq.n	800a688 <__mcmp+0x2c>
 800a680:	d305      	bcc.n	800a68e <__mcmp+0x32>
 800a682:	2201      	movs	r2, #1
 800a684:	4610      	mov	r0, r2
 800a686:	bd30      	pop	{r4, r5, pc}
 800a688:	4283      	cmp	r3, r0
 800a68a:	d3f3      	bcc.n	800a674 <__mcmp+0x18>
 800a68c:	e7fa      	b.n	800a684 <__mcmp+0x28>
 800a68e:	f04f 32ff 	mov.w	r2, #4294967295
 800a692:	e7f7      	b.n	800a684 <__mcmp+0x28>

0800a694 <__mdiff>:
 800a694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a698:	460c      	mov	r4, r1
 800a69a:	4606      	mov	r6, r0
 800a69c:	4611      	mov	r1, r2
 800a69e:	4620      	mov	r0, r4
 800a6a0:	4690      	mov	r8, r2
 800a6a2:	f7ff ffdb 	bl	800a65c <__mcmp>
 800a6a6:	1e05      	subs	r5, r0, #0
 800a6a8:	d110      	bne.n	800a6cc <__mdiff+0x38>
 800a6aa:	4629      	mov	r1, r5
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f7ff fd09 	bl	800a0c4 <_Balloc>
 800a6b2:	b930      	cbnz	r0, 800a6c2 <__mdiff+0x2e>
 800a6b4:	4b3a      	ldr	r3, [pc, #232]	; (800a7a0 <__mdiff+0x10c>)
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	f240 2132 	movw	r1, #562	; 0x232
 800a6bc:	4839      	ldr	r0, [pc, #228]	; (800a7a4 <__mdiff+0x110>)
 800a6be:	f000 fc51 	bl	800af64 <__assert_func>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6cc:	bfa4      	itt	ge
 800a6ce:	4643      	movge	r3, r8
 800a6d0:	46a0      	movge	r8, r4
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a6d8:	bfa6      	itte	ge
 800a6da:	461c      	movge	r4, r3
 800a6dc:	2500      	movge	r5, #0
 800a6de:	2501      	movlt	r5, #1
 800a6e0:	f7ff fcf0 	bl	800a0c4 <_Balloc>
 800a6e4:	b920      	cbnz	r0, 800a6f0 <__mdiff+0x5c>
 800a6e6:	4b2e      	ldr	r3, [pc, #184]	; (800a7a0 <__mdiff+0x10c>)
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a6ee:	e7e5      	b.n	800a6bc <__mdiff+0x28>
 800a6f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a6f4:	6926      	ldr	r6, [r4, #16]
 800a6f6:	60c5      	str	r5, [r0, #12]
 800a6f8:	f104 0914 	add.w	r9, r4, #20
 800a6fc:	f108 0514 	add.w	r5, r8, #20
 800a700:	f100 0e14 	add.w	lr, r0, #20
 800a704:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a708:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a70c:	f108 0210 	add.w	r2, r8, #16
 800a710:	46f2      	mov	sl, lr
 800a712:	2100      	movs	r1, #0
 800a714:	f859 3b04 	ldr.w	r3, [r9], #4
 800a718:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a71c:	fa1f f883 	uxth.w	r8, r3
 800a720:	fa11 f18b 	uxtah	r1, r1, fp
 800a724:	0c1b      	lsrs	r3, r3, #16
 800a726:	eba1 0808 	sub.w	r8, r1, r8
 800a72a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a72e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a732:	fa1f f888 	uxth.w	r8, r8
 800a736:	1419      	asrs	r1, r3, #16
 800a738:	454e      	cmp	r6, r9
 800a73a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a73e:	f84a 3b04 	str.w	r3, [sl], #4
 800a742:	d8e7      	bhi.n	800a714 <__mdiff+0x80>
 800a744:	1b33      	subs	r3, r6, r4
 800a746:	3b15      	subs	r3, #21
 800a748:	f023 0303 	bic.w	r3, r3, #3
 800a74c:	3304      	adds	r3, #4
 800a74e:	3415      	adds	r4, #21
 800a750:	42a6      	cmp	r6, r4
 800a752:	bf38      	it	cc
 800a754:	2304      	movcc	r3, #4
 800a756:	441d      	add	r5, r3
 800a758:	4473      	add	r3, lr
 800a75a:	469e      	mov	lr, r3
 800a75c:	462e      	mov	r6, r5
 800a75e:	4566      	cmp	r6, ip
 800a760:	d30e      	bcc.n	800a780 <__mdiff+0xec>
 800a762:	f10c 0203 	add.w	r2, ip, #3
 800a766:	1b52      	subs	r2, r2, r5
 800a768:	f022 0203 	bic.w	r2, r2, #3
 800a76c:	3d03      	subs	r5, #3
 800a76e:	45ac      	cmp	ip, r5
 800a770:	bf38      	it	cc
 800a772:	2200      	movcc	r2, #0
 800a774:	441a      	add	r2, r3
 800a776:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a77a:	b17b      	cbz	r3, 800a79c <__mdiff+0x108>
 800a77c:	6107      	str	r7, [r0, #16]
 800a77e:	e7a3      	b.n	800a6c8 <__mdiff+0x34>
 800a780:	f856 8b04 	ldr.w	r8, [r6], #4
 800a784:	fa11 f288 	uxtah	r2, r1, r8
 800a788:	1414      	asrs	r4, r2, #16
 800a78a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a78e:	b292      	uxth	r2, r2
 800a790:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a794:	f84e 2b04 	str.w	r2, [lr], #4
 800a798:	1421      	asrs	r1, r4, #16
 800a79a:	e7e0      	b.n	800a75e <__mdiff+0xca>
 800a79c:	3f01      	subs	r7, #1
 800a79e:	e7ea      	b.n	800a776 <__mdiff+0xe2>
 800a7a0:	0800bf68 	.word	0x0800bf68
 800a7a4:	0800bff4 	.word	0x0800bff4

0800a7a8 <__ulp>:
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	ed8d 0b00 	vstr	d0, [sp]
 800a7ae:	9b01      	ldr	r3, [sp, #4]
 800a7b0:	4912      	ldr	r1, [pc, #72]	; (800a7fc <__ulp+0x54>)
 800a7b2:	4019      	ands	r1, r3
 800a7b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a7b8:	2900      	cmp	r1, #0
 800a7ba:	dd05      	ble.n	800a7c8 <__ulp+0x20>
 800a7bc:	2200      	movs	r2, #0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	ec43 2b10 	vmov	d0, r2, r3
 800a7c4:	b002      	add	sp, #8
 800a7c6:	4770      	bx	lr
 800a7c8:	4249      	negs	r1, r1
 800a7ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a7ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a7d2:	f04f 0200 	mov.w	r2, #0
 800a7d6:	f04f 0300 	mov.w	r3, #0
 800a7da:	da04      	bge.n	800a7e6 <__ulp+0x3e>
 800a7dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a7e0:	fa41 f300 	asr.w	r3, r1, r0
 800a7e4:	e7ec      	b.n	800a7c0 <__ulp+0x18>
 800a7e6:	f1a0 0114 	sub.w	r1, r0, #20
 800a7ea:	291e      	cmp	r1, #30
 800a7ec:	bfda      	itte	le
 800a7ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a7f2:	fa20 f101 	lsrle.w	r1, r0, r1
 800a7f6:	2101      	movgt	r1, #1
 800a7f8:	460a      	mov	r2, r1
 800a7fa:	e7e1      	b.n	800a7c0 <__ulp+0x18>
 800a7fc:	7ff00000 	.word	0x7ff00000

0800a800 <__b2d>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	6905      	ldr	r5, [r0, #16]
 800a804:	f100 0714 	add.w	r7, r0, #20
 800a808:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a80c:	1f2e      	subs	r6, r5, #4
 800a80e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a812:	4620      	mov	r0, r4
 800a814:	f7ff fd48 	bl	800a2a8 <__hi0bits>
 800a818:	f1c0 0320 	rsb	r3, r0, #32
 800a81c:	280a      	cmp	r0, #10
 800a81e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a89c <__b2d+0x9c>
 800a822:	600b      	str	r3, [r1, #0]
 800a824:	dc14      	bgt.n	800a850 <__b2d+0x50>
 800a826:	f1c0 0e0b 	rsb	lr, r0, #11
 800a82a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a82e:	42b7      	cmp	r7, r6
 800a830:	ea41 030c 	orr.w	r3, r1, ip
 800a834:	bf34      	ite	cc
 800a836:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a83a:	2100      	movcs	r1, #0
 800a83c:	3015      	adds	r0, #21
 800a83e:	fa04 f000 	lsl.w	r0, r4, r0
 800a842:	fa21 f10e 	lsr.w	r1, r1, lr
 800a846:	ea40 0201 	orr.w	r2, r0, r1
 800a84a:	ec43 2b10 	vmov	d0, r2, r3
 800a84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a850:	42b7      	cmp	r7, r6
 800a852:	bf3a      	itte	cc
 800a854:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a858:	f1a5 0608 	subcc.w	r6, r5, #8
 800a85c:	2100      	movcs	r1, #0
 800a85e:	380b      	subs	r0, #11
 800a860:	d017      	beq.n	800a892 <__b2d+0x92>
 800a862:	f1c0 0c20 	rsb	ip, r0, #32
 800a866:	fa04 f500 	lsl.w	r5, r4, r0
 800a86a:	42be      	cmp	r6, r7
 800a86c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a870:	ea45 0504 	orr.w	r5, r5, r4
 800a874:	bf8c      	ite	hi
 800a876:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a87a:	2400      	movls	r4, #0
 800a87c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a880:	fa01 f000 	lsl.w	r0, r1, r0
 800a884:	fa24 f40c 	lsr.w	r4, r4, ip
 800a888:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a88c:	ea40 0204 	orr.w	r2, r0, r4
 800a890:	e7db      	b.n	800a84a <__b2d+0x4a>
 800a892:	ea44 030c 	orr.w	r3, r4, ip
 800a896:	460a      	mov	r2, r1
 800a898:	e7d7      	b.n	800a84a <__b2d+0x4a>
 800a89a:	bf00      	nop
 800a89c:	3ff00000 	.word	0x3ff00000

0800a8a0 <__d2b>:
 800a8a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8a4:	4689      	mov	r9, r1
 800a8a6:	2101      	movs	r1, #1
 800a8a8:	ec57 6b10 	vmov	r6, r7, d0
 800a8ac:	4690      	mov	r8, r2
 800a8ae:	f7ff fc09 	bl	800a0c4 <_Balloc>
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	b930      	cbnz	r0, 800a8c4 <__d2b+0x24>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	4b25      	ldr	r3, [pc, #148]	; (800a950 <__d2b+0xb0>)
 800a8ba:	4826      	ldr	r0, [pc, #152]	; (800a954 <__d2b+0xb4>)
 800a8bc:	f240 310a 	movw	r1, #778	; 0x30a
 800a8c0:	f000 fb50 	bl	800af64 <__assert_func>
 800a8c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a8c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8cc:	bb35      	cbnz	r5, 800a91c <__d2b+0x7c>
 800a8ce:	2e00      	cmp	r6, #0
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	d028      	beq.n	800a926 <__d2b+0x86>
 800a8d4:	4668      	mov	r0, sp
 800a8d6:	9600      	str	r6, [sp, #0]
 800a8d8:	f7ff fd06 	bl	800a2e8 <__lo0bits>
 800a8dc:	9900      	ldr	r1, [sp, #0]
 800a8de:	b300      	cbz	r0, 800a922 <__d2b+0x82>
 800a8e0:	9a01      	ldr	r2, [sp, #4]
 800a8e2:	f1c0 0320 	rsb	r3, r0, #32
 800a8e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ea:	430b      	orrs	r3, r1
 800a8ec:	40c2      	lsrs	r2, r0
 800a8ee:	6163      	str	r3, [r4, #20]
 800a8f0:	9201      	str	r2, [sp, #4]
 800a8f2:	9b01      	ldr	r3, [sp, #4]
 800a8f4:	61a3      	str	r3, [r4, #24]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	bf14      	ite	ne
 800a8fa:	2202      	movne	r2, #2
 800a8fc:	2201      	moveq	r2, #1
 800a8fe:	6122      	str	r2, [r4, #16]
 800a900:	b1d5      	cbz	r5, 800a938 <__d2b+0x98>
 800a902:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a906:	4405      	add	r5, r0
 800a908:	f8c9 5000 	str.w	r5, [r9]
 800a90c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a910:	f8c8 0000 	str.w	r0, [r8]
 800a914:	4620      	mov	r0, r4
 800a916:	b003      	add	sp, #12
 800a918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a91c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a920:	e7d5      	b.n	800a8ce <__d2b+0x2e>
 800a922:	6161      	str	r1, [r4, #20]
 800a924:	e7e5      	b.n	800a8f2 <__d2b+0x52>
 800a926:	a801      	add	r0, sp, #4
 800a928:	f7ff fcde 	bl	800a2e8 <__lo0bits>
 800a92c:	9b01      	ldr	r3, [sp, #4]
 800a92e:	6163      	str	r3, [r4, #20]
 800a930:	2201      	movs	r2, #1
 800a932:	6122      	str	r2, [r4, #16]
 800a934:	3020      	adds	r0, #32
 800a936:	e7e3      	b.n	800a900 <__d2b+0x60>
 800a938:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a93c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a940:	f8c9 0000 	str.w	r0, [r9]
 800a944:	6918      	ldr	r0, [r3, #16]
 800a946:	f7ff fcaf 	bl	800a2a8 <__hi0bits>
 800a94a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a94e:	e7df      	b.n	800a910 <__d2b+0x70>
 800a950:	0800bf68 	.word	0x0800bf68
 800a954:	0800bff4 	.word	0x0800bff4

0800a958 <__ratio>:
 800a958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95c:	4688      	mov	r8, r1
 800a95e:	4669      	mov	r1, sp
 800a960:	4681      	mov	r9, r0
 800a962:	f7ff ff4d 	bl	800a800 <__b2d>
 800a966:	a901      	add	r1, sp, #4
 800a968:	4640      	mov	r0, r8
 800a96a:	ec55 4b10 	vmov	r4, r5, d0
 800a96e:	f7ff ff47 	bl	800a800 <__b2d>
 800a972:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a976:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a97a:	eba3 0c02 	sub.w	ip, r3, r2
 800a97e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a982:	1a9b      	subs	r3, r3, r2
 800a984:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a988:	ec51 0b10 	vmov	r0, r1, d0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	bfd6      	itet	le
 800a990:	460a      	movle	r2, r1
 800a992:	462a      	movgt	r2, r5
 800a994:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a998:	468b      	mov	fp, r1
 800a99a:	462f      	mov	r7, r5
 800a99c:	bfd4      	ite	le
 800a99e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a9a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	ee10 2a10 	vmov	r2, s0
 800a9ac:	465b      	mov	r3, fp
 800a9ae:	4639      	mov	r1, r7
 800a9b0:	f7f5 ff4c 	bl	800084c <__aeabi_ddiv>
 800a9b4:	ec41 0b10 	vmov	d0, r0, r1
 800a9b8:	b003      	add	sp, #12
 800a9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9be <__copybits>:
 800a9be:	3901      	subs	r1, #1
 800a9c0:	b570      	push	{r4, r5, r6, lr}
 800a9c2:	1149      	asrs	r1, r1, #5
 800a9c4:	6914      	ldr	r4, [r2, #16]
 800a9c6:	3101      	adds	r1, #1
 800a9c8:	f102 0314 	add.w	r3, r2, #20
 800a9cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9d4:	1f05      	subs	r5, r0, #4
 800a9d6:	42a3      	cmp	r3, r4
 800a9d8:	d30c      	bcc.n	800a9f4 <__copybits+0x36>
 800a9da:	1aa3      	subs	r3, r4, r2
 800a9dc:	3b11      	subs	r3, #17
 800a9de:	f023 0303 	bic.w	r3, r3, #3
 800a9e2:	3211      	adds	r2, #17
 800a9e4:	42a2      	cmp	r2, r4
 800a9e6:	bf88      	it	hi
 800a9e8:	2300      	movhi	r3, #0
 800a9ea:	4418      	add	r0, r3
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	4288      	cmp	r0, r1
 800a9f0:	d305      	bcc.n	800a9fe <__copybits+0x40>
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}
 800a9f4:	f853 6b04 	ldr.w	r6, [r3], #4
 800a9f8:	f845 6f04 	str.w	r6, [r5, #4]!
 800a9fc:	e7eb      	b.n	800a9d6 <__copybits+0x18>
 800a9fe:	f840 3b04 	str.w	r3, [r0], #4
 800aa02:	e7f4      	b.n	800a9ee <__copybits+0x30>

0800aa04 <__any_on>:
 800aa04:	f100 0214 	add.w	r2, r0, #20
 800aa08:	6900      	ldr	r0, [r0, #16]
 800aa0a:	114b      	asrs	r3, r1, #5
 800aa0c:	4298      	cmp	r0, r3
 800aa0e:	b510      	push	{r4, lr}
 800aa10:	db11      	blt.n	800aa36 <__any_on+0x32>
 800aa12:	dd0a      	ble.n	800aa2a <__any_on+0x26>
 800aa14:	f011 011f 	ands.w	r1, r1, #31
 800aa18:	d007      	beq.n	800aa2a <__any_on+0x26>
 800aa1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa1e:	fa24 f001 	lsr.w	r0, r4, r1
 800aa22:	fa00 f101 	lsl.w	r1, r0, r1
 800aa26:	428c      	cmp	r4, r1
 800aa28:	d10b      	bne.n	800aa42 <__any_on+0x3e>
 800aa2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d803      	bhi.n	800aa3a <__any_on+0x36>
 800aa32:	2000      	movs	r0, #0
 800aa34:	bd10      	pop	{r4, pc}
 800aa36:	4603      	mov	r3, r0
 800aa38:	e7f7      	b.n	800aa2a <__any_on+0x26>
 800aa3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa3e:	2900      	cmp	r1, #0
 800aa40:	d0f5      	beq.n	800aa2e <__any_on+0x2a>
 800aa42:	2001      	movs	r0, #1
 800aa44:	e7f6      	b.n	800aa34 <__any_on+0x30>

0800aa46 <_calloc_r>:
 800aa46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa48:	fba1 2402 	umull	r2, r4, r1, r2
 800aa4c:	b94c      	cbnz	r4, 800aa62 <_calloc_r+0x1c>
 800aa4e:	4611      	mov	r1, r2
 800aa50:	9201      	str	r2, [sp, #4]
 800aa52:	f000 f87b 	bl	800ab4c <_malloc_r>
 800aa56:	9a01      	ldr	r2, [sp, #4]
 800aa58:	4605      	mov	r5, r0
 800aa5a:	b930      	cbnz	r0, 800aa6a <_calloc_r+0x24>
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	b003      	add	sp, #12
 800aa60:	bd30      	pop	{r4, r5, pc}
 800aa62:	220c      	movs	r2, #12
 800aa64:	6002      	str	r2, [r0, #0]
 800aa66:	2500      	movs	r5, #0
 800aa68:	e7f8      	b.n	800aa5c <_calloc_r+0x16>
 800aa6a:	4621      	mov	r1, r4
 800aa6c:	f7fc fbb2 	bl	80071d4 <memset>
 800aa70:	e7f4      	b.n	800aa5c <_calloc_r+0x16>
	...

0800aa74 <_free_r>:
 800aa74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa76:	2900      	cmp	r1, #0
 800aa78:	d044      	beq.n	800ab04 <_free_r+0x90>
 800aa7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa7e:	9001      	str	r0, [sp, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f1a1 0404 	sub.w	r4, r1, #4
 800aa86:	bfb8      	it	lt
 800aa88:	18e4      	addlt	r4, r4, r3
 800aa8a:	f000 fab5 	bl	800aff8 <__malloc_lock>
 800aa8e:	4a1e      	ldr	r2, [pc, #120]	; (800ab08 <_free_r+0x94>)
 800aa90:	9801      	ldr	r0, [sp, #4]
 800aa92:	6813      	ldr	r3, [r2, #0]
 800aa94:	b933      	cbnz	r3, 800aaa4 <_free_r+0x30>
 800aa96:	6063      	str	r3, [r4, #4]
 800aa98:	6014      	str	r4, [r2, #0]
 800aa9a:	b003      	add	sp, #12
 800aa9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aaa0:	f000 bab0 	b.w	800b004 <__malloc_unlock>
 800aaa4:	42a3      	cmp	r3, r4
 800aaa6:	d908      	bls.n	800aaba <_free_r+0x46>
 800aaa8:	6825      	ldr	r5, [r4, #0]
 800aaaa:	1961      	adds	r1, r4, r5
 800aaac:	428b      	cmp	r3, r1
 800aaae:	bf01      	itttt	eq
 800aab0:	6819      	ldreq	r1, [r3, #0]
 800aab2:	685b      	ldreq	r3, [r3, #4]
 800aab4:	1949      	addeq	r1, r1, r5
 800aab6:	6021      	streq	r1, [r4, #0]
 800aab8:	e7ed      	b.n	800aa96 <_free_r+0x22>
 800aaba:	461a      	mov	r2, r3
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	b10b      	cbz	r3, 800aac4 <_free_r+0x50>
 800aac0:	42a3      	cmp	r3, r4
 800aac2:	d9fa      	bls.n	800aaba <_free_r+0x46>
 800aac4:	6811      	ldr	r1, [r2, #0]
 800aac6:	1855      	adds	r5, r2, r1
 800aac8:	42a5      	cmp	r5, r4
 800aaca:	d10b      	bne.n	800aae4 <_free_r+0x70>
 800aacc:	6824      	ldr	r4, [r4, #0]
 800aace:	4421      	add	r1, r4
 800aad0:	1854      	adds	r4, r2, r1
 800aad2:	42a3      	cmp	r3, r4
 800aad4:	6011      	str	r1, [r2, #0]
 800aad6:	d1e0      	bne.n	800aa9a <_free_r+0x26>
 800aad8:	681c      	ldr	r4, [r3, #0]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	6053      	str	r3, [r2, #4]
 800aade:	4421      	add	r1, r4
 800aae0:	6011      	str	r1, [r2, #0]
 800aae2:	e7da      	b.n	800aa9a <_free_r+0x26>
 800aae4:	d902      	bls.n	800aaec <_free_r+0x78>
 800aae6:	230c      	movs	r3, #12
 800aae8:	6003      	str	r3, [r0, #0]
 800aaea:	e7d6      	b.n	800aa9a <_free_r+0x26>
 800aaec:	6825      	ldr	r5, [r4, #0]
 800aaee:	1961      	adds	r1, r4, r5
 800aaf0:	428b      	cmp	r3, r1
 800aaf2:	bf04      	itt	eq
 800aaf4:	6819      	ldreq	r1, [r3, #0]
 800aaf6:	685b      	ldreq	r3, [r3, #4]
 800aaf8:	6063      	str	r3, [r4, #4]
 800aafa:	bf04      	itt	eq
 800aafc:	1949      	addeq	r1, r1, r5
 800aafe:	6021      	streq	r1, [r4, #0]
 800ab00:	6054      	str	r4, [r2, #4]
 800ab02:	e7ca      	b.n	800aa9a <_free_r+0x26>
 800ab04:	b003      	add	sp, #12
 800ab06:	bd30      	pop	{r4, r5, pc}
 800ab08:	200047f4 	.word	0x200047f4

0800ab0c <sbrk_aligned>:
 800ab0c:	b570      	push	{r4, r5, r6, lr}
 800ab0e:	4e0e      	ldr	r6, [pc, #56]	; (800ab48 <sbrk_aligned+0x3c>)
 800ab10:	460c      	mov	r4, r1
 800ab12:	6831      	ldr	r1, [r6, #0]
 800ab14:	4605      	mov	r5, r0
 800ab16:	b911      	cbnz	r1, 800ab1e <sbrk_aligned+0x12>
 800ab18:	f000 f9f2 	bl	800af00 <_sbrk_r>
 800ab1c:	6030      	str	r0, [r6, #0]
 800ab1e:	4621      	mov	r1, r4
 800ab20:	4628      	mov	r0, r5
 800ab22:	f000 f9ed 	bl	800af00 <_sbrk_r>
 800ab26:	1c43      	adds	r3, r0, #1
 800ab28:	d00a      	beq.n	800ab40 <sbrk_aligned+0x34>
 800ab2a:	1cc4      	adds	r4, r0, #3
 800ab2c:	f024 0403 	bic.w	r4, r4, #3
 800ab30:	42a0      	cmp	r0, r4
 800ab32:	d007      	beq.n	800ab44 <sbrk_aligned+0x38>
 800ab34:	1a21      	subs	r1, r4, r0
 800ab36:	4628      	mov	r0, r5
 800ab38:	f000 f9e2 	bl	800af00 <_sbrk_r>
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d101      	bne.n	800ab44 <sbrk_aligned+0x38>
 800ab40:	f04f 34ff 	mov.w	r4, #4294967295
 800ab44:	4620      	mov	r0, r4
 800ab46:	bd70      	pop	{r4, r5, r6, pc}
 800ab48:	200047f8 	.word	0x200047f8

0800ab4c <_malloc_r>:
 800ab4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab50:	1ccd      	adds	r5, r1, #3
 800ab52:	f025 0503 	bic.w	r5, r5, #3
 800ab56:	3508      	adds	r5, #8
 800ab58:	2d0c      	cmp	r5, #12
 800ab5a:	bf38      	it	cc
 800ab5c:	250c      	movcc	r5, #12
 800ab5e:	2d00      	cmp	r5, #0
 800ab60:	4607      	mov	r7, r0
 800ab62:	db01      	blt.n	800ab68 <_malloc_r+0x1c>
 800ab64:	42a9      	cmp	r1, r5
 800ab66:	d905      	bls.n	800ab74 <_malloc_r+0x28>
 800ab68:	230c      	movs	r3, #12
 800ab6a:	603b      	str	r3, [r7, #0]
 800ab6c:	2600      	movs	r6, #0
 800ab6e:	4630      	mov	r0, r6
 800ab70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab74:	4e2e      	ldr	r6, [pc, #184]	; (800ac30 <_malloc_r+0xe4>)
 800ab76:	f000 fa3f 	bl	800aff8 <__malloc_lock>
 800ab7a:	6833      	ldr	r3, [r6, #0]
 800ab7c:	461c      	mov	r4, r3
 800ab7e:	bb34      	cbnz	r4, 800abce <_malloc_r+0x82>
 800ab80:	4629      	mov	r1, r5
 800ab82:	4638      	mov	r0, r7
 800ab84:	f7ff ffc2 	bl	800ab0c <sbrk_aligned>
 800ab88:	1c43      	adds	r3, r0, #1
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	d14d      	bne.n	800ac2a <_malloc_r+0xde>
 800ab8e:	6834      	ldr	r4, [r6, #0]
 800ab90:	4626      	mov	r6, r4
 800ab92:	2e00      	cmp	r6, #0
 800ab94:	d140      	bne.n	800ac18 <_malloc_r+0xcc>
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	4631      	mov	r1, r6
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	eb04 0803 	add.w	r8, r4, r3
 800aba0:	f000 f9ae 	bl	800af00 <_sbrk_r>
 800aba4:	4580      	cmp	r8, r0
 800aba6:	d13a      	bne.n	800ac1e <_malloc_r+0xd2>
 800aba8:	6821      	ldr	r1, [r4, #0]
 800abaa:	3503      	adds	r5, #3
 800abac:	1a6d      	subs	r5, r5, r1
 800abae:	f025 0503 	bic.w	r5, r5, #3
 800abb2:	3508      	adds	r5, #8
 800abb4:	2d0c      	cmp	r5, #12
 800abb6:	bf38      	it	cc
 800abb8:	250c      	movcc	r5, #12
 800abba:	4629      	mov	r1, r5
 800abbc:	4638      	mov	r0, r7
 800abbe:	f7ff ffa5 	bl	800ab0c <sbrk_aligned>
 800abc2:	3001      	adds	r0, #1
 800abc4:	d02b      	beq.n	800ac1e <_malloc_r+0xd2>
 800abc6:	6823      	ldr	r3, [r4, #0]
 800abc8:	442b      	add	r3, r5
 800abca:	6023      	str	r3, [r4, #0]
 800abcc:	e00e      	b.n	800abec <_malloc_r+0xa0>
 800abce:	6822      	ldr	r2, [r4, #0]
 800abd0:	1b52      	subs	r2, r2, r5
 800abd2:	d41e      	bmi.n	800ac12 <_malloc_r+0xc6>
 800abd4:	2a0b      	cmp	r2, #11
 800abd6:	d916      	bls.n	800ac06 <_malloc_r+0xba>
 800abd8:	1961      	adds	r1, r4, r5
 800abda:	42a3      	cmp	r3, r4
 800abdc:	6025      	str	r5, [r4, #0]
 800abde:	bf18      	it	ne
 800abe0:	6059      	strne	r1, [r3, #4]
 800abe2:	6863      	ldr	r3, [r4, #4]
 800abe4:	bf08      	it	eq
 800abe6:	6031      	streq	r1, [r6, #0]
 800abe8:	5162      	str	r2, [r4, r5]
 800abea:	604b      	str	r3, [r1, #4]
 800abec:	4638      	mov	r0, r7
 800abee:	f104 060b 	add.w	r6, r4, #11
 800abf2:	f000 fa07 	bl	800b004 <__malloc_unlock>
 800abf6:	f026 0607 	bic.w	r6, r6, #7
 800abfa:	1d23      	adds	r3, r4, #4
 800abfc:	1af2      	subs	r2, r6, r3
 800abfe:	d0b6      	beq.n	800ab6e <_malloc_r+0x22>
 800ac00:	1b9b      	subs	r3, r3, r6
 800ac02:	50a3      	str	r3, [r4, r2]
 800ac04:	e7b3      	b.n	800ab6e <_malloc_r+0x22>
 800ac06:	6862      	ldr	r2, [r4, #4]
 800ac08:	42a3      	cmp	r3, r4
 800ac0a:	bf0c      	ite	eq
 800ac0c:	6032      	streq	r2, [r6, #0]
 800ac0e:	605a      	strne	r2, [r3, #4]
 800ac10:	e7ec      	b.n	800abec <_malloc_r+0xa0>
 800ac12:	4623      	mov	r3, r4
 800ac14:	6864      	ldr	r4, [r4, #4]
 800ac16:	e7b2      	b.n	800ab7e <_malloc_r+0x32>
 800ac18:	4634      	mov	r4, r6
 800ac1a:	6876      	ldr	r6, [r6, #4]
 800ac1c:	e7b9      	b.n	800ab92 <_malloc_r+0x46>
 800ac1e:	230c      	movs	r3, #12
 800ac20:	603b      	str	r3, [r7, #0]
 800ac22:	4638      	mov	r0, r7
 800ac24:	f000 f9ee 	bl	800b004 <__malloc_unlock>
 800ac28:	e7a1      	b.n	800ab6e <_malloc_r+0x22>
 800ac2a:	6025      	str	r5, [r4, #0]
 800ac2c:	e7de      	b.n	800abec <_malloc_r+0xa0>
 800ac2e:	bf00      	nop
 800ac30:	200047f4 	.word	0x200047f4

0800ac34 <__ssputs_r>:
 800ac34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac38:	688e      	ldr	r6, [r1, #8]
 800ac3a:	429e      	cmp	r6, r3
 800ac3c:	4682      	mov	sl, r0
 800ac3e:	460c      	mov	r4, r1
 800ac40:	4690      	mov	r8, r2
 800ac42:	461f      	mov	r7, r3
 800ac44:	d838      	bhi.n	800acb8 <__ssputs_r+0x84>
 800ac46:	898a      	ldrh	r2, [r1, #12]
 800ac48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac4c:	d032      	beq.n	800acb4 <__ssputs_r+0x80>
 800ac4e:	6825      	ldr	r5, [r4, #0]
 800ac50:	6909      	ldr	r1, [r1, #16]
 800ac52:	eba5 0901 	sub.w	r9, r5, r1
 800ac56:	6965      	ldr	r5, [r4, #20]
 800ac58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac60:	3301      	adds	r3, #1
 800ac62:	444b      	add	r3, r9
 800ac64:	106d      	asrs	r5, r5, #1
 800ac66:	429d      	cmp	r5, r3
 800ac68:	bf38      	it	cc
 800ac6a:	461d      	movcc	r5, r3
 800ac6c:	0553      	lsls	r3, r2, #21
 800ac6e:	d531      	bpl.n	800acd4 <__ssputs_r+0xa0>
 800ac70:	4629      	mov	r1, r5
 800ac72:	f7ff ff6b 	bl	800ab4c <_malloc_r>
 800ac76:	4606      	mov	r6, r0
 800ac78:	b950      	cbnz	r0, 800ac90 <__ssputs_r+0x5c>
 800ac7a:	230c      	movs	r3, #12
 800ac7c:	f8ca 3000 	str.w	r3, [sl]
 800ac80:	89a3      	ldrh	r3, [r4, #12]
 800ac82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac86:	81a3      	strh	r3, [r4, #12]
 800ac88:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac90:	6921      	ldr	r1, [r4, #16]
 800ac92:	464a      	mov	r2, r9
 800ac94:	f7ff fa08 	bl	800a0a8 <memcpy>
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	6126      	str	r6, [r4, #16]
 800aca6:	6165      	str	r5, [r4, #20]
 800aca8:	444e      	add	r6, r9
 800acaa:	eba5 0509 	sub.w	r5, r5, r9
 800acae:	6026      	str	r6, [r4, #0]
 800acb0:	60a5      	str	r5, [r4, #8]
 800acb2:	463e      	mov	r6, r7
 800acb4:	42be      	cmp	r6, r7
 800acb6:	d900      	bls.n	800acba <__ssputs_r+0x86>
 800acb8:	463e      	mov	r6, r7
 800acba:	6820      	ldr	r0, [r4, #0]
 800acbc:	4632      	mov	r2, r6
 800acbe:	4641      	mov	r1, r8
 800acc0:	f000 f980 	bl	800afc4 <memmove>
 800acc4:	68a3      	ldr	r3, [r4, #8]
 800acc6:	1b9b      	subs	r3, r3, r6
 800acc8:	60a3      	str	r3, [r4, #8]
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	4433      	add	r3, r6
 800acce:	6023      	str	r3, [r4, #0]
 800acd0:	2000      	movs	r0, #0
 800acd2:	e7db      	b.n	800ac8c <__ssputs_r+0x58>
 800acd4:	462a      	mov	r2, r5
 800acd6:	f000 f99b 	bl	800b010 <_realloc_r>
 800acda:	4606      	mov	r6, r0
 800acdc:	2800      	cmp	r0, #0
 800acde:	d1e1      	bne.n	800aca4 <__ssputs_r+0x70>
 800ace0:	6921      	ldr	r1, [r4, #16]
 800ace2:	4650      	mov	r0, sl
 800ace4:	f7ff fec6 	bl	800aa74 <_free_r>
 800ace8:	e7c7      	b.n	800ac7a <__ssputs_r+0x46>
	...

0800acec <_svfiprintf_r>:
 800acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	4698      	mov	r8, r3
 800acf2:	898b      	ldrh	r3, [r1, #12]
 800acf4:	061b      	lsls	r3, r3, #24
 800acf6:	b09d      	sub	sp, #116	; 0x74
 800acf8:	4607      	mov	r7, r0
 800acfa:	460d      	mov	r5, r1
 800acfc:	4614      	mov	r4, r2
 800acfe:	d50e      	bpl.n	800ad1e <_svfiprintf_r+0x32>
 800ad00:	690b      	ldr	r3, [r1, #16]
 800ad02:	b963      	cbnz	r3, 800ad1e <_svfiprintf_r+0x32>
 800ad04:	2140      	movs	r1, #64	; 0x40
 800ad06:	f7ff ff21 	bl	800ab4c <_malloc_r>
 800ad0a:	6028      	str	r0, [r5, #0]
 800ad0c:	6128      	str	r0, [r5, #16]
 800ad0e:	b920      	cbnz	r0, 800ad1a <_svfiprintf_r+0x2e>
 800ad10:	230c      	movs	r3, #12
 800ad12:	603b      	str	r3, [r7, #0]
 800ad14:	f04f 30ff 	mov.w	r0, #4294967295
 800ad18:	e0d1      	b.n	800aebe <_svfiprintf_r+0x1d2>
 800ad1a:	2340      	movs	r3, #64	; 0x40
 800ad1c:	616b      	str	r3, [r5, #20]
 800ad1e:	2300      	movs	r3, #0
 800ad20:	9309      	str	r3, [sp, #36]	; 0x24
 800ad22:	2320      	movs	r3, #32
 800ad24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad28:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad2c:	2330      	movs	r3, #48	; 0x30
 800ad2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aed8 <_svfiprintf_r+0x1ec>
 800ad32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad36:	f04f 0901 	mov.w	r9, #1
 800ad3a:	4623      	mov	r3, r4
 800ad3c:	469a      	mov	sl, r3
 800ad3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad42:	b10a      	cbz	r2, 800ad48 <_svfiprintf_r+0x5c>
 800ad44:	2a25      	cmp	r2, #37	; 0x25
 800ad46:	d1f9      	bne.n	800ad3c <_svfiprintf_r+0x50>
 800ad48:	ebba 0b04 	subs.w	fp, sl, r4
 800ad4c:	d00b      	beq.n	800ad66 <_svfiprintf_r+0x7a>
 800ad4e:	465b      	mov	r3, fp
 800ad50:	4622      	mov	r2, r4
 800ad52:	4629      	mov	r1, r5
 800ad54:	4638      	mov	r0, r7
 800ad56:	f7ff ff6d 	bl	800ac34 <__ssputs_r>
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	f000 80aa 	beq.w	800aeb4 <_svfiprintf_r+0x1c8>
 800ad60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad62:	445a      	add	r2, fp
 800ad64:	9209      	str	r2, [sp, #36]	; 0x24
 800ad66:	f89a 3000 	ldrb.w	r3, [sl]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f000 80a2 	beq.w	800aeb4 <_svfiprintf_r+0x1c8>
 800ad70:	2300      	movs	r3, #0
 800ad72:	f04f 32ff 	mov.w	r2, #4294967295
 800ad76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad7a:	f10a 0a01 	add.w	sl, sl, #1
 800ad7e:	9304      	str	r3, [sp, #16]
 800ad80:	9307      	str	r3, [sp, #28]
 800ad82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad86:	931a      	str	r3, [sp, #104]	; 0x68
 800ad88:	4654      	mov	r4, sl
 800ad8a:	2205      	movs	r2, #5
 800ad8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad90:	4851      	ldr	r0, [pc, #324]	; (800aed8 <_svfiprintf_r+0x1ec>)
 800ad92:	f7f5 fa25 	bl	80001e0 <memchr>
 800ad96:	9a04      	ldr	r2, [sp, #16]
 800ad98:	b9d8      	cbnz	r0, 800add2 <_svfiprintf_r+0xe6>
 800ad9a:	06d0      	lsls	r0, r2, #27
 800ad9c:	bf44      	itt	mi
 800ad9e:	2320      	movmi	r3, #32
 800ada0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ada4:	0711      	lsls	r1, r2, #28
 800ada6:	bf44      	itt	mi
 800ada8:	232b      	movmi	r3, #43	; 0x2b
 800adaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adae:	f89a 3000 	ldrb.w	r3, [sl]
 800adb2:	2b2a      	cmp	r3, #42	; 0x2a
 800adb4:	d015      	beq.n	800ade2 <_svfiprintf_r+0xf6>
 800adb6:	9a07      	ldr	r2, [sp, #28]
 800adb8:	4654      	mov	r4, sl
 800adba:	2000      	movs	r0, #0
 800adbc:	f04f 0c0a 	mov.w	ip, #10
 800adc0:	4621      	mov	r1, r4
 800adc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adc6:	3b30      	subs	r3, #48	; 0x30
 800adc8:	2b09      	cmp	r3, #9
 800adca:	d94e      	bls.n	800ae6a <_svfiprintf_r+0x17e>
 800adcc:	b1b0      	cbz	r0, 800adfc <_svfiprintf_r+0x110>
 800adce:	9207      	str	r2, [sp, #28]
 800add0:	e014      	b.n	800adfc <_svfiprintf_r+0x110>
 800add2:	eba0 0308 	sub.w	r3, r0, r8
 800add6:	fa09 f303 	lsl.w	r3, r9, r3
 800adda:	4313      	orrs	r3, r2
 800addc:	9304      	str	r3, [sp, #16]
 800adde:	46a2      	mov	sl, r4
 800ade0:	e7d2      	b.n	800ad88 <_svfiprintf_r+0x9c>
 800ade2:	9b03      	ldr	r3, [sp, #12]
 800ade4:	1d19      	adds	r1, r3, #4
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	9103      	str	r1, [sp, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	bfbb      	ittet	lt
 800adee:	425b      	neglt	r3, r3
 800adf0:	f042 0202 	orrlt.w	r2, r2, #2
 800adf4:	9307      	strge	r3, [sp, #28]
 800adf6:	9307      	strlt	r3, [sp, #28]
 800adf8:	bfb8      	it	lt
 800adfa:	9204      	strlt	r2, [sp, #16]
 800adfc:	7823      	ldrb	r3, [r4, #0]
 800adfe:	2b2e      	cmp	r3, #46	; 0x2e
 800ae00:	d10c      	bne.n	800ae1c <_svfiprintf_r+0x130>
 800ae02:	7863      	ldrb	r3, [r4, #1]
 800ae04:	2b2a      	cmp	r3, #42	; 0x2a
 800ae06:	d135      	bne.n	800ae74 <_svfiprintf_r+0x188>
 800ae08:	9b03      	ldr	r3, [sp, #12]
 800ae0a:	1d1a      	adds	r2, r3, #4
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	9203      	str	r2, [sp, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	bfb8      	it	lt
 800ae14:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae18:	3402      	adds	r4, #2
 800ae1a:	9305      	str	r3, [sp, #20]
 800ae1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aee8 <_svfiprintf_r+0x1fc>
 800ae20:	7821      	ldrb	r1, [r4, #0]
 800ae22:	2203      	movs	r2, #3
 800ae24:	4650      	mov	r0, sl
 800ae26:	f7f5 f9db 	bl	80001e0 <memchr>
 800ae2a:	b140      	cbz	r0, 800ae3e <_svfiprintf_r+0x152>
 800ae2c:	2340      	movs	r3, #64	; 0x40
 800ae2e:	eba0 000a 	sub.w	r0, r0, sl
 800ae32:	fa03 f000 	lsl.w	r0, r3, r0
 800ae36:	9b04      	ldr	r3, [sp, #16]
 800ae38:	4303      	orrs	r3, r0
 800ae3a:	3401      	adds	r4, #1
 800ae3c:	9304      	str	r3, [sp, #16]
 800ae3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae42:	4826      	ldr	r0, [pc, #152]	; (800aedc <_svfiprintf_r+0x1f0>)
 800ae44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae48:	2206      	movs	r2, #6
 800ae4a:	f7f5 f9c9 	bl	80001e0 <memchr>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d038      	beq.n	800aec4 <_svfiprintf_r+0x1d8>
 800ae52:	4b23      	ldr	r3, [pc, #140]	; (800aee0 <_svfiprintf_r+0x1f4>)
 800ae54:	bb1b      	cbnz	r3, 800ae9e <_svfiprintf_r+0x1b2>
 800ae56:	9b03      	ldr	r3, [sp, #12]
 800ae58:	3307      	adds	r3, #7
 800ae5a:	f023 0307 	bic.w	r3, r3, #7
 800ae5e:	3308      	adds	r3, #8
 800ae60:	9303      	str	r3, [sp, #12]
 800ae62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae64:	4433      	add	r3, r6
 800ae66:	9309      	str	r3, [sp, #36]	; 0x24
 800ae68:	e767      	b.n	800ad3a <_svfiprintf_r+0x4e>
 800ae6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae6e:	460c      	mov	r4, r1
 800ae70:	2001      	movs	r0, #1
 800ae72:	e7a5      	b.n	800adc0 <_svfiprintf_r+0xd4>
 800ae74:	2300      	movs	r3, #0
 800ae76:	3401      	adds	r4, #1
 800ae78:	9305      	str	r3, [sp, #20]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	f04f 0c0a 	mov.w	ip, #10
 800ae80:	4620      	mov	r0, r4
 800ae82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae86:	3a30      	subs	r2, #48	; 0x30
 800ae88:	2a09      	cmp	r2, #9
 800ae8a:	d903      	bls.n	800ae94 <_svfiprintf_r+0x1a8>
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d0c5      	beq.n	800ae1c <_svfiprintf_r+0x130>
 800ae90:	9105      	str	r1, [sp, #20]
 800ae92:	e7c3      	b.n	800ae1c <_svfiprintf_r+0x130>
 800ae94:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae98:	4604      	mov	r4, r0
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e7f0      	b.n	800ae80 <_svfiprintf_r+0x194>
 800ae9e:	ab03      	add	r3, sp, #12
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	462a      	mov	r2, r5
 800aea4:	4b0f      	ldr	r3, [pc, #60]	; (800aee4 <_svfiprintf_r+0x1f8>)
 800aea6:	a904      	add	r1, sp, #16
 800aea8:	4638      	mov	r0, r7
 800aeaa:	f7fc fa3b 	bl	8007324 <_printf_float>
 800aeae:	1c42      	adds	r2, r0, #1
 800aeb0:	4606      	mov	r6, r0
 800aeb2:	d1d6      	bne.n	800ae62 <_svfiprintf_r+0x176>
 800aeb4:	89ab      	ldrh	r3, [r5, #12]
 800aeb6:	065b      	lsls	r3, r3, #25
 800aeb8:	f53f af2c 	bmi.w	800ad14 <_svfiprintf_r+0x28>
 800aebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aebe:	b01d      	add	sp, #116	; 0x74
 800aec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec4:	ab03      	add	r3, sp, #12
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	462a      	mov	r2, r5
 800aeca:	4b06      	ldr	r3, [pc, #24]	; (800aee4 <_svfiprintf_r+0x1f8>)
 800aecc:	a904      	add	r1, sp, #16
 800aece:	4638      	mov	r0, r7
 800aed0:	f7fc fccc 	bl	800786c <_printf_i>
 800aed4:	e7eb      	b.n	800aeae <_svfiprintf_r+0x1c2>
 800aed6:	bf00      	nop
 800aed8:	0800c14c 	.word	0x0800c14c
 800aedc:	0800c156 	.word	0x0800c156
 800aee0:	08007325 	.word	0x08007325
 800aee4:	0800ac35 	.word	0x0800ac35
 800aee8:	0800c152 	.word	0x0800c152
 800aeec:	00000000 	.word	0x00000000

0800aef0 <nan>:
 800aef0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aef8 <nan+0x8>
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	00000000 	.word	0x00000000
 800aefc:	7ff80000 	.word	0x7ff80000

0800af00 <_sbrk_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4d06      	ldr	r5, [pc, #24]	; (800af1c <_sbrk_r+0x1c>)
 800af04:	2300      	movs	r3, #0
 800af06:	4604      	mov	r4, r0
 800af08:	4608      	mov	r0, r1
 800af0a:	602b      	str	r3, [r5, #0]
 800af0c:	f7f7 f942 	bl	8002194 <_sbrk>
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d102      	bne.n	800af1a <_sbrk_r+0x1a>
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	b103      	cbz	r3, 800af1a <_sbrk_r+0x1a>
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	bd38      	pop	{r3, r4, r5, pc}
 800af1c:	200047fc 	.word	0x200047fc

0800af20 <strncmp>:
 800af20:	b510      	push	{r4, lr}
 800af22:	b17a      	cbz	r2, 800af44 <strncmp+0x24>
 800af24:	4603      	mov	r3, r0
 800af26:	3901      	subs	r1, #1
 800af28:	1884      	adds	r4, r0, r2
 800af2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af32:	4290      	cmp	r0, r2
 800af34:	d101      	bne.n	800af3a <strncmp+0x1a>
 800af36:	42a3      	cmp	r3, r4
 800af38:	d101      	bne.n	800af3e <strncmp+0x1e>
 800af3a:	1a80      	subs	r0, r0, r2
 800af3c:	bd10      	pop	{r4, pc}
 800af3e:	2800      	cmp	r0, #0
 800af40:	d1f3      	bne.n	800af2a <strncmp+0xa>
 800af42:	e7fa      	b.n	800af3a <strncmp+0x1a>
 800af44:	4610      	mov	r0, r2
 800af46:	e7f9      	b.n	800af3c <strncmp+0x1c>

0800af48 <__ascii_wctomb>:
 800af48:	b149      	cbz	r1, 800af5e <__ascii_wctomb+0x16>
 800af4a:	2aff      	cmp	r2, #255	; 0xff
 800af4c:	bf85      	ittet	hi
 800af4e:	238a      	movhi	r3, #138	; 0x8a
 800af50:	6003      	strhi	r3, [r0, #0]
 800af52:	700a      	strbls	r2, [r1, #0]
 800af54:	f04f 30ff 	movhi.w	r0, #4294967295
 800af58:	bf98      	it	ls
 800af5a:	2001      	movls	r0, #1
 800af5c:	4770      	bx	lr
 800af5e:	4608      	mov	r0, r1
 800af60:	4770      	bx	lr
	...

0800af64 <__assert_func>:
 800af64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af66:	4614      	mov	r4, r2
 800af68:	461a      	mov	r2, r3
 800af6a:	4b09      	ldr	r3, [pc, #36]	; (800af90 <__assert_func+0x2c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4605      	mov	r5, r0
 800af70:	68d8      	ldr	r0, [r3, #12]
 800af72:	b14c      	cbz	r4, 800af88 <__assert_func+0x24>
 800af74:	4b07      	ldr	r3, [pc, #28]	; (800af94 <__assert_func+0x30>)
 800af76:	9100      	str	r1, [sp, #0]
 800af78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af7c:	4906      	ldr	r1, [pc, #24]	; (800af98 <__assert_func+0x34>)
 800af7e:	462b      	mov	r3, r5
 800af80:	f000 f80e 	bl	800afa0 <fiprintf>
 800af84:	f000 fa8c 	bl	800b4a0 <abort>
 800af88:	4b04      	ldr	r3, [pc, #16]	; (800af9c <__assert_func+0x38>)
 800af8a:	461c      	mov	r4, r3
 800af8c:	e7f3      	b.n	800af76 <__assert_func+0x12>
 800af8e:	bf00      	nop
 800af90:	20000028 	.word	0x20000028
 800af94:	0800c15d 	.word	0x0800c15d
 800af98:	0800c16a 	.word	0x0800c16a
 800af9c:	0800c198 	.word	0x0800c198

0800afa0 <fiprintf>:
 800afa0:	b40e      	push	{r1, r2, r3}
 800afa2:	b503      	push	{r0, r1, lr}
 800afa4:	4601      	mov	r1, r0
 800afa6:	ab03      	add	r3, sp, #12
 800afa8:	4805      	ldr	r0, [pc, #20]	; (800afc0 <fiprintf+0x20>)
 800afaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800afae:	6800      	ldr	r0, [r0, #0]
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	f000 f885 	bl	800b0c0 <_vfiprintf_r>
 800afb6:	b002      	add	sp, #8
 800afb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afbc:	b003      	add	sp, #12
 800afbe:	4770      	bx	lr
 800afc0:	20000028 	.word	0x20000028

0800afc4 <memmove>:
 800afc4:	4288      	cmp	r0, r1
 800afc6:	b510      	push	{r4, lr}
 800afc8:	eb01 0402 	add.w	r4, r1, r2
 800afcc:	d902      	bls.n	800afd4 <memmove+0x10>
 800afce:	4284      	cmp	r4, r0
 800afd0:	4623      	mov	r3, r4
 800afd2:	d807      	bhi.n	800afe4 <memmove+0x20>
 800afd4:	1e43      	subs	r3, r0, #1
 800afd6:	42a1      	cmp	r1, r4
 800afd8:	d008      	beq.n	800afec <memmove+0x28>
 800afda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afe2:	e7f8      	b.n	800afd6 <memmove+0x12>
 800afe4:	4402      	add	r2, r0
 800afe6:	4601      	mov	r1, r0
 800afe8:	428a      	cmp	r2, r1
 800afea:	d100      	bne.n	800afee <memmove+0x2a>
 800afec:	bd10      	pop	{r4, pc}
 800afee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aff6:	e7f7      	b.n	800afe8 <memmove+0x24>

0800aff8 <__malloc_lock>:
 800aff8:	4801      	ldr	r0, [pc, #4]	; (800b000 <__malloc_lock+0x8>)
 800affa:	f000 bc11 	b.w	800b820 <__retarget_lock_acquire_recursive>
 800affe:	bf00      	nop
 800b000:	20004800 	.word	0x20004800

0800b004 <__malloc_unlock>:
 800b004:	4801      	ldr	r0, [pc, #4]	; (800b00c <__malloc_unlock+0x8>)
 800b006:	f000 bc0c 	b.w	800b822 <__retarget_lock_release_recursive>
 800b00a:	bf00      	nop
 800b00c:	20004800 	.word	0x20004800

0800b010 <_realloc_r>:
 800b010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b014:	4680      	mov	r8, r0
 800b016:	4614      	mov	r4, r2
 800b018:	460e      	mov	r6, r1
 800b01a:	b921      	cbnz	r1, 800b026 <_realloc_r+0x16>
 800b01c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b020:	4611      	mov	r1, r2
 800b022:	f7ff bd93 	b.w	800ab4c <_malloc_r>
 800b026:	b92a      	cbnz	r2, 800b034 <_realloc_r+0x24>
 800b028:	f7ff fd24 	bl	800aa74 <_free_r>
 800b02c:	4625      	mov	r5, r4
 800b02e:	4628      	mov	r0, r5
 800b030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b034:	f000 fc5c 	bl	800b8f0 <_malloc_usable_size_r>
 800b038:	4284      	cmp	r4, r0
 800b03a:	4607      	mov	r7, r0
 800b03c:	d802      	bhi.n	800b044 <_realloc_r+0x34>
 800b03e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b042:	d812      	bhi.n	800b06a <_realloc_r+0x5a>
 800b044:	4621      	mov	r1, r4
 800b046:	4640      	mov	r0, r8
 800b048:	f7ff fd80 	bl	800ab4c <_malloc_r>
 800b04c:	4605      	mov	r5, r0
 800b04e:	2800      	cmp	r0, #0
 800b050:	d0ed      	beq.n	800b02e <_realloc_r+0x1e>
 800b052:	42bc      	cmp	r4, r7
 800b054:	4622      	mov	r2, r4
 800b056:	4631      	mov	r1, r6
 800b058:	bf28      	it	cs
 800b05a:	463a      	movcs	r2, r7
 800b05c:	f7ff f824 	bl	800a0a8 <memcpy>
 800b060:	4631      	mov	r1, r6
 800b062:	4640      	mov	r0, r8
 800b064:	f7ff fd06 	bl	800aa74 <_free_r>
 800b068:	e7e1      	b.n	800b02e <_realloc_r+0x1e>
 800b06a:	4635      	mov	r5, r6
 800b06c:	e7df      	b.n	800b02e <_realloc_r+0x1e>

0800b06e <__sfputc_r>:
 800b06e:	6893      	ldr	r3, [r2, #8]
 800b070:	3b01      	subs	r3, #1
 800b072:	2b00      	cmp	r3, #0
 800b074:	b410      	push	{r4}
 800b076:	6093      	str	r3, [r2, #8]
 800b078:	da08      	bge.n	800b08c <__sfputc_r+0x1e>
 800b07a:	6994      	ldr	r4, [r2, #24]
 800b07c:	42a3      	cmp	r3, r4
 800b07e:	db01      	blt.n	800b084 <__sfputc_r+0x16>
 800b080:	290a      	cmp	r1, #10
 800b082:	d103      	bne.n	800b08c <__sfputc_r+0x1e>
 800b084:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b088:	f000 b94a 	b.w	800b320 <__swbuf_r>
 800b08c:	6813      	ldr	r3, [r2, #0]
 800b08e:	1c58      	adds	r0, r3, #1
 800b090:	6010      	str	r0, [r2, #0]
 800b092:	7019      	strb	r1, [r3, #0]
 800b094:	4608      	mov	r0, r1
 800b096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <__sfputs_r>:
 800b09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09e:	4606      	mov	r6, r0
 800b0a0:	460f      	mov	r7, r1
 800b0a2:	4614      	mov	r4, r2
 800b0a4:	18d5      	adds	r5, r2, r3
 800b0a6:	42ac      	cmp	r4, r5
 800b0a8:	d101      	bne.n	800b0ae <__sfputs_r+0x12>
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	e007      	b.n	800b0be <__sfputs_r+0x22>
 800b0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b2:	463a      	mov	r2, r7
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f7ff ffda 	bl	800b06e <__sfputc_r>
 800b0ba:	1c43      	adds	r3, r0, #1
 800b0bc:	d1f3      	bne.n	800b0a6 <__sfputs_r+0xa>
 800b0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b0c0 <_vfiprintf_r>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	460d      	mov	r5, r1
 800b0c6:	b09d      	sub	sp, #116	; 0x74
 800b0c8:	4614      	mov	r4, r2
 800b0ca:	4698      	mov	r8, r3
 800b0cc:	4606      	mov	r6, r0
 800b0ce:	b118      	cbz	r0, 800b0d8 <_vfiprintf_r+0x18>
 800b0d0:	6983      	ldr	r3, [r0, #24]
 800b0d2:	b90b      	cbnz	r3, 800b0d8 <_vfiprintf_r+0x18>
 800b0d4:	f000 fb06 	bl	800b6e4 <__sinit>
 800b0d8:	4b89      	ldr	r3, [pc, #548]	; (800b300 <_vfiprintf_r+0x240>)
 800b0da:	429d      	cmp	r5, r3
 800b0dc:	d11b      	bne.n	800b116 <_vfiprintf_r+0x56>
 800b0de:	6875      	ldr	r5, [r6, #4]
 800b0e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0e2:	07d9      	lsls	r1, r3, #31
 800b0e4:	d405      	bmi.n	800b0f2 <_vfiprintf_r+0x32>
 800b0e6:	89ab      	ldrh	r3, [r5, #12]
 800b0e8:	059a      	lsls	r2, r3, #22
 800b0ea:	d402      	bmi.n	800b0f2 <_vfiprintf_r+0x32>
 800b0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0ee:	f000 fb97 	bl	800b820 <__retarget_lock_acquire_recursive>
 800b0f2:	89ab      	ldrh	r3, [r5, #12]
 800b0f4:	071b      	lsls	r3, r3, #28
 800b0f6:	d501      	bpl.n	800b0fc <_vfiprintf_r+0x3c>
 800b0f8:	692b      	ldr	r3, [r5, #16]
 800b0fa:	b9eb      	cbnz	r3, 800b138 <_vfiprintf_r+0x78>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4630      	mov	r0, r6
 800b100:	f000 f960 	bl	800b3c4 <__swsetup_r>
 800b104:	b1c0      	cbz	r0, 800b138 <_vfiprintf_r+0x78>
 800b106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b108:	07dc      	lsls	r4, r3, #31
 800b10a:	d50e      	bpl.n	800b12a <_vfiprintf_r+0x6a>
 800b10c:	f04f 30ff 	mov.w	r0, #4294967295
 800b110:	b01d      	add	sp, #116	; 0x74
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b116:	4b7b      	ldr	r3, [pc, #492]	; (800b304 <_vfiprintf_r+0x244>)
 800b118:	429d      	cmp	r5, r3
 800b11a:	d101      	bne.n	800b120 <_vfiprintf_r+0x60>
 800b11c:	68b5      	ldr	r5, [r6, #8]
 800b11e:	e7df      	b.n	800b0e0 <_vfiprintf_r+0x20>
 800b120:	4b79      	ldr	r3, [pc, #484]	; (800b308 <_vfiprintf_r+0x248>)
 800b122:	429d      	cmp	r5, r3
 800b124:	bf08      	it	eq
 800b126:	68f5      	ldreq	r5, [r6, #12]
 800b128:	e7da      	b.n	800b0e0 <_vfiprintf_r+0x20>
 800b12a:	89ab      	ldrh	r3, [r5, #12]
 800b12c:	0598      	lsls	r0, r3, #22
 800b12e:	d4ed      	bmi.n	800b10c <_vfiprintf_r+0x4c>
 800b130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b132:	f000 fb76 	bl	800b822 <__retarget_lock_release_recursive>
 800b136:	e7e9      	b.n	800b10c <_vfiprintf_r+0x4c>
 800b138:	2300      	movs	r3, #0
 800b13a:	9309      	str	r3, [sp, #36]	; 0x24
 800b13c:	2320      	movs	r3, #32
 800b13e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b142:	f8cd 800c 	str.w	r8, [sp, #12]
 800b146:	2330      	movs	r3, #48	; 0x30
 800b148:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b30c <_vfiprintf_r+0x24c>
 800b14c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b150:	f04f 0901 	mov.w	r9, #1
 800b154:	4623      	mov	r3, r4
 800b156:	469a      	mov	sl, r3
 800b158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b15c:	b10a      	cbz	r2, 800b162 <_vfiprintf_r+0xa2>
 800b15e:	2a25      	cmp	r2, #37	; 0x25
 800b160:	d1f9      	bne.n	800b156 <_vfiprintf_r+0x96>
 800b162:	ebba 0b04 	subs.w	fp, sl, r4
 800b166:	d00b      	beq.n	800b180 <_vfiprintf_r+0xc0>
 800b168:	465b      	mov	r3, fp
 800b16a:	4622      	mov	r2, r4
 800b16c:	4629      	mov	r1, r5
 800b16e:	4630      	mov	r0, r6
 800b170:	f7ff ff94 	bl	800b09c <__sfputs_r>
 800b174:	3001      	adds	r0, #1
 800b176:	f000 80aa 	beq.w	800b2ce <_vfiprintf_r+0x20e>
 800b17a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b17c:	445a      	add	r2, fp
 800b17e:	9209      	str	r2, [sp, #36]	; 0x24
 800b180:	f89a 3000 	ldrb.w	r3, [sl]
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 80a2 	beq.w	800b2ce <_vfiprintf_r+0x20e>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f04f 32ff 	mov.w	r2, #4294967295
 800b190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b194:	f10a 0a01 	add.w	sl, sl, #1
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	9307      	str	r3, [sp, #28]
 800b19c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1a0:	931a      	str	r3, [sp, #104]	; 0x68
 800b1a2:	4654      	mov	r4, sl
 800b1a4:	2205      	movs	r2, #5
 800b1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1aa:	4858      	ldr	r0, [pc, #352]	; (800b30c <_vfiprintf_r+0x24c>)
 800b1ac:	f7f5 f818 	bl	80001e0 <memchr>
 800b1b0:	9a04      	ldr	r2, [sp, #16]
 800b1b2:	b9d8      	cbnz	r0, 800b1ec <_vfiprintf_r+0x12c>
 800b1b4:	06d1      	lsls	r1, r2, #27
 800b1b6:	bf44      	itt	mi
 800b1b8:	2320      	movmi	r3, #32
 800b1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1be:	0713      	lsls	r3, r2, #28
 800b1c0:	bf44      	itt	mi
 800b1c2:	232b      	movmi	r3, #43	; 0x2b
 800b1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1cc:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ce:	d015      	beq.n	800b1fc <_vfiprintf_r+0x13c>
 800b1d0:	9a07      	ldr	r2, [sp, #28]
 800b1d2:	4654      	mov	r4, sl
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	f04f 0c0a 	mov.w	ip, #10
 800b1da:	4621      	mov	r1, r4
 800b1dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1e0:	3b30      	subs	r3, #48	; 0x30
 800b1e2:	2b09      	cmp	r3, #9
 800b1e4:	d94e      	bls.n	800b284 <_vfiprintf_r+0x1c4>
 800b1e6:	b1b0      	cbz	r0, 800b216 <_vfiprintf_r+0x156>
 800b1e8:	9207      	str	r2, [sp, #28]
 800b1ea:	e014      	b.n	800b216 <_vfiprintf_r+0x156>
 800b1ec:	eba0 0308 	sub.w	r3, r0, r8
 800b1f0:	fa09 f303 	lsl.w	r3, r9, r3
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	9304      	str	r3, [sp, #16]
 800b1f8:	46a2      	mov	sl, r4
 800b1fa:	e7d2      	b.n	800b1a2 <_vfiprintf_r+0xe2>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	1d19      	adds	r1, r3, #4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	9103      	str	r1, [sp, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	bfbb      	ittet	lt
 800b208:	425b      	neglt	r3, r3
 800b20a:	f042 0202 	orrlt.w	r2, r2, #2
 800b20e:	9307      	strge	r3, [sp, #28]
 800b210:	9307      	strlt	r3, [sp, #28]
 800b212:	bfb8      	it	lt
 800b214:	9204      	strlt	r2, [sp, #16]
 800b216:	7823      	ldrb	r3, [r4, #0]
 800b218:	2b2e      	cmp	r3, #46	; 0x2e
 800b21a:	d10c      	bne.n	800b236 <_vfiprintf_r+0x176>
 800b21c:	7863      	ldrb	r3, [r4, #1]
 800b21e:	2b2a      	cmp	r3, #42	; 0x2a
 800b220:	d135      	bne.n	800b28e <_vfiprintf_r+0x1ce>
 800b222:	9b03      	ldr	r3, [sp, #12]
 800b224:	1d1a      	adds	r2, r3, #4
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	9203      	str	r2, [sp, #12]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	bfb8      	it	lt
 800b22e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b232:	3402      	adds	r4, #2
 800b234:	9305      	str	r3, [sp, #20]
 800b236:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b31c <_vfiprintf_r+0x25c>
 800b23a:	7821      	ldrb	r1, [r4, #0]
 800b23c:	2203      	movs	r2, #3
 800b23e:	4650      	mov	r0, sl
 800b240:	f7f4 ffce 	bl	80001e0 <memchr>
 800b244:	b140      	cbz	r0, 800b258 <_vfiprintf_r+0x198>
 800b246:	2340      	movs	r3, #64	; 0x40
 800b248:	eba0 000a 	sub.w	r0, r0, sl
 800b24c:	fa03 f000 	lsl.w	r0, r3, r0
 800b250:	9b04      	ldr	r3, [sp, #16]
 800b252:	4303      	orrs	r3, r0
 800b254:	3401      	adds	r4, #1
 800b256:	9304      	str	r3, [sp, #16]
 800b258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25c:	482c      	ldr	r0, [pc, #176]	; (800b310 <_vfiprintf_r+0x250>)
 800b25e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b262:	2206      	movs	r2, #6
 800b264:	f7f4 ffbc 	bl	80001e0 <memchr>
 800b268:	2800      	cmp	r0, #0
 800b26a:	d03f      	beq.n	800b2ec <_vfiprintf_r+0x22c>
 800b26c:	4b29      	ldr	r3, [pc, #164]	; (800b314 <_vfiprintf_r+0x254>)
 800b26e:	bb1b      	cbnz	r3, 800b2b8 <_vfiprintf_r+0x1f8>
 800b270:	9b03      	ldr	r3, [sp, #12]
 800b272:	3307      	adds	r3, #7
 800b274:	f023 0307 	bic.w	r3, r3, #7
 800b278:	3308      	adds	r3, #8
 800b27a:	9303      	str	r3, [sp, #12]
 800b27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b27e:	443b      	add	r3, r7
 800b280:	9309      	str	r3, [sp, #36]	; 0x24
 800b282:	e767      	b.n	800b154 <_vfiprintf_r+0x94>
 800b284:	fb0c 3202 	mla	r2, ip, r2, r3
 800b288:	460c      	mov	r4, r1
 800b28a:	2001      	movs	r0, #1
 800b28c:	e7a5      	b.n	800b1da <_vfiprintf_r+0x11a>
 800b28e:	2300      	movs	r3, #0
 800b290:	3401      	adds	r4, #1
 800b292:	9305      	str	r3, [sp, #20]
 800b294:	4619      	mov	r1, r3
 800b296:	f04f 0c0a 	mov.w	ip, #10
 800b29a:	4620      	mov	r0, r4
 800b29c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2a0:	3a30      	subs	r2, #48	; 0x30
 800b2a2:	2a09      	cmp	r2, #9
 800b2a4:	d903      	bls.n	800b2ae <_vfiprintf_r+0x1ee>
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d0c5      	beq.n	800b236 <_vfiprintf_r+0x176>
 800b2aa:	9105      	str	r1, [sp, #20]
 800b2ac:	e7c3      	b.n	800b236 <_vfiprintf_r+0x176>
 800b2ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e7f0      	b.n	800b29a <_vfiprintf_r+0x1da>
 800b2b8:	ab03      	add	r3, sp, #12
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	462a      	mov	r2, r5
 800b2be:	4b16      	ldr	r3, [pc, #88]	; (800b318 <_vfiprintf_r+0x258>)
 800b2c0:	a904      	add	r1, sp, #16
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f7fc f82e 	bl	8007324 <_printf_float>
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	1c78      	adds	r0, r7, #1
 800b2cc:	d1d6      	bne.n	800b27c <_vfiprintf_r+0x1bc>
 800b2ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2d0:	07d9      	lsls	r1, r3, #31
 800b2d2:	d405      	bmi.n	800b2e0 <_vfiprintf_r+0x220>
 800b2d4:	89ab      	ldrh	r3, [r5, #12]
 800b2d6:	059a      	lsls	r2, r3, #22
 800b2d8:	d402      	bmi.n	800b2e0 <_vfiprintf_r+0x220>
 800b2da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2dc:	f000 faa1 	bl	800b822 <__retarget_lock_release_recursive>
 800b2e0:	89ab      	ldrh	r3, [r5, #12]
 800b2e2:	065b      	lsls	r3, r3, #25
 800b2e4:	f53f af12 	bmi.w	800b10c <_vfiprintf_r+0x4c>
 800b2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2ea:	e711      	b.n	800b110 <_vfiprintf_r+0x50>
 800b2ec:	ab03      	add	r3, sp, #12
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	462a      	mov	r2, r5
 800b2f2:	4b09      	ldr	r3, [pc, #36]	; (800b318 <_vfiprintf_r+0x258>)
 800b2f4:	a904      	add	r1, sp, #16
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f7fc fab8 	bl	800786c <_printf_i>
 800b2fc:	e7e4      	b.n	800b2c8 <_vfiprintf_r+0x208>
 800b2fe:	bf00      	nop
 800b300:	0800c1bc 	.word	0x0800c1bc
 800b304:	0800c1dc 	.word	0x0800c1dc
 800b308:	0800c19c 	.word	0x0800c19c
 800b30c:	0800c14c 	.word	0x0800c14c
 800b310:	0800c156 	.word	0x0800c156
 800b314:	08007325 	.word	0x08007325
 800b318:	0800b09d 	.word	0x0800b09d
 800b31c:	0800c152 	.word	0x0800c152

0800b320 <__swbuf_r>:
 800b320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b322:	460e      	mov	r6, r1
 800b324:	4614      	mov	r4, r2
 800b326:	4605      	mov	r5, r0
 800b328:	b118      	cbz	r0, 800b332 <__swbuf_r+0x12>
 800b32a:	6983      	ldr	r3, [r0, #24]
 800b32c:	b90b      	cbnz	r3, 800b332 <__swbuf_r+0x12>
 800b32e:	f000 f9d9 	bl	800b6e4 <__sinit>
 800b332:	4b21      	ldr	r3, [pc, #132]	; (800b3b8 <__swbuf_r+0x98>)
 800b334:	429c      	cmp	r4, r3
 800b336:	d12b      	bne.n	800b390 <__swbuf_r+0x70>
 800b338:	686c      	ldr	r4, [r5, #4]
 800b33a:	69a3      	ldr	r3, [r4, #24]
 800b33c:	60a3      	str	r3, [r4, #8]
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	071a      	lsls	r2, r3, #28
 800b342:	d52f      	bpl.n	800b3a4 <__swbuf_r+0x84>
 800b344:	6923      	ldr	r3, [r4, #16]
 800b346:	b36b      	cbz	r3, 800b3a4 <__swbuf_r+0x84>
 800b348:	6923      	ldr	r3, [r4, #16]
 800b34a:	6820      	ldr	r0, [r4, #0]
 800b34c:	1ac0      	subs	r0, r0, r3
 800b34e:	6963      	ldr	r3, [r4, #20]
 800b350:	b2f6      	uxtb	r6, r6
 800b352:	4283      	cmp	r3, r0
 800b354:	4637      	mov	r7, r6
 800b356:	dc04      	bgt.n	800b362 <__swbuf_r+0x42>
 800b358:	4621      	mov	r1, r4
 800b35a:	4628      	mov	r0, r5
 800b35c:	f000 f92e 	bl	800b5bc <_fflush_r>
 800b360:	bb30      	cbnz	r0, 800b3b0 <__swbuf_r+0x90>
 800b362:	68a3      	ldr	r3, [r4, #8]
 800b364:	3b01      	subs	r3, #1
 800b366:	60a3      	str	r3, [r4, #8]
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	6022      	str	r2, [r4, #0]
 800b36e:	701e      	strb	r6, [r3, #0]
 800b370:	6963      	ldr	r3, [r4, #20]
 800b372:	3001      	adds	r0, #1
 800b374:	4283      	cmp	r3, r0
 800b376:	d004      	beq.n	800b382 <__swbuf_r+0x62>
 800b378:	89a3      	ldrh	r3, [r4, #12]
 800b37a:	07db      	lsls	r3, r3, #31
 800b37c:	d506      	bpl.n	800b38c <__swbuf_r+0x6c>
 800b37e:	2e0a      	cmp	r6, #10
 800b380:	d104      	bne.n	800b38c <__swbuf_r+0x6c>
 800b382:	4621      	mov	r1, r4
 800b384:	4628      	mov	r0, r5
 800b386:	f000 f919 	bl	800b5bc <_fflush_r>
 800b38a:	b988      	cbnz	r0, 800b3b0 <__swbuf_r+0x90>
 800b38c:	4638      	mov	r0, r7
 800b38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b390:	4b0a      	ldr	r3, [pc, #40]	; (800b3bc <__swbuf_r+0x9c>)
 800b392:	429c      	cmp	r4, r3
 800b394:	d101      	bne.n	800b39a <__swbuf_r+0x7a>
 800b396:	68ac      	ldr	r4, [r5, #8]
 800b398:	e7cf      	b.n	800b33a <__swbuf_r+0x1a>
 800b39a:	4b09      	ldr	r3, [pc, #36]	; (800b3c0 <__swbuf_r+0xa0>)
 800b39c:	429c      	cmp	r4, r3
 800b39e:	bf08      	it	eq
 800b3a0:	68ec      	ldreq	r4, [r5, #12]
 800b3a2:	e7ca      	b.n	800b33a <__swbuf_r+0x1a>
 800b3a4:	4621      	mov	r1, r4
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	f000 f80c 	bl	800b3c4 <__swsetup_r>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d0cb      	beq.n	800b348 <__swbuf_r+0x28>
 800b3b0:	f04f 37ff 	mov.w	r7, #4294967295
 800b3b4:	e7ea      	b.n	800b38c <__swbuf_r+0x6c>
 800b3b6:	bf00      	nop
 800b3b8:	0800c1bc 	.word	0x0800c1bc
 800b3bc:	0800c1dc 	.word	0x0800c1dc
 800b3c0:	0800c19c 	.word	0x0800c19c

0800b3c4 <__swsetup_r>:
 800b3c4:	4b32      	ldr	r3, [pc, #200]	; (800b490 <__swsetup_r+0xcc>)
 800b3c6:	b570      	push	{r4, r5, r6, lr}
 800b3c8:	681d      	ldr	r5, [r3, #0]
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	460c      	mov	r4, r1
 800b3ce:	b125      	cbz	r5, 800b3da <__swsetup_r+0x16>
 800b3d0:	69ab      	ldr	r3, [r5, #24]
 800b3d2:	b913      	cbnz	r3, 800b3da <__swsetup_r+0x16>
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	f000 f985 	bl	800b6e4 <__sinit>
 800b3da:	4b2e      	ldr	r3, [pc, #184]	; (800b494 <__swsetup_r+0xd0>)
 800b3dc:	429c      	cmp	r4, r3
 800b3de:	d10f      	bne.n	800b400 <__swsetup_r+0x3c>
 800b3e0:	686c      	ldr	r4, [r5, #4]
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3e8:	0719      	lsls	r1, r3, #28
 800b3ea:	d42c      	bmi.n	800b446 <__swsetup_r+0x82>
 800b3ec:	06dd      	lsls	r5, r3, #27
 800b3ee:	d411      	bmi.n	800b414 <__swsetup_r+0x50>
 800b3f0:	2309      	movs	r3, #9
 800b3f2:	6033      	str	r3, [r6, #0]
 800b3f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3f8:	81a3      	strh	r3, [r4, #12]
 800b3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b3fe:	e03e      	b.n	800b47e <__swsetup_r+0xba>
 800b400:	4b25      	ldr	r3, [pc, #148]	; (800b498 <__swsetup_r+0xd4>)
 800b402:	429c      	cmp	r4, r3
 800b404:	d101      	bne.n	800b40a <__swsetup_r+0x46>
 800b406:	68ac      	ldr	r4, [r5, #8]
 800b408:	e7eb      	b.n	800b3e2 <__swsetup_r+0x1e>
 800b40a:	4b24      	ldr	r3, [pc, #144]	; (800b49c <__swsetup_r+0xd8>)
 800b40c:	429c      	cmp	r4, r3
 800b40e:	bf08      	it	eq
 800b410:	68ec      	ldreq	r4, [r5, #12]
 800b412:	e7e6      	b.n	800b3e2 <__swsetup_r+0x1e>
 800b414:	0758      	lsls	r0, r3, #29
 800b416:	d512      	bpl.n	800b43e <__swsetup_r+0x7a>
 800b418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b41a:	b141      	cbz	r1, 800b42e <__swsetup_r+0x6a>
 800b41c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b420:	4299      	cmp	r1, r3
 800b422:	d002      	beq.n	800b42a <__swsetup_r+0x66>
 800b424:	4630      	mov	r0, r6
 800b426:	f7ff fb25 	bl	800aa74 <_free_r>
 800b42a:	2300      	movs	r3, #0
 800b42c:	6363      	str	r3, [r4, #52]	; 0x34
 800b42e:	89a3      	ldrh	r3, [r4, #12]
 800b430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b434:	81a3      	strh	r3, [r4, #12]
 800b436:	2300      	movs	r3, #0
 800b438:	6063      	str	r3, [r4, #4]
 800b43a:	6923      	ldr	r3, [r4, #16]
 800b43c:	6023      	str	r3, [r4, #0]
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	f043 0308 	orr.w	r3, r3, #8
 800b444:	81a3      	strh	r3, [r4, #12]
 800b446:	6923      	ldr	r3, [r4, #16]
 800b448:	b94b      	cbnz	r3, 800b45e <__swsetup_r+0x9a>
 800b44a:	89a3      	ldrh	r3, [r4, #12]
 800b44c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b454:	d003      	beq.n	800b45e <__swsetup_r+0x9a>
 800b456:	4621      	mov	r1, r4
 800b458:	4630      	mov	r0, r6
 800b45a:	f000 fa09 	bl	800b870 <__smakebuf_r>
 800b45e:	89a0      	ldrh	r0, [r4, #12]
 800b460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b464:	f010 0301 	ands.w	r3, r0, #1
 800b468:	d00a      	beq.n	800b480 <__swsetup_r+0xbc>
 800b46a:	2300      	movs	r3, #0
 800b46c:	60a3      	str	r3, [r4, #8]
 800b46e:	6963      	ldr	r3, [r4, #20]
 800b470:	425b      	negs	r3, r3
 800b472:	61a3      	str	r3, [r4, #24]
 800b474:	6923      	ldr	r3, [r4, #16]
 800b476:	b943      	cbnz	r3, 800b48a <__swsetup_r+0xc6>
 800b478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b47c:	d1ba      	bne.n	800b3f4 <__swsetup_r+0x30>
 800b47e:	bd70      	pop	{r4, r5, r6, pc}
 800b480:	0781      	lsls	r1, r0, #30
 800b482:	bf58      	it	pl
 800b484:	6963      	ldrpl	r3, [r4, #20]
 800b486:	60a3      	str	r3, [r4, #8]
 800b488:	e7f4      	b.n	800b474 <__swsetup_r+0xb0>
 800b48a:	2000      	movs	r0, #0
 800b48c:	e7f7      	b.n	800b47e <__swsetup_r+0xba>
 800b48e:	bf00      	nop
 800b490:	20000028 	.word	0x20000028
 800b494:	0800c1bc 	.word	0x0800c1bc
 800b498:	0800c1dc 	.word	0x0800c1dc
 800b49c:	0800c19c 	.word	0x0800c19c

0800b4a0 <abort>:
 800b4a0:	b508      	push	{r3, lr}
 800b4a2:	2006      	movs	r0, #6
 800b4a4:	f000 fa54 	bl	800b950 <raise>
 800b4a8:	2001      	movs	r0, #1
 800b4aa:	f7f6 fdfb 	bl	80020a4 <_exit>
	...

0800b4b0 <__sflush_r>:
 800b4b0:	898a      	ldrh	r2, [r1, #12]
 800b4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	0710      	lsls	r0, r2, #28
 800b4ba:	460c      	mov	r4, r1
 800b4bc:	d458      	bmi.n	800b570 <__sflush_r+0xc0>
 800b4be:	684b      	ldr	r3, [r1, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	dc05      	bgt.n	800b4d0 <__sflush_r+0x20>
 800b4c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	dc02      	bgt.n	800b4d0 <__sflush_r+0x20>
 800b4ca:	2000      	movs	r0, #0
 800b4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4d2:	2e00      	cmp	r6, #0
 800b4d4:	d0f9      	beq.n	800b4ca <__sflush_r+0x1a>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4dc:	682f      	ldr	r7, [r5, #0]
 800b4de:	602b      	str	r3, [r5, #0]
 800b4e0:	d032      	beq.n	800b548 <__sflush_r+0x98>
 800b4e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	075a      	lsls	r2, r3, #29
 800b4e8:	d505      	bpl.n	800b4f6 <__sflush_r+0x46>
 800b4ea:	6863      	ldr	r3, [r4, #4]
 800b4ec:	1ac0      	subs	r0, r0, r3
 800b4ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4f0:	b10b      	cbz	r3, 800b4f6 <__sflush_r+0x46>
 800b4f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4f4:	1ac0      	subs	r0, r0, r3
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4fc:	6a21      	ldr	r1, [r4, #32]
 800b4fe:	4628      	mov	r0, r5
 800b500:	47b0      	blx	r6
 800b502:	1c43      	adds	r3, r0, #1
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	d106      	bne.n	800b516 <__sflush_r+0x66>
 800b508:	6829      	ldr	r1, [r5, #0]
 800b50a:	291d      	cmp	r1, #29
 800b50c:	d82c      	bhi.n	800b568 <__sflush_r+0xb8>
 800b50e:	4a2a      	ldr	r2, [pc, #168]	; (800b5b8 <__sflush_r+0x108>)
 800b510:	40ca      	lsrs	r2, r1
 800b512:	07d6      	lsls	r6, r2, #31
 800b514:	d528      	bpl.n	800b568 <__sflush_r+0xb8>
 800b516:	2200      	movs	r2, #0
 800b518:	6062      	str	r2, [r4, #4]
 800b51a:	04d9      	lsls	r1, r3, #19
 800b51c:	6922      	ldr	r2, [r4, #16]
 800b51e:	6022      	str	r2, [r4, #0]
 800b520:	d504      	bpl.n	800b52c <__sflush_r+0x7c>
 800b522:	1c42      	adds	r2, r0, #1
 800b524:	d101      	bne.n	800b52a <__sflush_r+0x7a>
 800b526:	682b      	ldr	r3, [r5, #0]
 800b528:	b903      	cbnz	r3, 800b52c <__sflush_r+0x7c>
 800b52a:	6560      	str	r0, [r4, #84]	; 0x54
 800b52c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b52e:	602f      	str	r7, [r5, #0]
 800b530:	2900      	cmp	r1, #0
 800b532:	d0ca      	beq.n	800b4ca <__sflush_r+0x1a>
 800b534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b538:	4299      	cmp	r1, r3
 800b53a:	d002      	beq.n	800b542 <__sflush_r+0x92>
 800b53c:	4628      	mov	r0, r5
 800b53e:	f7ff fa99 	bl	800aa74 <_free_r>
 800b542:	2000      	movs	r0, #0
 800b544:	6360      	str	r0, [r4, #52]	; 0x34
 800b546:	e7c1      	b.n	800b4cc <__sflush_r+0x1c>
 800b548:	6a21      	ldr	r1, [r4, #32]
 800b54a:	2301      	movs	r3, #1
 800b54c:	4628      	mov	r0, r5
 800b54e:	47b0      	blx	r6
 800b550:	1c41      	adds	r1, r0, #1
 800b552:	d1c7      	bne.n	800b4e4 <__sflush_r+0x34>
 800b554:	682b      	ldr	r3, [r5, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d0c4      	beq.n	800b4e4 <__sflush_r+0x34>
 800b55a:	2b1d      	cmp	r3, #29
 800b55c:	d001      	beq.n	800b562 <__sflush_r+0xb2>
 800b55e:	2b16      	cmp	r3, #22
 800b560:	d101      	bne.n	800b566 <__sflush_r+0xb6>
 800b562:	602f      	str	r7, [r5, #0]
 800b564:	e7b1      	b.n	800b4ca <__sflush_r+0x1a>
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b56c:	81a3      	strh	r3, [r4, #12]
 800b56e:	e7ad      	b.n	800b4cc <__sflush_r+0x1c>
 800b570:	690f      	ldr	r7, [r1, #16]
 800b572:	2f00      	cmp	r7, #0
 800b574:	d0a9      	beq.n	800b4ca <__sflush_r+0x1a>
 800b576:	0793      	lsls	r3, r2, #30
 800b578:	680e      	ldr	r6, [r1, #0]
 800b57a:	bf08      	it	eq
 800b57c:	694b      	ldreq	r3, [r1, #20]
 800b57e:	600f      	str	r7, [r1, #0]
 800b580:	bf18      	it	ne
 800b582:	2300      	movne	r3, #0
 800b584:	eba6 0807 	sub.w	r8, r6, r7
 800b588:	608b      	str	r3, [r1, #8]
 800b58a:	f1b8 0f00 	cmp.w	r8, #0
 800b58e:	dd9c      	ble.n	800b4ca <__sflush_r+0x1a>
 800b590:	6a21      	ldr	r1, [r4, #32]
 800b592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b594:	4643      	mov	r3, r8
 800b596:	463a      	mov	r2, r7
 800b598:	4628      	mov	r0, r5
 800b59a:	47b0      	blx	r6
 800b59c:	2800      	cmp	r0, #0
 800b59e:	dc06      	bgt.n	800b5ae <__sflush_r+0xfe>
 800b5a0:	89a3      	ldrh	r3, [r4, #12]
 800b5a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5a6:	81a3      	strh	r3, [r4, #12]
 800b5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ac:	e78e      	b.n	800b4cc <__sflush_r+0x1c>
 800b5ae:	4407      	add	r7, r0
 800b5b0:	eba8 0800 	sub.w	r8, r8, r0
 800b5b4:	e7e9      	b.n	800b58a <__sflush_r+0xda>
 800b5b6:	bf00      	nop
 800b5b8:	20400001 	.word	0x20400001

0800b5bc <_fflush_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	690b      	ldr	r3, [r1, #16]
 800b5c0:	4605      	mov	r5, r0
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	b913      	cbnz	r3, 800b5cc <_fflush_r+0x10>
 800b5c6:	2500      	movs	r5, #0
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	bd38      	pop	{r3, r4, r5, pc}
 800b5cc:	b118      	cbz	r0, 800b5d6 <_fflush_r+0x1a>
 800b5ce:	6983      	ldr	r3, [r0, #24]
 800b5d0:	b90b      	cbnz	r3, 800b5d6 <_fflush_r+0x1a>
 800b5d2:	f000 f887 	bl	800b6e4 <__sinit>
 800b5d6:	4b14      	ldr	r3, [pc, #80]	; (800b628 <_fflush_r+0x6c>)
 800b5d8:	429c      	cmp	r4, r3
 800b5da:	d11b      	bne.n	800b614 <_fflush_r+0x58>
 800b5dc:	686c      	ldr	r4, [r5, #4]
 800b5de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d0ef      	beq.n	800b5c6 <_fflush_r+0xa>
 800b5e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5e8:	07d0      	lsls	r0, r2, #31
 800b5ea:	d404      	bmi.n	800b5f6 <_fflush_r+0x3a>
 800b5ec:	0599      	lsls	r1, r3, #22
 800b5ee:	d402      	bmi.n	800b5f6 <_fflush_r+0x3a>
 800b5f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5f2:	f000 f915 	bl	800b820 <__retarget_lock_acquire_recursive>
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	f7ff ff59 	bl	800b4b0 <__sflush_r>
 800b5fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b600:	07da      	lsls	r2, r3, #31
 800b602:	4605      	mov	r5, r0
 800b604:	d4e0      	bmi.n	800b5c8 <_fflush_r+0xc>
 800b606:	89a3      	ldrh	r3, [r4, #12]
 800b608:	059b      	lsls	r3, r3, #22
 800b60a:	d4dd      	bmi.n	800b5c8 <_fflush_r+0xc>
 800b60c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b60e:	f000 f908 	bl	800b822 <__retarget_lock_release_recursive>
 800b612:	e7d9      	b.n	800b5c8 <_fflush_r+0xc>
 800b614:	4b05      	ldr	r3, [pc, #20]	; (800b62c <_fflush_r+0x70>)
 800b616:	429c      	cmp	r4, r3
 800b618:	d101      	bne.n	800b61e <_fflush_r+0x62>
 800b61a:	68ac      	ldr	r4, [r5, #8]
 800b61c:	e7df      	b.n	800b5de <_fflush_r+0x22>
 800b61e:	4b04      	ldr	r3, [pc, #16]	; (800b630 <_fflush_r+0x74>)
 800b620:	429c      	cmp	r4, r3
 800b622:	bf08      	it	eq
 800b624:	68ec      	ldreq	r4, [r5, #12]
 800b626:	e7da      	b.n	800b5de <_fflush_r+0x22>
 800b628:	0800c1bc 	.word	0x0800c1bc
 800b62c:	0800c1dc 	.word	0x0800c1dc
 800b630:	0800c19c 	.word	0x0800c19c

0800b634 <std>:
 800b634:	2300      	movs	r3, #0
 800b636:	b510      	push	{r4, lr}
 800b638:	4604      	mov	r4, r0
 800b63a:	e9c0 3300 	strd	r3, r3, [r0]
 800b63e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b642:	6083      	str	r3, [r0, #8]
 800b644:	8181      	strh	r1, [r0, #12]
 800b646:	6643      	str	r3, [r0, #100]	; 0x64
 800b648:	81c2      	strh	r2, [r0, #14]
 800b64a:	6183      	str	r3, [r0, #24]
 800b64c:	4619      	mov	r1, r3
 800b64e:	2208      	movs	r2, #8
 800b650:	305c      	adds	r0, #92	; 0x5c
 800b652:	f7fb fdbf 	bl	80071d4 <memset>
 800b656:	4b05      	ldr	r3, [pc, #20]	; (800b66c <std+0x38>)
 800b658:	6263      	str	r3, [r4, #36]	; 0x24
 800b65a:	4b05      	ldr	r3, [pc, #20]	; (800b670 <std+0x3c>)
 800b65c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b65e:	4b05      	ldr	r3, [pc, #20]	; (800b674 <std+0x40>)
 800b660:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b662:	4b05      	ldr	r3, [pc, #20]	; (800b678 <std+0x44>)
 800b664:	6224      	str	r4, [r4, #32]
 800b666:	6323      	str	r3, [r4, #48]	; 0x30
 800b668:	bd10      	pop	{r4, pc}
 800b66a:	bf00      	nop
 800b66c:	0800b989 	.word	0x0800b989
 800b670:	0800b9ab 	.word	0x0800b9ab
 800b674:	0800b9e3 	.word	0x0800b9e3
 800b678:	0800ba07 	.word	0x0800ba07

0800b67c <_cleanup_r>:
 800b67c:	4901      	ldr	r1, [pc, #4]	; (800b684 <_cleanup_r+0x8>)
 800b67e:	f000 b8af 	b.w	800b7e0 <_fwalk_reent>
 800b682:	bf00      	nop
 800b684:	0800b5bd 	.word	0x0800b5bd

0800b688 <__sfmoreglue>:
 800b688:	b570      	push	{r4, r5, r6, lr}
 800b68a:	2268      	movs	r2, #104	; 0x68
 800b68c:	1e4d      	subs	r5, r1, #1
 800b68e:	4355      	muls	r5, r2
 800b690:	460e      	mov	r6, r1
 800b692:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b696:	f7ff fa59 	bl	800ab4c <_malloc_r>
 800b69a:	4604      	mov	r4, r0
 800b69c:	b140      	cbz	r0, 800b6b0 <__sfmoreglue+0x28>
 800b69e:	2100      	movs	r1, #0
 800b6a0:	e9c0 1600 	strd	r1, r6, [r0]
 800b6a4:	300c      	adds	r0, #12
 800b6a6:	60a0      	str	r0, [r4, #8]
 800b6a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b6ac:	f7fb fd92 	bl	80071d4 <memset>
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}

0800b6b4 <__sfp_lock_acquire>:
 800b6b4:	4801      	ldr	r0, [pc, #4]	; (800b6bc <__sfp_lock_acquire+0x8>)
 800b6b6:	f000 b8b3 	b.w	800b820 <__retarget_lock_acquire_recursive>
 800b6ba:	bf00      	nop
 800b6bc:	20004801 	.word	0x20004801

0800b6c0 <__sfp_lock_release>:
 800b6c0:	4801      	ldr	r0, [pc, #4]	; (800b6c8 <__sfp_lock_release+0x8>)
 800b6c2:	f000 b8ae 	b.w	800b822 <__retarget_lock_release_recursive>
 800b6c6:	bf00      	nop
 800b6c8:	20004801 	.word	0x20004801

0800b6cc <__sinit_lock_acquire>:
 800b6cc:	4801      	ldr	r0, [pc, #4]	; (800b6d4 <__sinit_lock_acquire+0x8>)
 800b6ce:	f000 b8a7 	b.w	800b820 <__retarget_lock_acquire_recursive>
 800b6d2:	bf00      	nop
 800b6d4:	20004802 	.word	0x20004802

0800b6d8 <__sinit_lock_release>:
 800b6d8:	4801      	ldr	r0, [pc, #4]	; (800b6e0 <__sinit_lock_release+0x8>)
 800b6da:	f000 b8a2 	b.w	800b822 <__retarget_lock_release_recursive>
 800b6de:	bf00      	nop
 800b6e0:	20004802 	.word	0x20004802

0800b6e4 <__sinit>:
 800b6e4:	b510      	push	{r4, lr}
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	f7ff fff0 	bl	800b6cc <__sinit_lock_acquire>
 800b6ec:	69a3      	ldr	r3, [r4, #24]
 800b6ee:	b11b      	cbz	r3, 800b6f8 <__sinit+0x14>
 800b6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6f4:	f7ff bff0 	b.w	800b6d8 <__sinit_lock_release>
 800b6f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6fc:	6523      	str	r3, [r4, #80]	; 0x50
 800b6fe:	4b13      	ldr	r3, [pc, #76]	; (800b74c <__sinit+0x68>)
 800b700:	4a13      	ldr	r2, [pc, #76]	; (800b750 <__sinit+0x6c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	62a2      	str	r2, [r4, #40]	; 0x28
 800b706:	42a3      	cmp	r3, r4
 800b708:	bf04      	itt	eq
 800b70a:	2301      	moveq	r3, #1
 800b70c:	61a3      	streq	r3, [r4, #24]
 800b70e:	4620      	mov	r0, r4
 800b710:	f000 f820 	bl	800b754 <__sfp>
 800b714:	6060      	str	r0, [r4, #4]
 800b716:	4620      	mov	r0, r4
 800b718:	f000 f81c 	bl	800b754 <__sfp>
 800b71c:	60a0      	str	r0, [r4, #8]
 800b71e:	4620      	mov	r0, r4
 800b720:	f000 f818 	bl	800b754 <__sfp>
 800b724:	2200      	movs	r2, #0
 800b726:	60e0      	str	r0, [r4, #12]
 800b728:	2104      	movs	r1, #4
 800b72a:	6860      	ldr	r0, [r4, #4]
 800b72c:	f7ff ff82 	bl	800b634 <std>
 800b730:	68a0      	ldr	r0, [r4, #8]
 800b732:	2201      	movs	r2, #1
 800b734:	2109      	movs	r1, #9
 800b736:	f7ff ff7d 	bl	800b634 <std>
 800b73a:	68e0      	ldr	r0, [r4, #12]
 800b73c:	2202      	movs	r2, #2
 800b73e:	2112      	movs	r1, #18
 800b740:	f7ff ff78 	bl	800b634 <std>
 800b744:	2301      	movs	r3, #1
 800b746:	61a3      	str	r3, [r4, #24]
 800b748:	e7d2      	b.n	800b6f0 <__sinit+0xc>
 800b74a:	bf00      	nop
 800b74c:	0800bd58 	.word	0x0800bd58
 800b750:	0800b67d 	.word	0x0800b67d

0800b754 <__sfp>:
 800b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b756:	4607      	mov	r7, r0
 800b758:	f7ff ffac 	bl	800b6b4 <__sfp_lock_acquire>
 800b75c:	4b1e      	ldr	r3, [pc, #120]	; (800b7d8 <__sfp+0x84>)
 800b75e:	681e      	ldr	r6, [r3, #0]
 800b760:	69b3      	ldr	r3, [r6, #24]
 800b762:	b913      	cbnz	r3, 800b76a <__sfp+0x16>
 800b764:	4630      	mov	r0, r6
 800b766:	f7ff ffbd 	bl	800b6e4 <__sinit>
 800b76a:	3648      	adds	r6, #72	; 0x48
 800b76c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b770:	3b01      	subs	r3, #1
 800b772:	d503      	bpl.n	800b77c <__sfp+0x28>
 800b774:	6833      	ldr	r3, [r6, #0]
 800b776:	b30b      	cbz	r3, 800b7bc <__sfp+0x68>
 800b778:	6836      	ldr	r6, [r6, #0]
 800b77a:	e7f7      	b.n	800b76c <__sfp+0x18>
 800b77c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b780:	b9d5      	cbnz	r5, 800b7b8 <__sfp+0x64>
 800b782:	4b16      	ldr	r3, [pc, #88]	; (800b7dc <__sfp+0x88>)
 800b784:	60e3      	str	r3, [r4, #12]
 800b786:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b78a:	6665      	str	r5, [r4, #100]	; 0x64
 800b78c:	f000 f847 	bl	800b81e <__retarget_lock_init_recursive>
 800b790:	f7ff ff96 	bl	800b6c0 <__sfp_lock_release>
 800b794:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b798:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b79c:	6025      	str	r5, [r4, #0]
 800b79e:	61a5      	str	r5, [r4, #24]
 800b7a0:	2208      	movs	r2, #8
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b7a8:	f7fb fd14 	bl	80071d4 <memset>
 800b7ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b7b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7b8:	3468      	adds	r4, #104	; 0x68
 800b7ba:	e7d9      	b.n	800b770 <__sfp+0x1c>
 800b7bc:	2104      	movs	r1, #4
 800b7be:	4638      	mov	r0, r7
 800b7c0:	f7ff ff62 	bl	800b688 <__sfmoreglue>
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	6030      	str	r0, [r6, #0]
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d1d5      	bne.n	800b778 <__sfp+0x24>
 800b7cc:	f7ff ff78 	bl	800b6c0 <__sfp_lock_release>
 800b7d0:	230c      	movs	r3, #12
 800b7d2:	603b      	str	r3, [r7, #0]
 800b7d4:	e7ee      	b.n	800b7b4 <__sfp+0x60>
 800b7d6:	bf00      	nop
 800b7d8:	0800bd58 	.word	0x0800bd58
 800b7dc:	ffff0001 	.word	0xffff0001

0800b7e0 <_fwalk_reent>:
 800b7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e4:	4606      	mov	r6, r0
 800b7e6:	4688      	mov	r8, r1
 800b7e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b7ec:	2700      	movs	r7, #0
 800b7ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7f2:	f1b9 0901 	subs.w	r9, r9, #1
 800b7f6:	d505      	bpl.n	800b804 <_fwalk_reent+0x24>
 800b7f8:	6824      	ldr	r4, [r4, #0]
 800b7fa:	2c00      	cmp	r4, #0
 800b7fc:	d1f7      	bne.n	800b7ee <_fwalk_reent+0xe>
 800b7fe:	4638      	mov	r0, r7
 800b800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b804:	89ab      	ldrh	r3, [r5, #12]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d907      	bls.n	800b81a <_fwalk_reent+0x3a>
 800b80a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b80e:	3301      	adds	r3, #1
 800b810:	d003      	beq.n	800b81a <_fwalk_reent+0x3a>
 800b812:	4629      	mov	r1, r5
 800b814:	4630      	mov	r0, r6
 800b816:	47c0      	blx	r8
 800b818:	4307      	orrs	r7, r0
 800b81a:	3568      	adds	r5, #104	; 0x68
 800b81c:	e7e9      	b.n	800b7f2 <_fwalk_reent+0x12>

0800b81e <__retarget_lock_init_recursive>:
 800b81e:	4770      	bx	lr

0800b820 <__retarget_lock_acquire_recursive>:
 800b820:	4770      	bx	lr

0800b822 <__retarget_lock_release_recursive>:
 800b822:	4770      	bx	lr

0800b824 <__swhatbuf_r>:
 800b824:	b570      	push	{r4, r5, r6, lr}
 800b826:	460e      	mov	r6, r1
 800b828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b82c:	2900      	cmp	r1, #0
 800b82e:	b096      	sub	sp, #88	; 0x58
 800b830:	4614      	mov	r4, r2
 800b832:	461d      	mov	r5, r3
 800b834:	da08      	bge.n	800b848 <__swhatbuf_r+0x24>
 800b836:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	602a      	str	r2, [r5, #0]
 800b83e:	061a      	lsls	r2, r3, #24
 800b840:	d410      	bmi.n	800b864 <__swhatbuf_r+0x40>
 800b842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b846:	e00e      	b.n	800b866 <__swhatbuf_r+0x42>
 800b848:	466a      	mov	r2, sp
 800b84a:	f000 f903 	bl	800ba54 <_fstat_r>
 800b84e:	2800      	cmp	r0, #0
 800b850:	dbf1      	blt.n	800b836 <__swhatbuf_r+0x12>
 800b852:	9a01      	ldr	r2, [sp, #4]
 800b854:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b858:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b85c:	425a      	negs	r2, r3
 800b85e:	415a      	adcs	r2, r3
 800b860:	602a      	str	r2, [r5, #0]
 800b862:	e7ee      	b.n	800b842 <__swhatbuf_r+0x1e>
 800b864:	2340      	movs	r3, #64	; 0x40
 800b866:	2000      	movs	r0, #0
 800b868:	6023      	str	r3, [r4, #0]
 800b86a:	b016      	add	sp, #88	; 0x58
 800b86c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b870 <__smakebuf_r>:
 800b870:	898b      	ldrh	r3, [r1, #12]
 800b872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b874:	079d      	lsls	r5, r3, #30
 800b876:	4606      	mov	r6, r0
 800b878:	460c      	mov	r4, r1
 800b87a:	d507      	bpl.n	800b88c <__smakebuf_r+0x1c>
 800b87c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	6123      	str	r3, [r4, #16]
 800b884:	2301      	movs	r3, #1
 800b886:	6163      	str	r3, [r4, #20]
 800b888:	b002      	add	sp, #8
 800b88a:	bd70      	pop	{r4, r5, r6, pc}
 800b88c:	ab01      	add	r3, sp, #4
 800b88e:	466a      	mov	r2, sp
 800b890:	f7ff ffc8 	bl	800b824 <__swhatbuf_r>
 800b894:	9900      	ldr	r1, [sp, #0]
 800b896:	4605      	mov	r5, r0
 800b898:	4630      	mov	r0, r6
 800b89a:	f7ff f957 	bl	800ab4c <_malloc_r>
 800b89e:	b948      	cbnz	r0, 800b8b4 <__smakebuf_r+0x44>
 800b8a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8a4:	059a      	lsls	r2, r3, #22
 800b8a6:	d4ef      	bmi.n	800b888 <__smakebuf_r+0x18>
 800b8a8:	f023 0303 	bic.w	r3, r3, #3
 800b8ac:	f043 0302 	orr.w	r3, r3, #2
 800b8b0:	81a3      	strh	r3, [r4, #12]
 800b8b2:	e7e3      	b.n	800b87c <__smakebuf_r+0xc>
 800b8b4:	4b0d      	ldr	r3, [pc, #52]	; (800b8ec <__smakebuf_r+0x7c>)
 800b8b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8b8:	89a3      	ldrh	r3, [r4, #12]
 800b8ba:	6020      	str	r0, [r4, #0]
 800b8bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8c0:	81a3      	strh	r3, [r4, #12]
 800b8c2:	9b00      	ldr	r3, [sp, #0]
 800b8c4:	6163      	str	r3, [r4, #20]
 800b8c6:	9b01      	ldr	r3, [sp, #4]
 800b8c8:	6120      	str	r0, [r4, #16]
 800b8ca:	b15b      	cbz	r3, 800b8e4 <__smakebuf_r+0x74>
 800b8cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f000 f8d1 	bl	800ba78 <_isatty_r>
 800b8d6:	b128      	cbz	r0, 800b8e4 <__smakebuf_r+0x74>
 800b8d8:	89a3      	ldrh	r3, [r4, #12]
 800b8da:	f023 0303 	bic.w	r3, r3, #3
 800b8de:	f043 0301 	orr.w	r3, r3, #1
 800b8e2:	81a3      	strh	r3, [r4, #12]
 800b8e4:	89a0      	ldrh	r0, [r4, #12]
 800b8e6:	4305      	orrs	r5, r0
 800b8e8:	81a5      	strh	r5, [r4, #12]
 800b8ea:	e7cd      	b.n	800b888 <__smakebuf_r+0x18>
 800b8ec:	0800b67d 	.word	0x0800b67d

0800b8f0 <_malloc_usable_size_r>:
 800b8f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8f4:	1f18      	subs	r0, r3, #4
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	bfbc      	itt	lt
 800b8fa:	580b      	ldrlt	r3, [r1, r0]
 800b8fc:	18c0      	addlt	r0, r0, r3
 800b8fe:	4770      	bx	lr

0800b900 <_raise_r>:
 800b900:	291f      	cmp	r1, #31
 800b902:	b538      	push	{r3, r4, r5, lr}
 800b904:	4604      	mov	r4, r0
 800b906:	460d      	mov	r5, r1
 800b908:	d904      	bls.n	800b914 <_raise_r+0x14>
 800b90a:	2316      	movs	r3, #22
 800b90c:	6003      	str	r3, [r0, #0]
 800b90e:	f04f 30ff 	mov.w	r0, #4294967295
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b916:	b112      	cbz	r2, 800b91e <_raise_r+0x1e>
 800b918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b91c:	b94b      	cbnz	r3, 800b932 <_raise_r+0x32>
 800b91e:	4620      	mov	r0, r4
 800b920:	f000 f830 	bl	800b984 <_getpid_r>
 800b924:	462a      	mov	r2, r5
 800b926:	4601      	mov	r1, r0
 800b928:	4620      	mov	r0, r4
 800b92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b92e:	f000 b817 	b.w	800b960 <_kill_r>
 800b932:	2b01      	cmp	r3, #1
 800b934:	d00a      	beq.n	800b94c <_raise_r+0x4c>
 800b936:	1c59      	adds	r1, r3, #1
 800b938:	d103      	bne.n	800b942 <_raise_r+0x42>
 800b93a:	2316      	movs	r3, #22
 800b93c:	6003      	str	r3, [r0, #0]
 800b93e:	2001      	movs	r0, #1
 800b940:	e7e7      	b.n	800b912 <_raise_r+0x12>
 800b942:	2400      	movs	r4, #0
 800b944:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b948:	4628      	mov	r0, r5
 800b94a:	4798      	blx	r3
 800b94c:	2000      	movs	r0, #0
 800b94e:	e7e0      	b.n	800b912 <_raise_r+0x12>

0800b950 <raise>:
 800b950:	4b02      	ldr	r3, [pc, #8]	; (800b95c <raise+0xc>)
 800b952:	4601      	mov	r1, r0
 800b954:	6818      	ldr	r0, [r3, #0]
 800b956:	f7ff bfd3 	b.w	800b900 <_raise_r>
 800b95a:	bf00      	nop
 800b95c:	20000028 	.word	0x20000028

0800b960 <_kill_r>:
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	4d07      	ldr	r5, [pc, #28]	; (800b980 <_kill_r+0x20>)
 800b964:	2300      	movs	r3, #0
 800b966:	4604      	mov	r4, r0
 800b968:	4608      	mov	r0, r1
 800b96a:	4611      	mov	r1, r2
 800b96c:	602b      	str	r3, [r5, #0]
 800b96e:	f7f6 fb89 	bl	8002084 <_kill>
 800b972:	1c43      	adds	r3, r0, #1
 800b974:	d102      	bne.n	800b97c <_kill_r+0x1c>
 800b976:	682b      	ldr	r3, [r5, #0]
 800b978:	b103      	cbz	r3, 800b97c <_kill_r+0x1c>
 800b97a:	6023      	str	r3, [r4, #0]
 800b97c:	bd38      	pop	{r3, r4, r5, pc}
 800b97e:	bf00      	nop
 800b980:	200047fc 	.word	0x200047fc

0800b984 <_getpid_r>:
 800b984:	f7f6 bb76 	b.w	8002074 <_getpid>

0800b988 <__sread>:
 800b988:	b510      	push	{r4, lr}
 800b98a:	460c      	mov	r4, r1
 800b98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b990:	f000 f894 	bl	800babc <_read_r>
 800b994:	2800      	cmp	r0, #0
 800b996:	bfab      	itete	ge
 800b998:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b99a:	89a3      	ldrhlt	r3, [r4, #12]
 800b99c:	181b      	addge	r3, r3, r0
 800b99e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9a2:	bfac      	ite	ge
 800b9a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9a6:	81a3      	strhlt	r3, [r4, #12]
 800b9a8:	bd10      	pop	{r4, pc}

0800b9aa <__swrite>:
 800b9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ae:	461f      	mov	r7, r3
 800b9b0:	898b      	ldrh	r3, [r1, #12]
 800b9b2:	05db      	lsls	r3, r3, #23
 800b9b4:	4605      	mov	r5, r0
 800b9b6:	460c      	mov	r4, r1
 800b9b8:	4616      	mov	r6, r2
 800b9ba:	d505      	bpl.n	800b9c8 <__swrite+0x1e>
 800b9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c0:	2302      	movs	r3, #2
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f000 f868 	bl	800ba98 <_lseek_r>
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9d2:	81a3      	strh	r3, [r4, #12]
 800b9d4:	4632      	mov	r2, r6
 800b9d6:	463b      	mov	r3, r7
 800b9d8:	4628      	mov	r0, r5
 800b9da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9de:	f000 b817 	b.w	800ba10 <_write_r>

0800b9e2 <__sseek>:
 800b9e2:	b510      	push	{r4, lr}
 800b9e4:	460c      	mov	r4, r1
 800b9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ea:	f000 f855 	bl	800ba98 <_lseek_r>
 800b9ee:	1c43      	adds	r3, r0, #1
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	bf15      	itete	ne
 800b9f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9fe:	81a3      	strheq	r3, [r4, #12]
 800ba00:	bf18      	it	ne
 800ba02:	81a3      	strhne	r3, [r4, #12]
 800ba04:	bd10      	pop	{r4, pc}

0800ba06 <__sclose>:
 800ba06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba0a:	f000 b813 	b.w	800ba34 <_close_r>
	...

0800ba10 <_write_r>:
 800ba10:	b538      	push	{r3, r4, r5, lr}
 800ba12:	4d07      	ldr	r5, [pc, #28]	; (800ba30 <_write_r+0x20>)
 800ba14:	4604      	mov	r4, r0
 800ba16:	4608      	mov	r0, r1
 800ba18:	4611      	mov	r1, r2
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	602a      	str	r2, [r5, #0]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	f7f6 fb67 	bl	80020f2 <_write>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	d102      	bne.n	800ba2e <_write_r+0x1e>
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	b103      	cbz	r3, 800ba2e <_write_r+0x1e>
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}
 800ba30:	200047fc 	.word	0x200047fc

0800ba34 <_close_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	4d06      	ldr	r5, [pc, #24]	; (800ba50 <_close_r+0x1c>)
 800ba38:	2300      	movs	r3, #0
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	4608      	mov	r0, r1
 800ba3e:	602b      	str	r3, [r5, #0]
 800ba40:	f7f6 fb73 	bl	800212a <_close>
 800ba44:	1c43      	adds	r3, r0, #1
 800ba46:	d102      	bne.n	800ba4e <_close_r+0x1a>
 800ba48:	682b      	ldr	r3, [r5, #0]
 800ba4a:	b103      	cbz	r3, 800ba4e <_close_r+0x1a>
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	bd38      	pop	{r3, r4, r5, pc}
 800ba50:	200047fc 	.word	0x200047fc

0800ba54 <_fstat_r>:
 800ba54:	b538      	push	{r3, r4, r5, lr}
 800ba56:	4d07      	ldr	r5, [pc, #28]	; (800ba74 <_fstat_r+0x20>)
 800ba58:	2300      	movs	r3, #0
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	4608      	mov	r0, r1
 800ba5e:	4611      	mov	r1, r2
 800ba60:	602b      	str	r3, [r5, #0]
 800ba62:	f7f6 fb6e 	bl	8002142 <_fstat>
 800ba66:	1c43      	adds	r3, r0, #1
 800ba68:	d102      	bne.n	800ba70 <_fstat_r+0x1c>
 800ba6a:	682b      	ldr	r3, [r5, #0]
 800ba6c:	b103      	cbz	r3, 800ba70 <_fstat_r+0x1c>
 800ba6e:	6023      	str	r3, [r4, #0]
 800ba70:	bd38      	pop	{r3, r4, r5, pc}
 800ba72:	bf00      	nop
 800ba74:	200047fc 	.word	0x200047fc

0800ba78 <_isatty_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4d06      	ldr	r5, [pc, #24]	; (800ba94 <_isatty_r+0x1c>)
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4604      	mov	r4, r0
 800ba80:	4608      	mov	r0, r1
 800ba82:	602b      	str	r3, [r5, #0]
 800ba84:	f7f6 fb6d 	bl	8002162 <_isatty>
 800ba88:	1c43      	adds	r3, r0, #1
 800ba8a:	d102      	bne.n	800ba92 <_isatty_r+0x1a>
 800ba8c:	682b      	ldr	r3, [r5, #0]
 800ba8e:	b103      	cbz	r3, 800ba92 <_isatty_r+0x1a>
 800ba90:	6023      	str	r3, [r4, #0]
 800ba92:	bd38      	pop	{r3, r4, r5, pc}
 800ba94:	200047fc 	.word	0x200047fc

0800ba98 <_lseek_r>:
 800ba98:	b538      	push	{r3, r4, r5, lr}
 800ba9a:	4d07      	ldr	r5, [pc, #28]	; (800bab8 <_lseek_r+0x20>)
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	4608      	mov	r0, r1
 800baa0:	4611      	mov	r1, r2
 800baa2:	2200      	movs	r2, #0
 800baa4:	602a      	str	r2, [r5, #0]
 800baa6:	461a      	mov	r2, r3
 800baa8:	f7f6 fb66 	bl	8002178 <_lseek>
 800baac:	1c43      	adds	r3, r0, #1
 800baae:	d102      	bne.n	800bab6 <_lseek_r+0x1e>
 800bab0:	682b      	ldr	r3, [r5, #0]
 800bab2:	b103      	cbz	r3, 800bab6 <_lseek_r+0x1e>
 800bab4:	6023      	str	r3, [r4, #0]
 800bab6:	bd38      	pop	{r3, r4, r5, pc}
 800bab8:	200047fc 	.word	0x200047fc

0800babc <_read_r>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	4d07      	ldr	r5, [pc, #28]	; (800badc <_read_r+0x20>)
 800bac0:	4604      	mov	r4, r0
 800bac2:	4608      	mov	r0, r1
 800bac4:	4611      	mov	r1, r2
 800bac6:	2200      	movs	r2, #0
 800bac8:	602a      	str	r2, [r5, #0]
 800baca:	461a      	mov	r2, r3
 800bacc:	f7f6 faf4 	bl	80020b8 <_read>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d102      	bne.n	800bada <_read_r+0x1e>
 800bad4:	682b      	ldr	r3, [r5, #0]
 800bad6:	b103      	cbz	r3, 800bada <_read_r+0x1e>
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	200047fc 	.word	0x200047fc

0800bae0 <_init>:
 800bae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae2:	bf00      	nop
 800bae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bae6:	bc08      	pop	{r3}
 800bae8:	469e      	mov	lr, r3
 800baea:	4770      	bx	lr

0800baec <_fini>:
 800baec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baee:	bf00      	nop
 800baf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baf2:	bc08      	pop	{r3}
 800baf4:	469e      	mov	lr, r3
 800baf6:	4770      	bx	lr
